{"version":3,"file":"serviceworker.mjs","sources":["../../../appframework/bsbi-app-framework/dist/esm/index.js","../src/serviceworker/worker.js","../src/framework/NyphApp.js"],"sourcesContent":["import { GridRef } from 'british-isles-gridrefs';\n\n// AppController\r\n// Abstract super-class for page controllers\r\n\r\nclass AppController {\r\n\r\n    /**\r\n     *\r\n     * @type {(null|string)}\r\n     */\r\n    route = null;\r\n\r\n    /**\r\n     *\r\n     * @type {Page}\r\n     */\r\n    view;\r\n\r\n    title = 'untitled';\r\n\r\n    /**\r\n     *\r\n     * @type {number}\r\n     */\r\n    handle;\r\n\r\n    /**\r\n     *\r\n     * @type {App}\r\n     */\r\n    app;\r\n\r\n    /**\r\n     *\r\n     * @type {function|null}\r\n     */\r\n    beforeRouteHandler = null;\r\n\r\n    /**\r\n     *\r\n     * @type {function|null}\r\n     */\r\n    afterRouteHandler = null;\r\n\r\n    /**\r\n     *\r\n     * @type {function|null}\r\n     */\r\n    leaveRouteHandler = null;\r\n\r\n    /**\r\n     *\r\n     * @type {function|null}\r\n     */\r\n    alreadyRouteHandler = null;\r\n\r\n    static #handleIndex = 0;\r\n\r\n    static get nextHandle() {\r\n        return AppController.#handleIndex++;\r\n    }\r\n\r\n    /**\r\n     * called from App.initialise() to trigger late-stage initialisation\r\n     */\r\n    initialise() {\r\n        this.view.initialise();\r\n    }\r\n\r\n    /**\r\n     * registers the default route from this.route\r\n     * or alternatively is overridden in a child class\r\n     *\r\n     * @param {PatchedNavigo} router\r\n     */\r\n    registerRoute(router) {\r\n        if (null === this.route) {\r\n            throw new Error(`No route set for '${this.title}' controller.`);\r\n        }\r\n\r\n        console.log({route : this.route});\r\n\r\n        router.on(\r\n            this.route,\r\n            this.routeHandler.bind(this),\r\n            {\r\n                before : this.beforeRouteHandler ? this.beforeRouteHandler.bind(this) : null,\r\n                after : this.afterRouteHandler ? this.afterRouteHandler.bind(this) : null,\r\n                leave : this.leaveRouteHandler ? this.leaveRouteHandler.bind(this) : null,\r\n                already : this.alreadyRouteHandler ? this.alreadyRouteHandler.bind(this) : null\r\n            }\r\n        );\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param {object} params\r\n     * @param {string} query\r\n     */\r\n    routeHandler(params, query) {\r\n\r\n    }\r\n}\n\n// StaticContentController\r\n\r\nclass StaticContentController extends AppController {\r\n    /**\r\n     * @type {string}\r\n     */\r\n    route;\r\n\r\n    /**\r\n     *\r\n     * @param {Page} view\r\n     * @param {string} route\r\n     */\r\n    constructor (view, route) {\r\n        super();\r\n\r\n        this.view = view;\r\n        this.route = route;\r\n\r\n        this.handle = AppController.nextHandle;\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param {object} params\r\n     * @param {string} query\r\n     */\r\n    routeHandler(params, query) {\r\n        // console.log(\"reached route handler for StaticContentController.js\");\r\n\r\n        this.app.currentControllerHandle = this.handle;\r\n        this.view.display();\r\n    }\r\n}\n\nclass NotFoundError extends Error {\r\n    constructor (message) {\r\n        super(message);\r\n    }\r\n}\n\n/**\r\n * @typedef {number} EventHarness~Handle\r\n */\r\n\r\nclass EventHarness {\r\n    /**\r\n     *\r\n     * @type {*[]}\r\n     */\r\n    #eventListeners = [];\r\n\r\n    static STOP_PROPAGATION = 'STOP_PROPAGATION';\r\n\r\n    // /**\r\n    //  *\r\n    //  * @param {string} eventName\r\n    //  * @param {Object} obj\r\n    //  * @param {Function} method\r\n    //  * @param {*=} constructionParam\r\n    //  * @deprecated use addListener instead\r\n    //  * @return {number} handle\r\n    //  */\r\n    // bindListener (eventName, obj, method, constructionParam) {\r\n    //     this.#eventListeners = this.#eventListeners || [];\r\n    //\r\n    //     const handlerFunction =\r\n    //         function(context, eventName, invocationParam) {\r\n    //             return method.call(obj, context, eventName, invocationParam, constructionParam);\r\n    //         };\r\n    //\r\n    //     if (this.#eventListeners[eventName]) {\r\n    //         return (this.#eventListeners[eventName].push(handlerFunction))-1;\r\n    //     } else {\r\n    //         this.#eventListeners[eventName] = [handlerFunction];\r\n    //         return 0; // first element in array\r\n    //     }\r\n    // };\r\n\r\n    /**\r\n     *\r\n     * @param {string} eventName\r\n     * @param {Function} handler\r\n     * @param {*=} constructionParam\r\n     * @return {EventHarness~Handle} handle\r\n     */\r\n    addListener (eventName, handler, constructionParam = {}) {\r\n        this.#eventListeners = this.#eventListeners || [];\r\n\r\n        const handlerFunction =\r\n            function(context, eventName, invocationParam = {}) {\r\n                return handler({context, eventName, ...invocationParam, ...constructionParam});\r\n            };\r\n\r\n        if (this.#eventListeners[eventName]) {\r\n            return (this.#eventListeners[eventName].push(handlerFunction)) - 1;\r\n        } else {\r\n            this.#eventListeners[eventName] = [handlerFunction];\r\n            return 0; // first element in array\r\n        }\r\n    };\r\n\r\n    /**\r\n     *\r\n     * @param {string} eventName\r\n     * @param {number} handle\r\n     * @returns undefined\r\n     */\r\n    removeListener(eventName, handle) {\r\n        if (this.#eventListeners[eventName] && this.#eventListeners[eventName][handle]) {\r\n            delete this.#eventListeners[eventName][handle];\r\n        } else {\r\n            console.log('trying to remove non-existent event handler, event = ' + eventName + ' handle = ' + handle);\r\n        }\r\n        return undefined;\r\n    };\r\n\r\n    /**\r\n     *\r\n     */\r\n    destructor() {\r\n        this.#eventListeners = null;\r\n    };\r\n\r\n    /**\r\n     *\r\n     * @param {string} eventName\r\n     * @param {Object=} param optional parameter to pass on to listener\r\n     * @return void\r\n     */\r\n    fireEvent (eventName, param) {\r\n        //console.log('fire event \"' + eventName + '\" called by '+this.fire_event.caller.caller+' invoked by '+this.fire_event.caller.caller.caller+' instigated by '+this.fire_event.caller.caller.caller.caller);\r\n\r\n        if (this.#eventListeners) {\r\n            for (let f in this.#eventListeners[eventName]) {\r\n                if (this.#eventListeners[eventName].hasOwnProperty(f)) {\r\n                    if (this.#eventListeners[eventName][f](this, eventName, arguments[1]) === EventHarness.STOP_PROPAGATION) {\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    };\r\n}\n\nvar commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};\n\nfunction getDefaultExportFromCjs (x) {\n\treturn x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;\n}\n\nfunction commonjsRequire(path) {\n\tthrow new Error('Could not dynamically require \"' + path + '\". Please configure the dynamicRequireTargets or/and ignoreDynamicRequires option of @rollup/plugin-commonjs appropriately for this require call to work.');\n}\n\nvar localforage$1 = {exports: {}};\n\n/*!\n    localForage -- Offline Storage, Improved\n    Version 1.10.0\n    https://localforage.github.io/localForage\n    (c) 2013-2017 Mozilla, Apache License 2.0\n*/\n\n(function (module, exports) {\n\t(function(f){{module.exports=f();}})(function(){return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof commonjsRequire==\"function\"&&commonjsRequire;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw (f.code=\"MODULE_NOT_FOUND\", f)}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r);}return n[o].exports}var i=typeof commonjsRequire==\"function\"&&commonjsRequire;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(_dereq_,module,exports){\n\t(function (global){\n\tvar Mutation = global.MutationObserver || global.WebKitMutationObserver;\n\n\tvar scheduleDrain;\n\n\t{\n\t  if (Mutation) {\n\t    var called = 0;\n\t    var observer = new Mutation(nextTick);\n\t    var element = global.document.createTextNode('');\n\t    observer.observe(element, {\n\t      characterData: true\n\t    });\n\t    scheduleDrain = function () {\n\t      element.data = (called = ++called % 2);\n\t    };\n\t  } else if (!global.setImmediate && typeof global.MessageChannel !== 'undefined') {\n\t    var channel = new global.MessageChannel();\n\t    channel.port1.onmessage = nextTick;\n\t    scheduleDrain = function () {\n\t      channel.port2.postMessage(0);\n\t    };\n\t  } else if ('document' in global && 'onreadystatechange' in global.document.createElement('script')) {\n\t    scheduleDrain = function () {\n\n\t      // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted\n\t      // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.\n\t      var scriptEl = global.document.createElement('script');\n\t      scriptEl.onreadystatechange = function () {\n\t        nextTick();\n\n\t        scriptEl.onreadystatechange = null;\n\t        scriptEl.parentNode.removeChild(scriptEl);\n\t        scriptEl = null;\n\t      };\n\t      global.document.documentElement.appendChild(scriptEl);\n\t    };\n\t  } else {\n\t    scheduleDrain = function () {\n\t      setTimeout(nextTick, 0);\n\t    };\n\t  }\n\t}\n\n\tvar draining;\n\tvar queue = [];\n\t//named nextTick for less confusing stack traces\n\tfunction nextTick() {\n\t  draining = true;\n\t  var i, oldQueue;\n\t  var len = queue.length;\n\t  while (len) {\n\t    oldQueue = queue;\n\t    queue = [];\n\t    i = -1;\n\t    while (++i < len) {\n\t      oldQueue[i]();\n\t    }\n\t    len = queue.length;\n\t  }\n\t  draining = false;\n\t}\n\n\tmodule.exports = immediate;\n\tfunction immediate(task) {\n\t  if (queue.push(task) === 1 && !draining) {\n\t    scheduleDrain();\n\t  }\n\t}\n\n\t}).call(this,typeof commonjsGlobal !== \"undefined\" ? commonjsGlobal : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {});\n\t},{}],2:[function(_dereq_,module,exports){\n\tvar immediate = _dereq_(1);\n\n\t/* istanbul ignore next */\n\tfunction INTERNAL() {}\n\n\tvar handlers = {};\n\n\tvar REJECTED = ['REJECTED'];\n\tvar FULFILLED = ['FULFILLED'];\n\tvar PENDING = ['PENDING'];\n\n\tmodule.exports = Promise;\n\n\tfunction Promise(resolver) {\n\t  if (typeof resolver !== 'function') {\n\t    throw new TypeError('resolver must be a function');\n\t  }\n\t  this.state = PENDING;\n\t  this.queue = [];\n\t  this.outcome = void 0;\n\t  if (resolver !== INTERNAL) {\n\t    safelyResolveThenable(this, resolver);\n\t  }\n\t}\n\n\tPromise.prototype[\"catch\"] = function (onRejected) {\n\t  return this.then(null, onRejected);\n\t};\n\tPromise.prototype.then = function (onFulfilled, onRejected) {\n\t  if (typeof onFulfilled !== 'function' && this.state === FULFILLED ||\n\t    typeof onRejected !== 'function' && this.state === REJECTED) {\n\t    return this;\n\t  }\n\t  var promise = new this.constructor(INTERNAL);\n\t  if (this.state !== PENDING) {\n\t    var resolver = this.state === FULFILLED ? onFulfilled : onRejected;\n\t    unwrap(promise, resolver, this.outcome);\n\t  } else {\n\t    this.queue.push(new QueueItem(promise, onFulfilled, onRejected));\n\t  }\n\n\t  return promise;\n\t};\n\tfunction QueueItem(promise, onFulfilled, onRejected) {\n\t  this.promise = promise;\n\t  if (typeof onFulfilled === 'function') {\n\t    this.onFulfilled = onFulfilled;\n\t    this.callFulfilled = this.otherCallFulfilled;\n\t  }\n\t  if (typeof onRejected === 'function') {\n\t    this.onRejected = onRejected;\n\t    this.callRejected = this.otherCallRejected;\n\t  }\n\t}\n\tQueueItem.prototype.callFulfilled = function (value) {\n\t  handlers.resolve(this.promise, value);\n\t};\n\tQueueItem.prototype.otherCallFulfilled = function (value) {\n\t  unwrap(this.promise, this.onFulfilled, value);\n\t};\n\tQueueItem.prototype.callRejected = function (value) {\n\t  handlers.reject(this.promise, value);\n\t};\n\tQueueItem.prototype.otherCallRejected = function (value) {\n\t  unwrap(this.promise, this.onRejected, value);\n\t};\n\n\tfunction unwrap(promise, func, value) {\n\t  immediate(function () {\n\t    var returnValue;\n\t    try {\n\t      returnValue = func(value);\n\t    } catch (e) {\n\t      return handlers.reject(promise, e);\n\t    }\n\t    if (returnValue === promise) {\n\t      handlers.reject(promise, new TypeError('Cannot resolve promise with itself'));\n\t    } else {\n\t      handlers.resolve(promise, returnValue);\n\t    }\n\t  });\n\t}\n\n\thandlers.resolve = function (self, value) {\n\t  var result = tryCatch(getThen, value);\n\t  if (result.status === 'error') {\n\t    return handlers.reject(self, result.value);\n\t  }\n\t  var thenable = result.value;\n\n\t  if (thenable) {\n\t    safelyResolveThenable(self, thenable);\n\t  } else {\n\t    self.state = FULFILLED;\n\t    self.outcome = value;\n\t    var i = -1;\n\t    var len = self.queue.length;\n\t    while (++i < len) {\n\t      self.queue[i].callFulfilled(value);\n\t    }\n\t  }\n\t  return self;\n\t};\n\thandlers.reject = function (self, error) {\n\t  self.state = REJECTED;\n\t  self.outcome = error;\n\t  var i = -1;\n\t  var len = self.queue.length;\n\t  while (++i < len) {\n\t    self.queue[i].callRejected(error);\n\t  }\n\t  return self;\n\t};\n\n\tfunction getThen(obj) {\n\t  // Make sure we only access the accessor once as required by the spec\n\t  var then = obj && obj.then;\n\t  if (obj && (typeof obj === 'object' || typeof obj === 'function') && typeof then === 'function') {\n\t    return function appyThen() {\n\t      then.apply(obj, arguments);\n\t    };\n\t  }\n\t}\n\n\tfunction safelyResolveThenable(self, thenable) {\n\t  // Either fulfill, reject or reject with error\n\t  var called = false;\n\t  function onError(value) {\n\t    if (called) {\n\t      return;\n\t    }\n\t    called = true;\n\t    handlers.reject(self, value);\n\t  }\n\n\t  function onSuccess(value) {\n\t    if (called) {\n\t      return;\n\t    }\n\t    called = true;\n\t    handlers.resolve(self, value);\n\t  }\n\n\t  function tryToUnwrap() {\n\t    thenable(onSuccess, onError);\n\t  }\n\n\t  var result = tryCatch(tryToUnwrap);\n\t  if (result.status === 'error') {\n\t    onError(result.value);\n\t  }\n\t}\n\n\tfunction tryCatch(func, value) {\n\t  var out = {};\n\t  try {\n\t    out.value = func(value);\n\t    out.status = 'success';\n\t  } catch (e) {\n\t    out.status = 'error';\n\t    out.value = e;\n\t  }\n\t  return out;\n\t}\n\n\tPromise.resolve = resolve;\n\tfunction resolve(value) {\n\t  if (value instanceof this) {\n\t    return value;\n\t  }\n\t  return handlers.resolve(new this(INTERNAL), value);\n\t}\n\n\tPromise.reject = reject;\n\tfunction reject(reason) {\n\t  var promise = new this(INTERNAL);\n\t  return handlers.reject(promise, reason);\n\t}\n\n\tPromise.all = all;\n\tfunction all(iterable) {\n\t  var self = this;\n\t  if (Object.prototype.toString.call(iterable) !== '[object Array]') {\n\t    return this.reject(new TypeError('must be an array'));\n\t  }\n\n\t  var len = iterable.length;\n\t  var called = false;\n\t  if (!len) {\n\t    return this.resolve([]);\n\t  }\n\n\t  var values = new Array(len);\n\t  var resolved = 0;\n\t  var i = -1;\n\t  var promise = new this(INTERNAL);\n\n\t  while (++i < len) {\n\t    allResolver(iterable[i], i);\n\t  }\n\t  return promise;\n\t  function allResolver(value, i) {\n\t    self.resolve(value).then(resolveFromAll, function (error) {\n\t      if (!called) {\n\t        called = true;\n\t        handlers.reject(promise, error);\n\t      }\n\t    });\n\t    function resolveFromAll(outValue) {\n\t      values[i] = outValue;\n\t      if (++resolved === len && !called) {\n\t        called = true;\n\t        handlers.resolve(promise, values);\n\t      }\n\t    }\n\t  }\n\t}\n\n\tPromise.race = race;\n\tfunction race(iterable) {\n\t  var self = this;\n\t  if (Object.prototype.toString.call(iterable) !== '[object Array]') {\n\t    return this.reject(new TypeError('must be an array'));\n\t  }\n\n\t  var len = iterable.length;\n\t  var called = false;\n\t  if (!len) {\n\t    return this.resolve([]);\n\t  }\n\n\t  var i = -1;\n\t  var promise = new this(INTERNAL);\n\n\t  while (++i < len) {\n\t    resolver(iterable[i]);\n\t  }\n\t  return promise;\n\t  function resolver(value) {\n\t    self.resolve(value).then(function (response) {\n\t      if (!called) {\n\t        called = true;\n\t        handlers.resolve(promise, response);\n\t      }\n\t    }, function (error) {\n\t      if (!called) {\n\t        called = true;\n\t        handlers.reject(promise, error);\n\t      }\n\t    });\n\t  }\n\t}\n\n\t},{\"1\":1}],3:[function(_dereq_,module,exports){\n\t(function (global){\n\tif (typeof global.Promise !== 'function') {\n\t  global.Promise = _dereq_(2);\n\t}\n\n\t}).call(this,typeof commonjsGlobal !== \"undefined\" ? commonjsGlobal : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {});\n\t},{\"2\":2}],4:[function(_dereq_,module,exports){\n\n\tvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n\tfunction getIDB() {\n\t    /* global indexedDB,webkitIndexedDB,mozIndexedDB,OIndexedDB,msIndexedDB */\n\t    try {\n\t        if (typeof indexedDB !== 'undefined') {\n\t            return indexedDB;\n\t        }\n\t        if (typeof webkitIndexedDB !== 'undefined') {\n\t            return webkitIndexedDB;\n\t        }\n\t        if (typeof mozIndexedDB !== 'undefined') {\n\t            return mozIndexedDB;\n\t        }\n\t        if (typeof OIndexedDB !== 'undefined') {\n\t            return OIndexedDB;\n\t        }\n\t        if (typeof msIndexedDB !== 'undefined') {\n\t            return msIndexedDB;\n\t        }\n\t    } catch (e) {\n\t        return;\n\t    }\n\t}\n\n\tvar idb = getIDB();\n\n\tfunction isIndexedDBValid() {\n\t    try {\n\t        // Initialize IndexedDB; fall back to vendor-prefixed versions\n\t        // if needed.\n\t        if (!idb || !idb.open) {\n\t            return false;\n\t        }\n\t        // We mimic PouchDB here;\n\t        //\n\t        // We test for openDatabase because IE Mobile identifies itself\n\t        // as Safari. Oh the lulz...\n\t        var isSafari = typeof openDatabase !== 'undefined' && /(Safari|iPhone|iPad|iPod)/.test(navigator.userAgent) && !/Chrome/.test(navigator.userAgent) && !/BlackBerry/.test(navigator.platform);\n\n\t        var hasFetch = typeof fetch === 'function' && fetch.toString().indexOf('[native code') !== -1;\n\n\t        // Safari <10.1 does not meet our requirements for IDB support\n\t        // (see: https://github.com/pouchdb/pouchdb/issues/5572).\n\t        // Safari 10.1 shipped with fetch, we can use that to detect it.\n\t        // Note: this creates issues with `window.fetch` polyfills and\n\t        // overrides; see:\n\t        // https://github.com/localForage/localForage/issues/856\n\t        return (!isSafari || hasFetch) && typeof indexedDB !== 'undefined' &&\n\t        // some outdated implementations of IDB that appear on Samsung\n\t        // and HTC Android devices <4.4 are missing IDBKeyRange\n\t        // See: https://github.com/mozilla/localForage/issues/128\n\t        // See: https://github.com/mozilla/localForage/issues/272\n\t        typeof IDBKeyRange !== 'undefined';\n\t    } catch (e) {\n\t        return false;\n\t    }\n\t}\n\n\t// Abstracts constructing a Blob object, so it also works in older\n\t// browsers that don't support the native Blob constructor. (i.e.\n\t// old QtWebKit versions, at least).\n\t// Abstracts constructing a Blob object, so it also works in older\n\t// browsers that don't support the native Blob constructor. (i.e.\n\t// old QtWebKit versions, at least).\n\tfunction createBlob(parts, properties) {\n\t    /* global BlobBuilder,MSBlobBuilder,MozBlobBuilder,WebKitBlobBuilder */\n\t    parts = parts || [];\n\t    properties = properties || {};\n\t    try {\n\t        return new Blob(parts, properties);\n\t    } catch (e) {\n\t        if (e.name !== 'TypeError') {\n\t            throw e;\n\t        }\n\t        var Builder = typeof BlobBuilder !== 'undefined' ? BlobBuilder : typeof MSBlobBuilder !== 'undefined' ? MSBlobBuilder : typeof MozBlobBuilder !== 'undefined' ? MozBlobBuilder : WebKitBlobBuilder;\n\t        var builder = new Builder();\n\t        for (var i = 0; i < parts.length; i += 1) {\n\t            builder.append(parts[i]);\n\t        }\n\t        return builder.getBlob(properties.type);\n\t    }\n\t}\n\n\t// This is CommonJS because lie is an external dependency, so Rollup\n\t// can just ignore it.\n\tif (typeof Promise === 'undefined') {\n\t    // In the \"nopromises\" build this will just throw if you don't have\n\t    // a global promise object, but it would throw anyway later.\n\t    _dereq_(3);\n\t}\n\tvar Promise$1 = Promise;\n\n\tfunction executeCallback(promise, callback) {\n\t    if (callback) {\n\t        promise.then(function (result) {\n\t            callback(null, result);\n\t        }, function (error) {\n\t            callback(error);\n\t        });\n\t    }\n\t}\n\n\tfunction executeTwoCallbacks(promise, callback, errorCallback) {\n\t    if (typeof callback === 'function') {\n\t        promise.then(callback);\n\t    }\n\n\t    if (typeof errorCallback === 'function') {\n\t        promise[\"catch\"](errorCallback);\n\t    }\n\t}\n\n\tfunction normalizeKey(key) {\n\t    // Cast the key to a string, as that's all we can set as a key.\n\t    if (typeof key !== 'string') {\n\t        console.warn(key + ' used as a key, but it is not a string.');\n\t        key = String(key);\n\t    }\n\n\t    return key;\n\t}\n\n\tfunction getCallback() {\n\t    if (arguments.length && typeof arguments[arguments.length - 1] === 'function') {\n\t        return arguments[arguments.length - 1];\n\t    }\n\t}\n\n\t// Some code originally from async_storage.js in\n\t// [Gaia](https://github.com/mozilla-b2g/gaia).\n\n\tvar DETECT_BLOB_SUPPORT_STORE = 'local-forage-detect-blob-support';\n\tvar supportsBlobs = void 0;\n\tvar dbContexts = {};\n\tvar toString = Object.prototype.toString;\n\n\t// Transaction Modes\n\tvar READ_ONLY = 'readonly';\n\tvar READ_WRITE = 'readwrite';\n\n\t// Transform a binary string to an array buffer, because otherwise\n\t// weird stuff happens when you try to work with the binary string directly.\n\t// It is known.\n\t// From http://stackoverflow.com/questions/14967647/ (continues on next line)\n\t// encode-decode-image-with-base64-breaks-image (2013-04-21)\n\tfunction _binStringToArrayBuffer(bin) {\n\t    var length = bin.length;\n\t    var buf = new ArrayBuffer(length);\n\t    var arr = new Uint8Array(buf);\n\t    for (var i = 0; i < length; i++) {\n\t        arr[i] = bin.charCodeAt(i);\n\t    }\n\t    return buf;\n\t}\n\n\t//\n\t// Blobs are not supported in all versions of IndexedDB, notably\n\t// Chrome <37 and Android <5. In those versions, storing a blob will throw.\n\t//\n\t// Various other blob bugs exist in Chrome v37-42 (inclusive).\n\t// Detecting them is expensive and confusing to users, and Chrome 37-42\n\t// is at very low usage worldwide, so we do a hacky userAgent check instead.\n\t//\n\t// content-type bug: https://code.google.com/p/chromium/issues/detail?id=408120\n\t// 404 bug: https://code.google.com/p/chromium/issues/detail?id=447916\n\t// FileReader bug: https://code.google.com/p/chromium/issues/detail?id=447836\n\t//\n\t// Code borrowed from PouchDB. See:\n\t// https://github.com/pouchdb/pouchdb/blob/master/packages/node_modules/pouchdb-adapter-idb/src/blobSupport.js\n\t//\n\tfunction _checkBlobSupportWithoutCaching(idb) {\n\t    return new Promise$1(function (resolve) {\n\t        var txn = idb.transaction(DETECT_BLOB_SUPPORT_STORE, READ_WRITE);\n\t        var blob = createBlob(['']);\n\t        txn.objectStore(DETECT_BLOB_SUPPORT_STORE).put(blob, 'key');\n\n\t        txn.onabort = function (e) {\n\t            // If the transaction aborts now its due to not being able to\n\t            // write to the database, likely due to the disk being full\n\t            e.preventDefault();\n\t            e.stopPropagation();\n\t            resolve(false);\n\t        };\n\n\t        txn.oncomplete = function () {\n\t            var matchedChrome = navigator.userAgent.match(/Chrome\\/(\\d+)/);\n\t            var matchedEdge = navigator.userAgent.match(/Edge\\//);\n\t            // MS Edge pretends to be Chrome 42:\n\t            // https://msdn.microsoft.com/en-us/library/hh869301%28v=vs.85%29.aspx\n\t            resolve(matchedEdge || !matchedChrome || parseInt(matchedChrome[1], 10) >= 43);\n\t        };\n\t    })[\"catch\"](function () {\n\t        return false; // error, so assume unsupported\n\t    });\n\t}\n\n\tfunction _checkBlobSupport(idb) {\n\t    if (typeof supportsBlobs === 'boolean') {\n\t        return Promise$1.resolve(supportsBlobs);\n\t    }\n\t    return _checkBlobSupportWithoutCaching(idb).then(function (value) {\n\t        supportsBlobs = value;\n\t        return supportsBlobs;\n\t    });\n\t}\n\n\tfunction _deferReadiness(dbInfo) {\n\t    var dbContext = dbContexts[dbInfo.name];\n\n\t    // Create a deferred object representing the current database operation.\n\t    var deferredOperation = {};\n\n\t    deferredOperation.promise = new Promise$1(function (resolve, reject) {\n\t        deferredOperation.resolve = resolve;\n\t        deferredOperation.reject = reject;\n\t    });\n\n\t    // Enqueue the deferred operation.\n\t    dbContext.deferredOperations.push(deferredOperation);\n\n\t    // Chain its promise to the database readiness.\n\t    if (!dbContext.dbReady) {\n\t        dbContext.dbReady = deferredOperation.promise;\n\t    } else {\n\t        dbContext.dbReady = dbContext.dbReady.then(function () {\n\t            return deferredOperation.promise;\n\t        });\n\t    }\n\t}\n\n\tfunction _advanceReadiness(dbInfo) {\n\t    var dbContext = dbContexts[dbInfo.name];\n\n\t    // Dequeue a deferred operation.\n\t    var deferredOperation = dbContext.deferredOperations.pop();\n\n\t    // Resolve its promise (which is part of the database readiness\n\t    // chain of promises).\n\t    if (deferredOperation) {\n\t        deferredOperation.resolve();\n\t        return deferredOperation.promise;\n\t    }\n\t}\n\n\tfunction _rejectReadiness(dbInfo, err) {\n\t    var dbContext = dbContexts[dbInfo.name];\n\n\t    // Dequeue a deferred operation.\n\t    var deferredOperation = dbContext.deferredOperations.pop();\n\n\t    // Reject its promise (which is part of the database readiness\n\t    // chain of promises).\n\t    if (deferredOperation) {\n\t        deferredOperation.reject(err);\n\t        return deferredOperation.promise;\n\t    }\n\t}\n\n\tfunction _getConnection(dbInfo, upgradeNeeded) {\n\t    return new Promise$1(function (resolve, reject) {\n\t        dbContexts[dbInfo.name] = dbContexts[dbInfo.name] || createDbContext();\n\n\t        if (dbInfo.db) {\n\t            if (upgradeNeeded) {\n\t                _deferReadiness(dbInfo);\n\t                dbInfo.db.close();\n\t            } else {\n\t                return resolve(dbInfo.db);\n\t            }\n\t        }\n\n\t        var dbArgs = [dbInfo.name];\n\n\t        if (upgradeNeeded) {\n\t            dbArgs.push(dbInfo.version);\n\t        }\n\n\t        var openreq = idb.open.apply(idb, dbArgs);\n\n\t        if (upgradeNeeded) {\n\t            openreq.onupgradeneeded = function (e) {\n\t                var db = openreq.result;\n\t                try {\n\t                    db.createObjectStore(dbInfo.storeName);\n\t                    if (e.oldVersion <= 1) {\n\t                        // Added when support for blob shims was added\n\t                        db.createObjectStore(DETECT_BLOB_SUPPORT_STORE);\n\t                    }\n\t                } catch (ex) {\n\t                    if (ex.name === 'ConstraintError') {\n\t                        console.warn('The database \"' + dbInfo.name + '\"' + ' has been upgraded from version ' + e.oldVersion + ' to version ' + e.newVersion + ', but the storage \"' + dbInfo.storeName + '\" already exists.');\n\t                    } else {\n\t                        throw ex;\n\t                    }\n\t                }\n\t            };\n\t        }\n\n\t        openreq.onerror = function (e) {\n\t            e.preventDefault();\n\t            reject(openreq.error);\n\t        };\n\n\t        openreq.onsuccess = function () {\n\t            var db = openreq.result;\n\t            db.onversionchange = function (e) {\n\t                // Triggered when the database is modified (e.g. adding an objectStore) or\n\t                // deleted (even when initiated by other sessions in different tabs).\n\t                // Closing the connection here prevents those operations from being blocked.\n\t                // If the database is accessed again later by this instance, the connection\n\t                // will be reopened or the database recreated as needed.\n\t                e.target.close();\n\t            };\n\t            resolve(db);\n\t            _advanceReadiness(dbInfo);\n\t        };\n\t    });\n\t}\n\n\tfunction _getOriginalConnection(dbInfo) {\n\t    return _getConnection(dbInfo, false);\n\t}\n\n\tfunction _getUpgradedConnection(dbInfo) {\n\t    return _getConnection(dbInfo, true);\n\t}\n\n\tfunction _isUpgradeNeeded(dbInfo, defaultVersion) {\n\t    if (!dbInfo.db) {\n\t        return true;\n\t    }\n\n\t    var isNewStore = !dbInfo.db.objectStoreNames.contains(dbInfo.storeName);\n\t    var isDowngrade = dbInfo.version < dbInfo.db.version;\n\t    var isUpgrade = dbInfo.version > dbInfo.db.version;\n\n\t    if (isDowngrade) {\n\t        // If the version is not the default one\n\t        // then warn for impossible downgrade.\n\t        if (dbInfo.version !== defaultVersion) {\n\t            console.warn('The database \"' + dbInfo.name + '\"' + \" can't be downgraded from version \" + dbInfo.db.version + ' to version ' + dbInfo.version + '.');\n\t        }\n\t        // Align the versions to prevent errors.\n\t        dbInfo.version = dbInfo.db.version;\n\t    }\n\n\t    if (isUpgrade || isNewStore) {\n\t        // If the store is new then increment the version (if needed).\n\t        // This will trigger an \"upgradeneeded\" event which is required\n\t        // for creating a store.\n\t        if (isNewStore) {\n\t            var incVersion = dbInfo.db.version + 1;\n\t            if (incVersion > dbInfo.version) {\n\t                dbInfo.version = incVersion;\n\t            }\n\t        }\n\n\t        return true;\n\t    }\n\n\t    return false;\n\t}\n\n\t// encode a blob for indexeddb engines that don't support blobs\n\tfunction _encodeBlob(blob) {\n\t    return new Promise$1(function (resolve, reject) {\n\t        var reader = new FileReader();\n\t        reader.onerror = reject;\n\t        reader.onloadend = function (e) {\n\t            var base64 = btoa(e.target.result || '');\n\t            resolve({\n\t                __local_forage_encoded_blob: true,\n\t                data: base64,\n\t                type: blob.type\n\t            });\n\t        };\n\t        reader.readAsBinaryString(blob);\n\t    });\n\t}\n\n\t// decode an encoded blob\n\tfunction _decodeBlob(encodedBlob) {\n\t    var arrayBuff = _binStringToArrayBuffer(atob(encodedBlob.data));\n\t    return createBlob([arrayBuff], { type: encodedBlob.type });\n\t}\n\n\t// is this one of our fancy encoded blobs?\n\tfunction _isEncodedBlob(value) {\n\t    return value && value.__local_forage_encoded_blob;\n\t}\n\n\t// Specialize the default `ready()` function by making it dependent\n\t// on the current database operations. Thus, the driver will be actually\n\t// ready when it's been initialized (default) *and* there are no pending\n\t// operations on the database (initiated by some other instances).\n\tfunction _fullyReady(callback) {\n\t    var self = this;\n\n\t    var promise = self._initReady().then(function () {\n\t        var dbContext = dbContexts[self._dbInfo.name];\n\n\t        if (dbContext && dbContext.dbReady) {\n\t            return dbContext.dbReady;\n\t        }\n\t    });\n\n\t    executeTwoCallbacks(promise, callback, callback);\n\t    return promise;\n\t}\n\n\t// Try to establish a new db connection to replace the\n\t// current one which is broken (i.e. experiencing\n\t// InvalidStateError while creating a transaction).\n\tfunction _tryReconnect(dbInfo) {\n\t    _deferReadiness(dbInfo);\n\n\t    var dbContext = dbContexts[dbInfo.name];\n\t    var forages = dbContext.forages;\n\n\t    for (var i = 0; i < forages.length; i++) {\n\t        var forage = forages[i];\n\t        if (forage._dbInfo.db) {\n\t            forage._dbInfo.db.close();\n\t            forage._dbInfo.db = null;\n\t        }\n\t    }\n\t    dbInfo.db = null;\n\n\t    return _getOriginalConnection(dbInfo).then(function (db) {\n\t        dbInfo.db = db;\n\t        if (_isUpgradeNeeded(dbInfo)) {\n\t            // Reopen the database for upgrading.\n\t            return _getUpgradedConnection(dbInfo);\n\t        }\n\t        return db;\n\t    }).then(function (db) {\n\t        // store the latest db reference\n\t        // in case the db was upgraded\n\t        dbInfo.db = dbContext.db = db;\n\t        for (var i = 0; i < forages.length; i++) {\n\t            forages[i]._dbInfo.db = db;\n\t        }\n\t    })[\"catch\"](function (err) {\n\t        _rejectReadiness(dbInfo, err);\n\t        throw err;\n\t    });\n\t}\n\n\t// FF doesn't like Promises (micro-tasks) and IDDB store operations,\n\t// so we have to do it with callbacks\n\tfunction createTransaction(dbInfo, mode, callback, retries) {\n\t    if (retries === undefined) {\n\t        retries = 1;\n\t    }\n\n\t    try {\n\t        var tx = dbInfo.db.transaction(dbInfo.storeName, mode);\n\t        callback(null, tx);\n\t    } catch (err) {\n\t        if (retries > 0 && (!dbInfo.db || err.name === 'InvalidStateError' || err.name === 'NotFoundError')) {\n\t            return Promise$1.resolve().then(function () {\n\t                if (!dbInfo.db || err.name === 'NotFoundError' && !dbInfo.db.objectStoreNames.contains(dbInfo.storeName) && dbInfo.version <= dbInfo.db.version) {\n\t                    // increase the db version, to create the new ObjectStore\n\t                    if (dbInfo.db) {\n\t                        dbInfo.version = dbInfo.db.version + 1;\n\t                    }\n\t                    // Reopen the database for upgrading.\n\t                    return _getUpgradedConnection(dbInfo);\n\t                }\n\t            }).then(function () {\n\t                return _tryReconnect(dbInfo).then(function () {\n\t                    createTransaction(dbInfo, mode, callback, retries - 1);\n\t                });\n\t            })[\"catch\"](callback);\n\t        }\n\n\t        callback(err);\n\t    }\n\t}\n\n\tfunction createDbContext() {\n\t    return {\n\t        // Running localForages sharing a database.\n\t        forages: [],\n\t        // Shared database.\n\t        db: null,\n\t        // Database readiness (promise).\n\t        dbReady: null,\n\t        // Deferred operations on the database.\n\t        deferredOperations: []\n\t    };\n\t}\n\n\t// Open the IndexedDB database (automatically creates one if one didn't\n\t// previously exist), using any options set in the config.\n\tfunction _initStorage(options) {\n\t    var self = this;\n\t    var dbInfo = {\n\t        db: null\n\t    };\n\n\t    if (options) {\n\t        for (var i in options) {\n\t            dbInfo[i] = options[i];\n\t        }\n\t    }\n\n\t    // Get the current context of the database;\n\t    var dbContext = dbContexts[dbInfo.name];\n\n\t    // ...or create a new context.\n\t    if (!dbContext) {\n\t        dbContext = createDbContext();\n\t        // Register the new context in the global container.\n\t        dbContexts[dbInfo.name] = dbContext;\n\t    }\n\n\t    // Register itself as a running localForage in the current context.\n\t    dbContext.forages.push(self);\n\n\t    // Replace the default `ready()` function with the specialized one.\n\t    if (!self._initReady) {\n\t        self._initReady = self.ready;\n\t        self.ready = _fullyReady;\n\t    }\n\n\t    // Create an array of initialization states of the related localForages.\n\t    var initPromises = [];\n\n\t    function ignoreErrors() {\n\t        // Don't handle errors here,\n\t        // just makes sure related localForages aren't pending.\n\t        return Promise$1.resolve();\n\t    }\n\n\t    for (var j = 0; j < dbContext.forages.length; j++) {\n\t        var forage = dbContext.forages[j];\n\t        if (forage !== self) {\n\t            // Don't wait for itself...\n\t            initPromises.push(forage._initReady()[\"catch\"](ignoreErrors));\n\t        }\n\t    }\n\n\t    // Take a snapshot of the related localForages.\n\t    var forages = dbContext.forages.slice(0);\n\n\t    // Initialize the connection process only when\n\t    // all the related localForages aren't pending.\n\t    return Promise$1.all(initPromises).then(function () {\n\t        dbInfo.db = dbContext.db;\n\t        // Get the connection or open a new one without upgrade.\n\t        return _getOriginalConnection(dbInfo);\n\t    }).then(function (db) {\n\t        dbInfo.db = db;\n\t        if (_isUpgradeNeeded(dbInfo, self._defaultConfig.version)) {\n\t            // Reopen the database for upgrading.\n\t            return _getUpgradedConnection(dbInfo);\n\t        }\n\t        return db;\n\t    }).then(function (db) {\n\t        dbInfo.db = dbContext.db = db;\n\t        self._dbInfo = dbInfo;\n\t        // Share the final connection amongst related localForages.\n\t        for (var k = 0; k < forages.length; k++) {\n\t            var forage = forages[k];\n\t            if (forage !== self) {\n\t                // Self is already up-to-date.\n\t                forage._dbInfo.db = dbInfo.db;\n\t                forage._dbInfo.version = dbInfo.version;\n\t            }\n\t        }\n\t    });\n\t}\n\n\tfunction getItem(key, callback) {\n\t    var self = this;\n\n\t    key = normalizeKey(key);\n\n\t    var promise = new Promise$1(function (resolve, reject) {\n\t        self.ready().then(function () {\n\t            createTransaction(self._dbInfo, READ_ONLY, function (err, transaction) {\n\t                if (err) {\n\t                    return reject(err);\n\t                }\n\n\t                try {\n\t                    var store = transaction.objectStore(self._dbInfo.storeName);\n\t                    var req = store.get(key);\n\n\t                    req.onsuccess = function () {\n\t                        var value = req.result;\n\t                        if (value === undefined) {\n\t                            value = null;\n\t                        }\n\t                        if (_isEncodedBlob(value)) {\n\t                            value = _decodeBlob(value);\n\t                        }\n\t                        resolve(value);\n\t                    };\n\n\t                    req.onerror = function () {\n\t                        reject(req.error);\n\t                    };\n\t                } catch (e) {\n\t                    reject(e);\n\t                }\n\t            });\n\t        })[\"catch\"](reject);\n\t    });\n\n\t    executeCallback(promise, callback);\n\t    return promise;\n\t}\n\n\t// Iterate over all items stored in database.\n\tfunction iterate(iterator, callback) {\n\t    var self = this;\n\n\t    var promise = new Promise$1(function (resolve, reject) {\n\t        self.ready().then(function () {\n\t            createTransaction(self._dbInfo, READ_ONLY, function (err, transaction) {\n\t                if (err) {\n\t                    return reject(err);\n\t                }\n\n\t                try {\n\t                    var store = transaction.objectStore(self._dbInfo.storeName);\n\t                    var req = store.openCursor();\n\t                    var iterationNumber = 1;\n\n\t                    req.onsuccess = function () {\n\t                        var cursor = req.result;\n\n\t                        if (cursor) {\n\t                            var value = cursor.value;\n\t                            if (_isEncodedBlob(value)) {\n\t                                value = _decodeBlob(value);\n\t                            }\n\t                            var result = iterator(value, cursor.key, iterationNumber++);\n\n\t                            // when the iterator callback returns any\n\t                            // (non-`undefined`) value, then we stop\n\t                            // the iteration immediately\n\t                            if (result !== void 0) {\n\t                                resolve(result);\n\t                            } else {\n\t                                cursor[\"continue\"]();\n\t                            }\n\t                        } else {\n\t                            resolve();\n\t                        }\n\t                    };\n\n\t                    req.onerror = function () {\n\t                        reject(req.error);\n\t                    };\n\t                } catch (e) {\n\t                    reject(e);\n\t                }\n\t            });\n\t        })[\"catch\"](reject);\n\t    });\n\n\t    executeCallback(promise, callback);\n\n\t    return promise;\n\t}\n\n\tfunction setItem(key, value, callback) {\n\t    var self = this;\n\n\t    key = normalizeKey(key);\n\n\t    var promise = new Promise$1(function (resolve, reject) {\n\t        var dbInfo;\n\t        self.ready().then(function () {\n\t            dbInfo = self._dbInfo;\n\t            if (toString.call(value) === '[object Blob]') {\n\t                return _checkBlobSupport(dbInfo.db).then(function (blobSupport) {\n\t                    if (blobSupport) {\n\t                        return value;\n\t                    }\n\t                    return _encodeBlob(value);\n\t                });\n\t            }\n\t            return value;\n\t        }).then(function (value) {\n\t            createTransaction(self._dbInfo, READ_WRITE, function (err, transaction) {\n\t                if (err) {\n\t                    return reject(err);\n\t                }\n\n\t                try {\n\t                    var store = transaction.objectStore(self._dbInfo.storeName);\n\n\t                    // The reason we don't _save_ null is because IE 10 does\n\t                    // not support saving the `null` type in IndexedDB. How\n\t                    // ironic, given the bug below!\n\t                    // See: https://github.com/mozilla/localForage/issues/161\n\t                    if (value === null) {\n\t                        value = undefined;\n\t                    }\n\n\t                    var req = store.put(value, key);\n\n\t                    transaction.oncomplete = function () {\n\t                        // Cast to undefined so the value passed to\n\t                        // callback/promise is the same as what one would get out\n\t                        // of `getItem()` later. This leads to some weirdness\n\t                        // (setItem('foo', undefined) will return `null`), but\n\t                        // it's not my fault localStorage is our baseline and that\n\t                        // it's weird.\n\t                        if (value === undefined) {\n\t                            value = null;\n\t                        }\n\n\t                        resolve(value);\n\t                    };\n\t                    transaction.onabort = transaction.onerror = function () {\n\t                        var err = req.error ? req.error : req.transaction.error;\n\t                        reject(err);\n\t                    };\n\t                } catch (e) {\n\t                    reject(e);\n\t                }\n\t            });\n\t        })[\"catch\"](reject);\n\t    });\n\n\t    executeCallback(promise, callback);\n\t    return promise;\n\t}\n\n\tfunction removeItem(key, callback) {\n\t    var self = this;\n\n\t    key = normalizeKey(key);\n\n\t    var promise = new Promise$1(function (resolve, reject) {\n\t        self.ready().then(function () {\n\t            createTransaction(self._dbInfo, READ_WRITE, function (err, transaction) {\n\t                if (err) {\n\t                    return reject(err);\n\t                }\n\n\t                try {\n\t                    var store = transaction.objectStore(self._dbInfo.storeName);\n\t                    // We use a Grunt task to make this safe for IE and some\n\t                    // versions of Android (including those used by Cordova).\n\t                    // Normally IE won't like `.delete()` and will insist on\n\t                    // using `['delete']()`, but we have a build step that\n\t                    // fixes this for us now.\n\t                    var req = store[\"delete\"](key);\n\t                    transaction.oncomplete = function () {\n\t                        resolve();\n\t                    };\n\n\t                    transaction.onerror = function () {\n\t                        reject(req.error);\n\t                    };\n\n\t                    // The request will be also be aborted if we've exceeded our storage\n\t                    // space.\n\t                    transaction.onabort = function () {\n\t                        var err = req.error ? req.error : req.transaction.error;\n\t                        reject(err);\n\t                    };\n\t                } catch (e) {\n\t                    reject(e);\n\t                }\n\t            });\n\t        })[\"catch\"](reject);\n\t    });\n\n\t    executeCallback(promise, callback);\n\t    return promise;\n\t}\n\n\tfunction clear(callback) {\n\t    var self = this;\n\n\t    var promise = new Promise$1(function (resolve, reject) {\n\t        self.ready().then(function () {\n\t            createTransaction(self._dbInfo, READ_WRITE, function (err, transaction) {\n\t                if (err) {\n\t                    return reject(err);\n\t                }\n\n\t                try {\n\t                    var store = transaction.objectStore(self._dbInfo.storeName);\n\t                    var req = store.clear();\n\n\t                    transaction.oncomplete = function () {\n\t                        resolve();\n\t                    };\n\n\t                    transaction.onabort = transaction.onerror = function () {\n\t                        var err = req.error ? req.error : req.transaction.error;\n\t                        reject(err);\n\t                    };\n\t                } catch (e) {\n\t                    reject(e);\n\t                }\n\t            });\n\t        })[\"catch\"](reject);\n\t    });\n\n\t    executeCallback(promise, callback);\n\t    return promise;\n\t}\n\n\tfunction length(callback) {\n\t    var self = this;\n\n\t    var promise = new Promise$1(function (resolve, reject) {\n\t        self.ready().then(function () {\n\t            createTransaction(self._dbInfo, READ_ONLY, function (err, transaction) {\n\t                if (err) {\n\t                    return reject(err);\n\t                }\n\n\t                try {\n\t                    var store = transaction.objectStore(self._dbInfo.storeName);\n\t                    var req = store.count();\n\n\t                    req.onsuccess = function () {\n\t                        resolve(req.result);\n\t                    };\n\n\t                    req.onerror = function () {\n\t                        reject(req.error);\n\t                    };\n\t                } catch (e) {\n\t                    reject(e);\n\t                }\n\t            });\n\t        })[\"catch\"](reject);\n\t    });\n\n\t    executeCallback(promise, callback);\n\t    return promise;\n\t}\n\n\tfunction key(n, callback) {\n\t    var self = this;\n\n\t    var promise = new Promise$1(function (resolve, reject) {\n\t        if (n < 0) {\n\t            resolve(null);\n\n\t            return;\n\t        }\n\n\t        self.ready().then(function () {\n\t            createTransaction(self._dbInfo, READ_ONLY, function (err, transaction) {\n\t                if (err) {\n\t                    return reject(err);\n\t                }\n\n\t                try {\n\t                    var store = transaction.objectStore(self._dbInfo.storeName);\n\t                    var advanced = false;\n\t                    var req = store.openKeyCursor();\n\n\t                    req.onsuccess = function () {\n\t                        var cursor = req.result;\n\t                        if (!cursor) {\n\t                            // this means there weren't enough keys\n\t                            resolve(null);\n\n\t                            return;\n\t                        }\n\n\t                        if (n === 0) {\n\t                            // We have the first key, return it if that's what they\n\t                            // wanted.\n\t                            resolve(cursor.key);\n\t                        } else {\n\t                            if (!advanced) {\n\t                                // Otherwise, ask the cursor to skip ahead n\n\t                                // records.\n\t                                advanced = true;\n\t                                cursor.advance(n);\n\t                            } else {\n\t                                // When we get here, we've got the nth key.\n\t                                resolve(cursor.key);\n\t                            }\n\t                        }\n\t                    };\n\n\t                    req.onerror = function () {\n\t                        reject(req.error);\n\t                    };\n\t                } catch (e) {\n\t                    reject(e);\n\t                }\n\t            });\n\t        })[\"catch\"](reject);\n\t    });\n\n\t    executeCallback(promise, callback);\n\t    return promise;\n\t}\n\n\tfunction keys(callback) {\n\t    var self = this;\n\n\t    var promise = new Promise$1(function (resolve, reject) {\n\t        self.ready().then(function () {\n\t            createTransaction(self._dbInfo, READ_ONLY, function (err, transaction) {\n\t                if (err) {\n\t                    return reject(err);\n\t                }\n\n\t                try {\n\t                    var store = transaction.objectStore(self._dbInfo.storeName);\n\t                    var req = store.openKeyCursor();\n\t                    var keys = [];\n\n\t                    req.onsuccess = function () {\n\t                        var cursor = req.result;\n\n\t                        if (!cursor) {\n\t                            resolve(keys);\n\t                            return;\n\t                        }\n\n\t                        keys.push(cursor.key);\n\t                        cursor[\"continue\"]();\n\t                    };\n\n\t                    req.onerror = function () {\n\t                        reject(req.error);\n\t                    };\n\t                } catch (e) {\n\t                    reject(e);\n\t                }\n\t            });\n\t        })[\"catch\"](reject);\n\t    });\n\n\t    executeCallback(promise, callback);\n\t    return promise;\n\t}\n\n\tfunction dropInstance(options, callback) {\n\t    callback = getCallback.apply(this, arguments);\n\n\t    var currentConfig = this.config();\n\t    options = typeof options !== 'function' && options || {};\n\t    if (!options.name) {\n\t        options.name = options.name || currentConfig.name;\n\t        options.storeName = options.storeName || currentConfig.storeName;\n\t    }\n\n\t    var self = this;\n\t    var promise;\n\t    if (!options.name) {\n\t        promise = Promise$1.reject('Invalid arguments');\n\t    } else {\n\t        var isCurrentDb = options.name === currentConfig.name && self._dbInfo.db;\n\n\t        var dbPromise = isCurrentDb ? Promise$1.resolve(self._dbInfo.db) : _getOriginalConnection(options).then(function (db) {\n\t            var dbContext = dbContexts[options.name];\n\t            var forages = dbContext.forages;\n\t            dbContext.db = db;\n\t            for (var i = 0; i < forages.length; i++) {\n\t                forages[i]._dbInfo.db = db;\n\t            }\n\t            return db;\n\t        });\n\n\t        if (!options.storeName) {\n\t            promise = dbPromise.then(function (db) {\n\t                _deferReadiness(options);\n\n\t                var dbContext = dbContexts[options.name];\n\t                var forages = dbContext.forages;\n\n\t                db.close();\n\t                for (var i = 0; i < forages.length; i++) {\n\t                    var forage = forages[i];\n\t                    forage._dbInfo.db = null;\n\t                }\n\n\t                var dropDBPromise = new Promise$1(function (resolve, reject) {\n\t                    var req = idb.deleteDatabase(options.name);\n\n\t                    req.onerror = function () {\n\t                        var db = req.result;\n\t                        if (db) {\n\t                            db.close();\n\t                        }\n\t                        reject(req.error);\n\t                    };\n\n\t                    req.onblocked = function () {\n\t                        // Closing all open connections in onversionchange handler should prevent this situation, but if\n\t                        // we do get here, it just means the request remains pending - eventually it will succeed or error\n\t                        console.warn('dropInstance blocked for database \"' + options.name + '\" until all open connections are closed');\n\t                    };\n\n\t                    req.onsuccess = function () {\n\t                        var db = req.result;\n\t                        if (db) {\n\t                            db.close();\n\t                        }\n\t                        resolve(db);\n\t                    };\n\t                });\n\n\t                return dropDBPromise.then(function (db) {\n\t                    dbContext.db = db;\n\t                    for (var i = 0; i < forages.length; i++) {\n\t                        var _forage = forages[i];\n\t                        _advanceReadiness(_forage._dbInfo);\n\t                    }\n\t                })[\"catch\"](function (err) {\n\t                    (_rejectReadiness(options, err) || Promise$1.resolve())[\"catch\"](function () {});\n\t                    throw err;\n\t                });\n\t            });\n\t        } else {\n\t            promise = dbPromise.then(function (db) {\n\t                if (!db.objectStoreNames.contains(options.storeName)) {\n\t                    return;\n\t                }\n\n\t                var newVersion = db.version + 1;\n\n\t                _deferReadiness(options);\n\n\t                var dbContext = dbContexts[options.name];\n\t                var forages = dbContext.forages;\n\n\t                db.close();\n\t                for (var i = 0; i < forages.length; i++) {\n\t                    var forage = forages[i];\n\t                    forage._dbInfo.db = null;\n\t                    forage._dbInfo.version = newVersion;\n\t                }\n\n\t                var dropObjectPromise = new Promise$1(function (resolve, reject) {\n\t                    var req = idb.open(options.name, newVersion);\n\n\t                    req.onerror = function (err) {\n\t                        var db = req.result;\n\t                        db.close();\n\t                        reject(err);\n\t                    };\n\n\t                    req.onupgradeneeded = function () {\n\t                        var db = req.result;\n\t                        db.deleteObjectStore(options.storeName);\n\t                    };\n\n\t                    req.onsuccess = function () {\n\t                        var db = req.result;\n\t                        db.close();\n\t                        resolve(db);\n\t                    };\n\t                });\n\n\t                return dropObjectPromise.then(function (db) {\n\t                    dbContext.db = db;\n\t                    for (var j = 0; j < forages.length; j++) {\n\t                        var _forage2 = forages[j];\n\t                        _forage2._dbInfo.db = db;\n\t                        _advanceReadiness(_forage2._dbInfo);\n\t                    }\n\t                })[\"catch\"](function (err) {\n\t                    (_rejectReadiness(options, err) || Promise$1.resolve())[\"catch\"](function () {});\n\t                    throw err;\n\t                });\n\t            });\n\t        }\n\t    }\n\n\t    executeCallback(promise, callback);\n\t    return promise;\n\t}\n\n\tvar asyncStorage = {\n\t    _driver: 'asyncStorage',\n\t    _initStorage: _initStorage,\n\t    _support: isIndexedDBValid(),\n\t    iterate: iterate,\n\t    getItem: getItem,\n\t    setItem: setItem,\n\t    removeItem: removeItem,\n\t    clear: clear,\n\t    length: length,\n\t    key: key,\n\t    keys: keys,\n\t    dropInstance: dropInstance\n\t};\n\n\tfunction isWebSQLValid() {\n\t    return typeof openDatabase === 'function';\n\t}\n\n\t// Sadly, the best way to save binary data in WebSQL/localStorage is serializing\n\t// it to Base64, so this is how we store it to prevent very strange errors with less\n\t// verbose ways of binary <-> string data storage.\n\tvar BASE_CHARS = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\n\n\tvar BLOB_TYPE_PREFIX = '~~local_forage_type~';\n\tvar BLOB_TYPE_PREFIX_REGEX = /^~~local_forage_type~([^~]+)~/;\n\n\tvar SERIALIZED_MARKER = '__lfsc__:';\n\tvar SERIALIZED_MARKER_LENGTH = SERIALIZED_MARKER.length;\n\n\t// OMG the serializations!\n\tvar TYPE_ARRAYBUFFER = 'arbf';\n\tvar TYPE_BLOB = 'blob';\n\tvar TYPE_INT8ARRAY = 'si08';\n\tvar TYPE_UINT8ARRAY = 'ui08';\n\tvar TYPE_UINT8CLAMPEDARRAY = 'uic8';\n\tvar TYPE_INT16ARRAY = 'si16';\n\tvar TYPE_INT32ARRAY = 'si32';\n\tvar TYPE_UINT16ARRAY = 'ur16';\n\tvar TYPE_UINT32ARRAY = 'ui32';\n\tvar TYPE_FLOAT32ARRAY = 'fl32';\n\tvar TYPE_FLOAT64ARRAY = 'fl64';\n\tvar TYPE_SERIALIZED_MARKER_LENGTH = SERIALIZED_MARKER_LENGTH + TYPE_ARRAYBUFFER.length;\n\n\tvar toString$1 = Object.prototype.toString;\n\n\tfunction stringToBuffer(serializedString) {\n\t    // Fill the string into a ArrayBuffer.\n\t    var bufferLength = serializedString.length * 0.75;\n\t    var len = serializedString.length;\n\t    var i;\n\t    var p = 0;\n\t    var encoded1, encoded2, encoded3, encoded4;\n\n\t    if (serializedString[serializedString.length - 1] === '=') {\n\t        bufferLength--;\n\t        if (serializedString[serializedString.length - 2] === '=') {\n\t            bufferLength--;\n\t        }\n\t    }\n\n\t    var buffer = new ArrayBuffer(bufferLength);\n\t    var bytes = new Uint8Array(buffer);\n\n\t    for (i = 0; i < len; i += 4) {\n\t        encoded1 = BASE_CHARS.indexOf(serializedString[i]);\n\t        encoded2 = BASE_CHARS.indexOf(serializedString[i + 1]);\n\t        encoded3 = BASE_CHARS.indexOf(serializedString[i + 2]);\n\t        encoded4 = BASE_CHARS.indexOf(serializedString[i + 3]);\n\n\t        /*jslint bitwise: true */\n\t        bytes[p++] = encoded1 << 2 | encoded2 >> 4;\n\t        bytes[p++] = (encoded2 & 15) << 4 | encoded3 >> 2;\n\t        bytes[p++] = (encoded3 & 3) << 6 | encoded4 & 63;\n\t    }\n\t    return buffer;\n\t}\n\n\t// Converts a buffer to a string to store, serialized, in the backend\n\t// storage library.\n\tfunction bufferToString(buffer) {\n\t    // base64-arraybuffer\n\t    var bytes = new Uint8Array(buffer);\n\t    var base64String = '';\n\t    var i;\n\n\t    for (i = 0; i < bytes.length; i += 3) {\n\t        /*jslint bitwise: true */\n\t        base64String += BASE_CHARS[bytes[i] >> 2];\n\t        base64String += BASE_CHARS[(bytes[i] & 3) << 4 | bytes[i + 1] >> 4];\n\t        base64String += BASE_CHARS[(bytes[i + 1] & 15) << 2 | bytes[i + 2] >> 6];\n\t        base64String += BASE_CHARS[bytes[i + 2] & 63];\n\t    }\n\n\t    if (bytes.length % 3 === 2) {\n\t        base64String = base64String.substring(0, base64String.length - 1) + '=';\n\t    } else if (bytes.length % 3 === 1) {\n\t        base64String = base64String.substring(0, base64String.length - 2) + '==';\n\t    }\n\n\t    return base64String;\n\t}\n\n\t// Serialize a value, afterwards executing a callback (which usually\n\t// instructs the `setItem()` callback/promise to be executed). This is how\n\t// we store binary data with localStorage.\n\tfunction serialize(value, callback) {\n\t    var valueType = '';\n\t    if (value) {\n\t        valueType = toString$1.call(value);\n\t    }\n\n\t    // Cannot use `value instanceof ArrayBuffer` or such here, as these\n\t    // checks fail when running the tests using casper.js...\n\t    //\n\t    // TODO: See why those tests fail and use a better solution.\n\t    if (value && (valueType === '[object ArrayBuffer]' || value.buffer && toString$1.call(value.buffer) === '[object ArrayBuffer]')) {\n\t        // Convert binary arrays to a string and prefix the string with\n\t        // a special marker.\n\t        var buffer;\n\t        var marker = SERIALIZED_MARKER;\n\n\t        if (value instanceof ArrayBuffer) {\n\t            buffer = value;\n\t            marker += TYPE_ARRAYBUFFER;\n\t        } else {\n\t            buffer = value.buffer;\n\n\t            if (valueType === '[object Int8Array]') {\n\t                marker += TYPE_INT8ARRAY;\n\t            } else if (valueType === '[object Uint8Array]') {\n\t                marker += TYPE_UINT8ARRAY;\n\t            } else if (valueType === '[object Uint8ClampedArray]') {\n\t                marker += TYPE_UINT8CLAMPEDARRAY;\n\t            } else if (valueType === '[object Int16Array]') {\n\t                marker += TYPE_INT16ARRAY;\n\t            } else if (valueType === '[object Uint16Array]') {\n\t                marker += TYPE_UINT16ARRAY;\n\t            } else if (valueType === '[object Int32Array]') {\n\t                marker += TYPE_INT32ARRAY;\n\t            } else if (valueType === '[object Uint32Array]') {\n\t                marker += TYPE_UINT32ARRAY;\n\t            } else if (valueType === '[object Float32Array]') {\n\t                marker += TYPE_FLOAT32ARRAY;\n\t            } else if (valueType === '[object Float64Array]') {\n\t                marker += TYPE_FLOAT64ARRAY;\n\t            } else {\n\t                callback(new Error('Failed to get type for BinaryArray'));\n\t            }\n\t        }\n\n\t        callback(marker + bufferToString(buffer));\n\t    } else if (valueType === '[object Blob]') {\n\t        // Conver the blob to a binaryArray and then to a string.\n\t        var fileReader = new FileReader();\n\n\t        fileReader.onload = function () {\n\t            // Backwards-compatible prefix for the blob type.\n\t            var str = BLOB_TYPE_PREFIX + value.type + '~' + bufferToString(this.result);\n\n\t            callback(SERIALIZED_MARKER + TYPE_BLOB + str);\n\t        };\n\n\t        fileReader.readAsArrayBuffer(value);\n\t    } else {\n\t        try {\n\t            callback(JSON.stringify(value));\n\t        } catch (e) {\n\t            console.error(\"Couldn't convert value into a JSON string: \", value);\n\n\t            callback(null, e);\n\t        }\n\t    }\n\t}\n\n\t// Deserialize data we've inserted into a value column/field. We place\n\t// special markers into our strings to mark them as encoded; this isn't\n\t// as nice as a meta field, but it's the only sane thing we can do whilst\n\t// keeping localStorage support intact.\n\t//\n\t// Oftentimes this will just deserialize JSON content, but if we have a\n\t// special marker (SERIALIZED_MARKER, defined above), we will extract\n\t// some kind of arraybuffer/binary data/typed array out of the string.\n\tfunction deserialize(value) {\n\t    // If we haven't marked this string as being specially serialized (i.e.\n\t    // something other than serialized JSON), we can just return it and be\n\t    // done with it.\n\t    if (value.substring(0, SERIALIZED_MARKER_LENGTH) !== SERIALIZED_MARKER) {\n\t        return JSON.parse(value);\n\t    }\n\n\t    // The following code deals with deserializing some kind of Blob or\n\t    // TypedArray. First we separate out the type of data we're dealing\n\t    // with from the data itself.\n\t    var serializedString = value.substring(TYPE_SERIALIZED_MARKER_LENGTH);\n\t    var type = value.substring(SERIALIZED_MARKER_LENGTH, TYPE_SERIALIZED_MARKER_LENGTH);\n\n\t    var blobType;\n\t    // Backwards-compatible blob type serialization strategy.\n\t    // DBs created with older versions of localForage will simply not have the blob type.\n\t    if (type === TYPE_BLOB && BLOB_TYPE_PREFIX_REGEX.test(serializedString)) {\n\t        var matcher = serializedString.match(BLOB_TYPE_PREFIX_REGEX);\n\t        blobType = matcher[1];\n\t        serializedString = serializedString.substring(matcher[0].length);\n\t    }\n\t    var buffer = stringToBuffer(serializedString);\n\n\t    // Return the right type based on the code/type set during\n\t    // serialization.\n\t    switch (type) {\n\t        case TYPE_ARRAYBUFFER:\n\t            return buffer;\n\t        case TYPE_BLOB:\n\t            return createBlob([buffer], { type: blobType });\n\t        case TYPE_INT8ARRAY:\n\t            return new Int8Array(buffer);\n\t        case TYPE_UINT8ARRAY:\n\t            return new Uint8Array(buffer);\n\t        case TYPE_UINT8CLAMPEDARRAY:\n\t            return new Uint8ClampedArray(buffer);\n\t        case TYPE_INT16ARRAY:\n\t            return new Int16Array(buffer);\n\t        case TYPE_UINT16ARRAY:\n\t            return new Uint16Array(buffer);\n\t        case TYPE_INT32ARRAY:\n\t            return new Int32Array(buffer);\n\t        case TYPE_UINT32ARRAY:\n\t            return new Uint32Array(buffer);\n\t        case TYPE_FLOAT32ARRAY:\n\t            return new Float32Array(buffer);\n\t        case TYPE_FLOAT64ARRAY:\n\t            return new Float64Array(buffer);\n\t        default:\n\t            throw new Error('Unkown type: ' + type);\n\t    }\n\t}\n\n\tvar localforageSerializer = {\n\t    serialize: serialize,\n\t    deserialize: deserialize,\n\t    stringToBuffer: stringToBuffer,\n\t    bufferToString: bufferToString\n\t};\n\n\t/*\n\t * Includes code from:\n\t *\n\t * base64-arraybuffer\n\t * https://github.com/niklasvh/base64-arraybuffer\n\t *\n\t * Copyright (c) 2012 Niklas von Hertzen\n\t * Licensed under the MIT license.\n\t */\n\n\tfunction createDbTable(t, dbInfo, callback, errorCallback) {\n\t    t.executeSql('CREATE TABLE IF NOT EXISTS ' + dbInfo.storeName + ' ' + '(id INTEGER PRIMARY KEY, key unique, value)', [], callback, errorCallback);\n\t}\n\n\t// Open the WebSQL database (automatically creates one if one didn't\n\t// previously exist), using any options set in the config.\n\tfunction _initStorage$1(options) {\n\t    var self = this;\n\t    var dbInfo = {\n\t        db: null\n\t    };\n\n\t    if (options) {\n\t        for (var i in options) {\n\t            dbInfo[i] = typeof options[i] !== 'string' ? options[i].toString() : options[i];\n\t        }\n\t    }\n\n\t    var dbInfoPromise = new Promise$1(function (resolve, reject) {\n\t        // Open the database; the openDatabase API will automatically\n\t        // create it for us if it doesn't exist.\n\t        try {\n\t            dbInfo.db = openDatabase(dbInfo.name, String(dbInfo.version), dbInfo.description, dbInfo.size);\n\t        } catch (e) {\n\t            return reject(e);\n\t        }\n\n\t        // Create our key/value table if it doesn't exist.\n\t        dbInfo.db.transaction(function (t) {\n\t            createDbTable(t, dbInfo, function () {\n\t                self._dbInfo = dbInfo;\n\t                resolve();\n\t            }, function (t, error) {\n\t                reject(error);\n\t            });\n\t        }, reject);\n\t    });\n\n\t    dbInfo.serializer = localforageSerializer;\n\t    return dbInfoPromise;\n\t}\n\n\tfunction tryExecuteSql(t, dbInfo, sqlStatement, args, callback, errorCallback) {\n\t    t.executeSql(sqlStatement, args, callback, function (t, error) {\n\t        if (error.code === error.SYNTAX_ERR) {\n\t            t.executeSql('SELECT name FROM sqlite_master ' + \"WHERE type='table' AND name = ?\", [dbInfo.storeName], function (t, results) {\n\t                if (!results.rows.length) {\n\t                    // if the table is missing (was deleted)\n\t                    // re-create it table and retry\n\t                    createDbTable(t, dbInfo, function () {\n\t                        t.executeSql(sqlStatement, args, callback, errorCallback);\n\t                    }, errorCallback);\n\t                } else {\n\t                    errorCallback(t, error);\n\t                }\n\t            }, errorCallback);\n\t        } else {\n\t            errorCallback(t, error);\n\t        }\n\t    }, errorCallback);\n\t}\n\n\tfunction getItem$1(key, callback) {\n\t    var self = this;\n\n\t    key = normalizeKey(key);\n\n\t    var promise = new Promise$1(function (resolve, reject) {\n\t        self.ready().then(function () {\n\t            var dbInfo = self._dbInfo;\n\t            dbInfo.db.transaction(function (t) {\n\t                tryExecuteSql(t, dbInfo, 'SELECT * FROM ' + dbInfo.storeName + ' WHERE key = ? LIMIT 1', [key], function (t, results) {\n\t                    var result = results.rows.length ? results.rows.item(0).value : null;\n\n\t                    // Check to see if this is serialized content we need to\n\t                    // unpack.\n\t                    if (result) {\n\t                        result = dbInfo.serializer.deserialize(result);\n\t                    }\n\n\t                    resolve(result);\n\t                }, function (t, error) {\n\t                    reject(error);\n\t                });\n\t            });\n\t        })[\"catch\"](reject);\n\t    });\n\n\t    executeCallback(promise, callback);\n\t    return promise;\n\t}\n\n\tfunction iterate$1(iterator, callback) {\n\t    var self = this;\n\n\t    var promise = new Promise$1(function (resolve, reject) {\n\t        self.ready().then(function () {\n\t            var dbInfo = self._dbInfo;\n\n\t            dbInfo.db.transaction(function (t) {\n\t                tryExecuteSql(t, dbInfo, 'SELECT * FROM ' + dbInfo.storeName, [], function (t, results) {\n\t                    var rows = results.rows;\n\t                    var length = rows.length;\n\n\t                    for (var i = 0; i < length; i++) {\n\t                        var item = rows.item(i);\n\t                        var result = item.value;\n\n\t                        // Check to see if this is serialized content\n\t                        // we need to unpack.\n\t                        if (result) {\n\t                            result = dbInfo.serializer.deserialize(result);\n\t                        }\n\n\t                        result = iterator(result, item.key, i + 1);\n\n\t                        // void(0) prevents problems with redefinition\n\t                        // of `undefined`.\n\t                        if (result !== void 0) {\n\t                            resolve(result);\n\t                            return;\n\t                        }\n\t                    }\n\n\t                    resolve();\n\t                }, function (t, error) {\n\t                    reject(error);\n\t                });\n\t            });\n\t        })[\"catch\"](reject);\n\t    });\n\n\t    executeCallback(promise, callback);\n\t    return promise;\n\t}\n\n\tfunction _setItem(key, value, callback, retriesLeft) {\n\t    var self = this;\n\n\t    key = normalizeKey(key);\n\n\t    var promise = new Promise$1(function (resolve, reject) {\n\t        self.ready().then(function () {\n\t            // The localStorage API doesn't return undefined values in an\n\t            // \"expected\" way, so undefined is always cast to null in all\n\t            // drivers. See: https://github.com/mozilla/localForage/pull/42\n\t            if (value === undefined) {\n\t                value = null;\n\t            }\n\n\t            // Save the original value to pass to the callback.\n\t            var originalValue = value;\n\n\t            var dbInfo = self._dbInfo;\n\t            dbInfo.serializer.serialize(value, function (value, error) {\n\t                if (error) {\n\t                    reject(error);\n\t                } else {\n\t                    dbInfo.db.transaction(function (t) {\n\t                        tryExecuteSql(t, dbInfo, 'INSERT OR REPLACE INTO ' + dbInfo.storeName + ' ' + '(key, value) VALUES (?, ?)', [key, value], function () {\n\t                            resolve(originalValue);\n\t                        }, function (t, error) {\n\t                            reject(error);\n\t                        });\n\t                    }, function (sqlError) {\n\t                        // The transaction failed; check\n\t                        // to see if it's a quota error.\n\t                        if (sqlError.code === sqlError.QUOTA_ERR) {\n\t                            // We reject the callback outright for now, but\n\t                            // it's worth trying to re-run the transaction.\n\t                            // Even if the user accepts the prompt to use\n\t                            // more storage on Safari, this error will\n\t                            // be called.\n\t                            //\n\t                            // Try to re-run the transaction.\n\t                            if (retriesLeft > 0) {\n\t                                resolve(_setItem.apply(self, [key, originalValue, callback, retriesLeft - 1]));\n\t                                return;\n\t                            }\n\t                            reject(sqlError);\n\t                        }\n\t                    });\n\t                }\n\t            });\n\t        })[\"catch\"](reject);\n\t    });\n\n\t    executeCallback(promise, callback);\n\t    return promise;\n\t}\n\n\tfunction setItem$1(key, value, callback) {\n\t    return _setItem.apply(this, [key, value, callback, 1]);\n\t}\n\n\tfunction removeItem$1(key, callback) {\n\t    var self = this;\n\n\t    key = normalizeKey(key);\n\n\t    var promise = new Promise$1(function (resolve, reject) {\n\t        self.ready().then(function () {\n\t            var dbInfo = self._dbInfo;\n\t            dbInfo.db.transaction(function (t) {\n\t                tryExecuteSql(t, dbInfo, 'DELETE FROM ' + dbInfo.storeName + ' WHERE key = ?', [key], function () {\n\t                    resolve();\n\t                }, function (t, error) {\n\t                    reject(error);\n\t                });\n\t            });\n\t        })[\"catch\"](reject);\n\t    });\n\n\t    executeCallback(promise, callback);\n\t    return promise;\n\t}\n\n\t// Deletes every item in the table.\n\t// TODO: Find out if this resets the AUTO_INCREMENT number.\n\tfunction clear$1(callback) {\n\t    var self = this;\n\n\t    var promise = new Promise$1(function (resolve, reject) {\n\t        self.ready().then(function () {\n\t            var dbInfo = self._dbInfo;\n\t            dbInfo.db.transaction(function (t) {\n\t                tryExecuteSql(t, dbInfo, 'DELETE FROM ' + dbInfo.storeName, [], function () {\n\t                    resolve();\n\t                }, function (t, error) {\n\t                    reject(error);\n\t                });\n\t            });\n\t        })[\"catch\"](reject);\n\t    });\n\n\t    executeCallback(promise, callback);\n\t    return promise;\n\t}\n\n\t// Does a simple `COUNT(key)` to get the number of items stored in\n\t// localForage.\n\tfunction length$1(callback) {\n\t    var self = this;\n\n\t    var promise = new Promise$1(function (resolve, reject) {\n\t        self.ready().then(function () {\n\t            var dbInfo = self._dbInfo;\n\t            dbInfo.db.transaction(function (t) {\n\t                // Ahhh, SQL makes this one soooooo easy.\n\t                tryExecuteSql(t, dbInfo, 'SELECT COUNT(key) as c FROM ' + dbInfo.storeName, [], function (t, results) {\n\t                    var result = results.rows.item(0).c;\n\t                    resolve(result);\n\t                }, function (t, error) {\n\t                    reject(error);\n\t                });\n\t            });\n\t        })[\"catch\"](reject);\n\t    });\n\n\t    executeCallback(promise, callback);\n\t    return promise;\n\t}\n\n\t// Return the key located at key index X; essentially gets the key from a\n\t// `WHERE id = ?`. This is the most efficient way I can think to implement\n\t// this rarely-used (in my experience) part of the API, but it can seem\n\t// inconsistent, because we do `INSERT OR REPLACE INTO` on `setItem()`, so\n\t// the ID of each key will change every time it's updated. Perhaps a stored\n\t// procedure for the `setItem()` SQL would solve this problem?\n\t// TODO: Don't change ID on `setItem()`.\n\tfunction key$1(n, callback) {\n\t    var self = this;\n\n\t    var promise = new Promise$1(function (resolve, reject) {\n\t        self.ready().then(function () {\n\t            var dbInfo = self._dbInfo;\n\t            dbInfo.db.transaction(function (t) {\n\t                tryExecuteSql(t, dbInfo, 'SELECT key FROM ' + dbInfo.storeName + ' WHERE id = ? LIMIT 1', [n + 1], function (t, results) {\n\t                    var result = results.rows.length ? results.rows.item(0).key : null;\n\t                    resolve(result);\n\t                }, function (t, error) {\n\t                    reject(error);\n\t                });\n\t            });\n\t        })[\"catch\"](reject);\n\t    });\n\n\t    executeCallback(promise, callback);\n\t    return promise;\n\t}\n\n\tfunction keys$1(callback) {\n\t    var self = this;\n\n\t    var promise = new Promise$1(function (resolve, reject) {\n\t        self.ready().then(function () {\n\t            var dbInfo = self._dbInfo;\n\t            dbInfo.db.transaction(function (t) {\n\t                tryExecuteSql(t, dbInfo, 'SELECT key FROM ' + dbInfo.storeName, [], function (t, results) {\n\t                    var keys = [];\n\n\t                    for (var i = 0; i < results.rows.length; i++) {\n\t                        keys.push(results.rows.item(i).key);\n\t                    }\n\n\t                    resolve(keys);\n\t                }, function (t, error) {\n\t                    reject(error);\n\t                });\n\t            });\n\t        })[\"catch\"](reject);\n\t    });\n\n\t    executeCallback(promise, callback);\n\t    return promise;\n\t}\n\n\t// https://www.w3.org/TR/webdatabase/#databases\n\t// > There is no way to enumerate or delete the databases available for an origin from this API.\n\tfunction getAllStoreNames(db) {\n\t    return new Promise$1(function (resolve, reject) {\n\t        db.transaction(function (t) {\n\t            t.executeSql('SELECT name FROM sqlite_master ' + \"WHERE type='table' AND name <> '__WebKitDatabaseInfoTable__'\", [], function (t, results) {\n\t                var storeNames = [];\n\n\t                for (var i = 0; i < results.rows.length; i++) {\n\t                    storeNames.push(results.rows.item(i).name);\n\t                }\n\n\t                resolve({\n\t                    db: db,\n\t                    storeNames: storeNames\n\t                });\n\t            }, function (t, error) {\n\t                reject(error);\n\t            });\n\t        }, function (sqlError) {\n\t            reject(sqlError);\n\t        });\n\t    });\n\t}\n\n\tfunction dropInstance$1(options, callback) {\n\t    callback = getCallback.apply(this, arguments);\n\n\t    var currentConfig = this.config();\n\t    options = typeof options !== 'function' && options || {};\n\t    if (!options.name) {\n\t        options.name = options.name || currentConfig.name;\n\t        options.storeName = options.storeName || currentConfig.storeName;\n\t    }\n\n\t    var self = this;\n\t    var promise;\n\t    if (!options.name) {\n\t        promise = Promise$1.reject('Invalid arguments');\n\t    } else {\n\t        promise = new Promise$1(function (resolve) {\n\t            var db;\n\t            if (options.name === currentConfig.name) {\n\t                // use the db reference of the current instance\n\t                db = self._dbInfo.db;\n\t            } else {\n\t                db = openDatabase(options.name, '', '', 0);\n\t            }\n\n\t            if (!options.storeName) {\n\t                // drop all database tables\n\t                resolve(getAllStoreNames(db));\n\t            } else {\n\t                resolve({\n\t                    db: db,\n\t                    storeNames: [options.storeName]\n\t                });\n\t            }\n\t        }).then(function (operationInfo) {\n\t            return new Promise$1(function (resolve, reject) {\n\t                operationInfo.db.transaction(function (t) {\n\t                    function dropTable(storeName) {\n\t                        return new Promise$1(function (resolve, reject) {\n\t                            t.executeSql('DROP TABLE IF EXISTS ' + storeName, [], function () {\n\t                                resolve();\n\t                            }, function (t, error) {\n\t                                reject(error);\n\t                            });\n\t                        });\n\t                    }\n\n\t                    var operations = [];\n\t                    for (var i = 0, len = operationInfo.storeNames.length; i < len; i++) {\n\t                        operations.push(dropTable(operationInfo.storeNames[i]));\n\t                    }\n\n\t                    Promise$1.all(operations).then(function () {\n\t                        resolve();\n\t                    })[\"catch\"](function (e) {\n\t                        reject(e);\n\t                    });\n\t                }, function (sqlError) {\n\t                    reject(sqlError);\n\t                });\n\t            });\n\t        });\n\t    }\n\n\t    executeCallback(promise, callback);\n\t    return promise;\n\t}\n\n\tvar webSQLStorage = {\n\t    _driver: 'webSQLStorage',\n\t    _initStorage: _initStorage$1,\n\t    _support: isWebSQLValid(),\n\t    iterate: iterate$1,\n\t    getItem: getItem$1,\n\t    setItem: setItem$1,\n\t    removeItem: removeItem$1,\n\t    clear: clear$1,\n\t    length: length$1,\n\t    key: key$1,\n\t    keys: keys$1,\n\t    dropInstance: dropInstance$1\n\t};\n\n\tfunction isLocalStorageValid() {\n\t    try {\n\t        return typeof localStorage !== 'undefined' && 'setItem' in localStorage &&\n\t        // in IE8 typeof localStorage.setItem === 'object'\n\t        !!localStorage.setItem;\n\t    } catch (e) {\n\t        return false;\n\t    }\n\t}\n\n\tfunction _getKeyPrefix(options, defaultConfig) {\n\t    var keyPrefix = options.name + '/';\n\n\t    if (options.storeName !== defaultConfig.storeName) {\n\t        keyPrefix += options.storeName + '/';\n\t    }\n\t    return keyPrefix;\n\t}\n\n\t// Check if localStorage throws when saving an item\n\tfunction checkIfLocalStorageThrows() {\n\t    var localStorageTestKey = '_localforage_support_test';\n\n\t    try {\n\t        localStorage.setItem(localStorageTestKey, true);\n\t        localStorage.removeItem(localStorageTestKey);\n\n\t        return false;\n\t    } catch (e) {\n\t        return true;\n\t    }\n\t}\n\n\t// Check if localStorage is usable and allows to save an item\n\t// This method checks if localStorage is usable in Safari Private Browsing\n\t// mode, or in any other case where the available quota for localStorage\n\t// is 0 and there wasn't any saved items yet.\n\tfunction _isLocalStorageUsable() {\n\t    return !checkIfLocalStorageThrows() || localStorage.length > 0;\n\t}\n\n\t// Config the localStorage backend, using options set in the config.\n\tfunction _initStorage$2(options) {\n\t    var self = this;\n\t    var dbInfo = {};\n\t    if (options) {\n\t        for (var i in options) {\n\t            dbInfo[i] = options[i];\n\t        }\n\t    }\n\n\t    dbInfo.keyPrefix = _getKeyPrefix(options, self._defaultConfig);\n\n\t    if (!_isLocalStorageUsable()) {\n\t        return Promise$1.reject();\n\t    }\n\n\t    self._dbInfo = dbInfo;\n\t    dbInfo.serializer = localforageSerializer;\n\n\t    return Promise$1.resolve();\n\t}\n\n\t// Remove all keys from the datastore, effectively destroying all data in\n\t// the app's key/value store!\n\tfunction clear$2(callback) {\n\t    var self = this;\n\t    var promise = self.ready().then(function () {\n\t        var keyPrefix = self._dbInfo.keyPrefix;\n\n\t        for (var i = localStorage.length - 1; i >= 0; i--) {\n\t            var key = localStorage.key(i);\n\n\t            if (key.indexOf(keyPrefix) === 0) {\n\t                localStorage.removeItem(key);\n\t            }\n\t        }\n\t    });\n\n\t    executeCallback(promise, callback);\n\t    return promise;\n\t}\n\n\t// Retrieve an item from the store. Unlike the original async_storage\n\t// library in Gaia, we don't modify return values at all. If a key's value\n\t// is `undefined`, we pass that value to the callback function.\n\tfunction getItem$2(key, callback) {\n\t    var self = this;\n\n\t    key = normalizeKey(key);\n\n\t    var promise = self.ready().then(function () {\n\t        var dbInfo = self._dbInfo;\n\t        var result = localStorage.getItem(dbInfo.keyPrefix + key);\n\n\t        // If a result was found, parse it from the serialized\n\t        // string into a JS object. If result isn't truthy, the key\n\t        // is likely undefined and we'll pass it straight to the\n\t        // callback.\n\t        if (result) {\n\t            result = dbInfo.serializer.deserialize(result);\n\t        }\n\n\t        return result;\n\t    });\n\n\t    executeCallback(promise, callback);\n\t    return promise;\n\t}\n\n\t// Iterate over all items in the store.\n\tfunction iterate$2(iterator, callback) {\n\t    var self = this;\n\n\t    var promise = self.ready().then(function () {\n\t        var dbInfo = self._dbInfo;\n\t        var keyPrefix = dbInfo.keyPrefix;\n\t        var keyPrefixLength = keyPrefix.length;\n\t        var length = localStorage.length;\n\n\t        // We use a dedicated iterator instead of the `i` variable below\n\t        // so other keys we fetch in localStorage aren't counted in\n\t        // the `iterationNumber` argument passed to the `iterate()`\n\t        // callback.\n\t        //\n\t        // See: github.com/mozilla/localForage/pull/435#discussion_r38061530\n\t        var iterationNumber = 1;\n\n\t        for (var i = 0; i < length; i++) {\n\t            var key = localStorage.key(i);\n\t            if (key.indexOf(keyPrefix) !== 0) {\n\t                continue;\n\t            }\n\t            var value = localStorage.getItem(key);\n\n\t            // If a result was found, parse it from the serialized\n\t            // string into a JS object. If result isn't truthy, the\n\t            // key is likely undefined and we'll pass it straight\n\t            // to the iterator.\n\t            if (value) {\n\t                value = dbInfo.serializer.deserialize(value);\n\t            }\n\n\t            value = iterator(value, key.substring(keyPrefixLength), iterationNumber++);\n\n\t            if (value !== void 0) {\n\t                return value;\n\t            }\n\t        }\n\t    });\n\n\t    executeCallback(promise, callback);\n\t    return promise;\n\t}\n\n\t// Same as localStorage's key() method, except takes a callback.\n\tfunction key$2(n, callback) {\n\t    var self = this;\n\t    var promise = self.ready().then(function () {\n\t        var dbInfo = self._dbInfo;\n\t        var result;\n\t        try {\n\t            result = localStorage.key(n);\n\t        } catch (error) {\n\t            result = null;\n\t        }\n\n\t        // Remove the prefix from the key, if a key is found.\n\t        if (result) {\n\t            result = result.substring(dbInfo.keyPrefix.length);\n\t        }\n\n\t        return result;\n\t    });\n\n\t    executeCallback(promise, callback);\n\t    return promise;\n\t}\n\n\tfunction keys$2(callback) {\n\t    var self = this;\n\t    var promise = self.ready().then(function () {\n\t        var dbInfo = self._dbInfo;\n\t        var length = localStorage.length;\n\t        var keys = [];\n\n\t        for (var i = 0; i < length; i++) {\n\t            var itemKey = localStorage.key(i);\n\t            if (itemKey.indexOf(dbInfo.keyPrefix) === 0) {\n\t                keys.push(itemKey.substring(dbInfo.keyPrefix.length));\n\t            }\n\t        }\n\n\t        return keys;\n\t    });\n\n\t    executeCallback(promise, callback);\n\t    return promise;\n\t}\n\n\t// Supply the number of keys in the datastore to the callback function.\n\tfunction length$2(callback) {\n\t    var self = this;\n\t    var promise = self.keys().then(function (keys) {\n\t        return keys.length;\n\t    });\n\n\t    executeCallback(promise, callback);\n\t    return promise;\n\t}\n\n\t// Remove an item from the store, nice and simple.\n\tfunction removeItem$2(key, callback) {\n\t    var self = this;\n\n\t    key = normalizeKey(key);\n\n\t    var promise = self.ready().then(function () {\n\t        var dbInfo = self._dbInfo;\n\t        localStorage.removeItem(dbInfo.keyPrefix + key);\n\t    });\n\n\t    executeCallback(promise, callback);\n\t    return promise;\n\t}\n\n\t// Set a key's value and run an optional callback once the value is set.\n\t// Unlike Gaia's implementation, the callback function is passed the value,\n\t// in case you want to operate on that value only after you're sure it\n\t// saved, or something like that.\n\tfunction setItem$2(key, value, callback) {\n\t    var self = this;\n\n\t    key = normalizeKey(key);\n\n\t    var promise = self.ready().then(function () {\n\t        // Convert undefined values to null.\n\t        // https://github.com/mozilla/localForage/pull/42\n\t        if (value === undefined) {\n\t            value = null;\n\t        }\n\n\t        // Save the original value to pass to the callback.\n\t        var originalValue = value;\n\n\t        return new Promise$1(function (resolve, reject) {\n\t            var dbInfo = self._dbInfo;\n\t            dbInfo.serializer.serialize(value, function (value, error) {\n\t                if (error) {\n\t                    reject(error);\n\t                } else {\n\t                    try {\n\t                        localStorage.setItem(dbInfo.keyPrefix + key, value);\n\t                        resolve(originalValue);\n\t                    } catch (e) {\n\t                        // localStorage capacity exceeded.\n\t                        // TODO: Make this a specific error/event.\n\t                        if (e.name === 'QuotaExceededError' || e.name === 'NS_ERROR_DOM_QUOTA_REACHED') {\n\t                            reject(e);\n\t                        }\n\t                        reject(e);\n\t                    }\n\t                }\n\t            });\n\t        });\n\t    });\n\n\t    executeCallback(promise, callback);\n\t    return promise;\n\t}\n\n\tfunction dropInstance$2(options, callback) {\n\t    callback = getCallback.apply(this, arguments);\n\n\t    options = typeof options !== 'function' && options || {};\n\t    if (!options.name) {\n\t        var currentConfig = this.config();\n\t        options.name = options.name || currentConfig.name;\n\t        options.storeName = options.storeName || currentConfig.storeName;\n\t    }\n\n\t    var self = this;\n\t    var promise;\n\t    if (!options.name) {\n\t        promise = Promise$1.reject('Invalid arguments');\n\t    } else {\n\t        promise = new Promise$1(function (resolve) {\n\t            if (!options.storeName) {\n\t                resolve(options.name + '/');\n\t            } else {\n\t                resolve(_getKeyPrefix(options, self._defaultConfig));\n\t            }\n\t        }).then(function (keyPrefix) {\n\t            for (var i = localStorage.length - 1; i >= 0; i--) {\n\t                var key = localStorage.key(i);\n\n\t                if (key.indexOf(keyPrefix) === 0) {\n\t                    localStorage.removeItem(key);\n\t                }\n\t            }\n\t        });\n\t    }\n\n\t    executeCallback(promise, callback);\n\t    return promise;\n\t}\n\n\tvar localStorageWrapper = {\n\t    _driver: 'localStorageWrapper',\n\t    _initStorage: _initStorage$2,\n\t    _support: isLocalStorageValid(),\n\t    iterate: iterate$2,\n\t    getItem: getItem$2,\n\t    setItem: setItem$2,\n\t    removeItem: removeItem$2,\n\t    clear: clear$2,\n\t    length: length$2,\n\t    key: key$2,\n\t    keys: keys$2,\n\t    dropInstance: dropInstance$2\n\t};\n\n\tvar sameValue = function sameValue(x, y) {\n\t    return x === y || typeof x === 'number' && typeof y === 'number' && isNaN(x) && isNaN(y);\n\t};\n\n\tvar includes = function includes(array, searchElement) {\n\t    var len = array.length;\n\t    var i = 0;\n\t    while (i < len) {\n\t        if (sameValue(array[i], searchElement)) {\n\t            return true;\n\t        }\n\t        i++;\n\t    }\n\n\t    return false;\n\t};\n\n\tvar isArray = Array.isArray || function (arg) {\n\t    return Object.prototype.toString.call(arg) === '[object Array]';\n\t};\n\n\t// Drivers are stored here when `defineDriver()` is called.\n\t// They are shared across all instances of localForage.\n\tvar DefinedDrivers = {};\n\n\tvar DriverSupport = {};\n\n\tvar DefaultDrivers = {\n\t    INDEXEDDB: asyncStorage,\n\t    WEBSQL: webSQLStorage,\n\t    LOCALSTORAGE: localStorageWrapper\n\t};\n\n\tvar DefaultDriverOrder = [DefaultDrivers.INDEXEDDB._driver, DefaultDrivers.WEBSQL._driver, DefaultDrivers.LOCALSTORAGE._driver];\n\n\tvar OptionalDriverMethods = ['dropInstance'];\n\n\tvar LibraryMethods = ['clear', 'getItem', 'iterate', 'key', 'keys', 'length', 'removeItem', 'setItem'].concat(OptionalDriverMethods);\n\n\tvar DefaultConfig = {\n\t    description: '',\n\t    driver: DefaultDriverOrder.slice(),\n\t    name: 'localforage',\n\t    // Default DB size is _JUST UNDER_ 5MB, as it's the highest size\n\t    // we can use without a prompt.\n\t    size: 4980736,\n\t    storeName: 'keyvaluepairs',\n\t    version: 1.0\n\t};\n\n\tfunction callWhenReady(localForageInstance, libraryMethod) {\n\t    localForageInstance[libraryMethod] = function () {\n\t        var _args = arguments;\n\t        return localForageInstance.ready().then(function () {\n\t            return localForageInstance[libraryMethod].apply(localForageInstance, _args);\n\t        });\n\t    };\n\t}\n\n\tfunction extend() {\n\t    for (var i = 1; i < arguments.length; i++) {\n\t        var arg = arguments[i];\n\n\t        if (arg) {\n\t            for (var _key in arg) {\n\t                if (arg.hasOwnProperty(_key)) {\n\t                    if (isArray(arg[_key])) {\n\t                        arguments[0][_key] = arg[_key].slice();\n\t                    } else {\n\t                        arguments[0][_key] = arg[_key];\n\t                    }\n\t                }\n\t            }\n\t        }\n\t    }\n\n\t    return arguments[0];\n\t}\n\n\tvar LocalForage = function () {\n\t    function LocalForage(options) {\n\t        _classCallCheck(this, LocalForage);\n\n\t        for (var driverTypeKey in DefaultDrivers) {\n\t            if (DefaultDrivers.hasOwnProperty(driverTypeKey)) {\n\t                var driver = DefaultDrivers[driverTypeKey];\n\t                var driverName = driver._driver;\n\t                this[driverTypeKey] = driverName;\n\n\t                if (!DefinedDrivers[driverName]) {\n\t                    // we don't need to wait for the promise,\n\t                    // since the default drivers can be defined\n\t                    // in a blocking manner\n\t                    this.defineDriver(driver);\n\t                }\n\t            }\n\t        }\n\n\t        this._defaultConfig = extend({}, DefaultConfig);\n\t        this._config = extend({}, this._defaultConfig, options);\n\t        this._driverSet = null;\n\t        this._initDriver = null;\n\t        this._ready = false;\n\t        this._dbInfo = null;\n\n\t        this._wrapLibraryMethodsWithReady();\n\t        this.setDriver(this._config.driver)[\"catch\"](function () {});\n\t    }\n\n\t    // Set any config values for localForage; can be called anytime before\n\t    // the first API call (e.g. `getItem`, `setItem`).\n\t    // We loop through options so we don't overwrite existing config\n\t    // values.\n\n\n\t    LocalForage.prototype.config = function config(options) {\n\t        // If the options argument is an object, we use it to set values.\n\t        // Otherwise, we return either a specified config value or all\n\t        // config values.\n\t        if ((typeof options === 'undefined' ? 'undefined' : _typeof(options)) === 'object') {\n\t            // If localforage is ready and fully initialized, we can't set\n\t            // any new configuration values. Instead, we return an error.\n\t            if (this._ready) {\n\t                return new Error(\"Can't call config() after localforage \" + 'has been used.');\n\t            }\n\n\t            for (var i in options) {\n\t                if (i === 'storeName') {\n\t                    options[i] = options[i].replace(/\\W/g, '_');\n\t                }\n\n\t                if (i === 'version' && typeof options[i] !== 'number') {\n\t                    return new Error('Database version must be a number.');\n\t                }\n\n\t                this._config[i] = options[i];\n\t            }\n\n\t            // after all config options are set and\n\t            // the driver option is used, try setting it\n\t            if ('driver' in options && options.driver) {\n\t                return this.setDriver(this._config.driver);\n\t            }\n\n\t            return true;\n\t        } else if (typeof options === 'string') {\n\t            return this._config[options];\n\t        } else {\n\t            return this._config;\n\t        }\n\t    };\n\n\t    // Used to define a custom driver, shared across all instances of\n\t    // localForage.\n\n\n\t    LocalForage.prototype.defineDriver = function defineDriver(driverObject, callback, errorCallback) {\n\t        var promise = new Promise$1(function (resolve, reject) {\n\t            try {\n\t                var driverName = driverObject._driver;\n\t                var complianceError = new Error('Custom driver not compliant; see ' + 'https://mozilla.github.io/localForage/#definedriver');\n\n\t                // A driver name should be defined and not overlap with the\n\t                // library-defined, default drivers.\n\t                if (!driverObject._driver) {\n\t                    reject(complianceError);\n\t                    return;\n\t                }\n\n\t                var driverMethods = LibraryMethods.concat('_initStorage');\n\t                for (var i = 0, len = driverMethods.length; i < len; i++) {\n\t                    var driverMethodName = driverMethods[i];\n\n\t                    // when the property is there,\n\t                    // it should be a method even when optional\n\t                    var isRequired = !includes(OptionalDriverMethods, driverMethodName);\n\t                    if ((isRequired || driverObject[driverMethodName]) && typeof driverObject[driverMethodName] !== 'function') {\n\t                        reject(complianceError);\n\t                        return;\n\t                    }\n\t                }\n\n\t                var configureMissingMethods = function configureMissingMethods() {\n\t                    var methodNotImplementedFactory = function methodNotImplementedFactory(methodName) {\n\t                        return function () {\n\t                            var error = new Error('Method ' + methodName + ' is not implemented by the current driver');\n\t                            var promise = Promise$1.reject(error);\n\t                            executeCallback(promise, arguments[arguments.length - 1]);\n\t                            return promise;\n\t                        };\n\t                    };\n\n\t                    for (var _i = 0, _len = OptionalDriverMethods.length; _i < _len; _i++) {\n\t                        var optionalDriverMethod = OptionalDriverMethods[_i];\n\t                        if (!driverObject[optionalDriverMethod]) {\n\t                            driverObject[optionalDriverMethod] = methodNotImplementedFactory(optionalDriverMethod);\n\t                        }\n\t                    }\n\t                };\n\n\t                configureMissingMethods();\n\n\t                var setDriverSupport = function setDriverSupport(support) {\n\t                    if (DefinedDrivers[driverName]) {\n\t                        console.info('Redefining LocalForage driver: ' + driverName);\n\t                    }\n\t                    DefinedDrivers[driverName] = driverObject;\n\t                    DriverSupport[driverName] = support;\n\t                    // don't use a then, so that we can define\n\t                    // drivers that have simple _support methods\n\t                    // in a blocking manner\n\t                    resolve();\n\t                };\n\n\t                if ('_support' in driverObject) {\n\t                    if (driverObject._support && typeof driverObject._support === 'function') {\n\t                        driverObject._support().then(setDriverSupport, reject);\n\t                    } else {\n\t                        setDriverSupport(!!driverObject._support);\n\t                    }\n\t                } else {\n\t                    setDriverSupport(true);\n\t                }\n\t            } catch (e) {\n\t                reject(e);\n\t            }\n\t        });\n\n\t        executeTwoCallbacks(promise, callback, errorCallback);\n\t        return promise;\n\t    };\n\n\t    LocalForage.prototype.driver = function driver() {\n\t        return this._driver || null;\n\t    };\n\n\t    LocalForage.prototype.getDriver = function getDriver(driverName, callback, errorCallback) {\n\t        var getDriverPromise = DefinedDrivers[driverName] ? Promise$1.resolve(DefinedDrivers[driverName]) : Promise$1.reject(new Error('Driver not found.'));\n\n\t        executeTwoCallbacks(getDriverPromise, callback, errorCallback);\n\t        return getDriverPromise;\n\t    };\n\n\t    LocalForage.prototype.getSerializer = function getSerializer(callback) {\n\t        var serializerPromise = Promise$1.resolve(localforageSerializer);\n\t        executeTwoCallbacks(serializerPromise, callback);\n\t        return serializerPromise;\n\t    };\n\n\t    LocalForage.prototype.ready = function ready(callback) {\n\t        var self = this;\n\n\t        var promise = self._driverSet.then(function () {\n\t            if (self._ready === null) {\n\t                self._ready = self._initDriver();\n\t            }\n\n\t            return self._ready;\n\t        });\n\n\t        executeTwoCallbacks(promise, callback, callback);\n\t        return promise;\n\t    };\n\n\t    LocalForage.prototype.setDriver = function setDriver(drivers, callback, errorCallback) {\n\t        var self = this;\n\n\t        if (!isArray(drivers)) {\n\t            drivers = [drivers];\n\t        }\n\n\t        var supportedDrivers = this._getSupportedDrivers(drivers);\n\n\t        function setDriverToConfig() {\n\t            self._config.driver = self.driver();\n\t        }\n\n\t        function extendSelfWithDriver(driver) {\n\t            self._extend(driver);\n\t            setDriverToConfig();\n\n\t            self._ready = self._initStorage(self._config);\n\t            return self._ready;\n\t        }\n\n\t        function initDriver(supportedDrivers) {\n\t            return function () {\n\t                var currentDriverIndex = 0;\n\n\t                function driverPromiseLoop() {\n\t                    while (currentDriverIndex < supportedDrivers.length) {\n\t                        var driverName = supportedDrivers[currentDriverIndex];\n\t                        currentDriverIndex++;\n\n\t                        self._dbInfo = null;\n\t                        self._ready = null;\n\n\t                        return self.getDriver(driverName).then(extendSelfWithDriver)[\"catch\"](driverPromiseLoop);\n\t                    }\n\n\t                    setDriverToConfig();\n\t                    var error = new Error('No available storage method found.');\n\t                    self._driverSet = Promise$1.reject(error);\n\t                    return self._driverSet;\n\t                }\n\n\t                return driverPromiseLoop();\n\t            };\n\t        }\n\n\t        // There might be a driver initialization in progress\n\t        // so wait for it to finish in order to avoid a possible\n\t        // race condition to set _dbInfo\n\t        var oldDriverSetDone = this._driverSet !== null ? this._driverSet[\"catch\"](function () {\n\t            return Promise$1.resolve();\n\t        }) : Promise$1.resolve();\n\n\t        this._driverSet = oldDriverSetDone.then(function () {\n\t            var driverName = supportedDrivers[0];\n\t            self._dbInfo = null;\n\t            self._ready = null;\n\n\t            return self.getDriver(driverName).then(function (driver) {\n\t                self._driver = driver._driver;\n\t                setDriverToConfig();\n\t                self._wrapLibraryMethodsWithReady();\n\t                self._initDriver = initDriver(supportedDrivers);\n\t            });\n\t        })[\"catch\"](function () {\n\t            setDriverToConfig();\n\t            var error = new Error('No available storage method found.');\n\t            self._driverSet = Promise$1.reject(error);\n\t            return self._driverSet;\n\t        });\n\n\t        executeTwoCallbacks(this._driverSet, callback, errorCallback);\n\t        return this._driverSet;\n\t    };\n\n\t    LocalForage.prototype.supports = function supports(driverName) {\n\t        return !!DriverSupport[driverName];\n\t    };\n\n\t    LocalForage.prototype._extend = function _extend(libraryMethodsAndProperties) {\n\t        extend(this, libraryMethodsAndProperties);\n\t    };\n\n\t    LocalForage.prototype._getSupportedDrivers = function _getSupportedDrivers(drivers) {\n\t        var supportedDrivers = [];\n\t        for (var i = 0, len = drivers.length; i < len; i++) {\n\t            var driverName = drivers[i];\n\t            if (this.supports(driverName)) {\n\t                supportedDrivers.push(driverName);\n\t            }\n\t        }\n\t        return supportedDrivers;\n\t    };\n\n\t    LocalForage.prototype._wrapLibraryMethodsWithReady = function _wrapLibraryMethodsWithReady() {\n\t        // Add a stub for each driver API method that delays the call to the\n\t        // corresponding driver method until localForage is ready. These stubs\n\t        // will be replaced by the driver methods as soon as the driver is\n\t        // loaded, so there is no performance impact.\n\t        for (var i = 0, len = LibraryMethods.length; i < len; i++) {\n\t            callWhenReady(this, LibraryMethods[i]);\n\t        }\n\t    };\n\n\t    LocalForage.prototype.createInstance = function createInstance(options) {\n\t        return new LocalForage(options);\n\t    };\n\n\t    return LocalForage;\n\t}();\n\n\t// The actual localForage object that we expose as a module or via a\n\t// global. It's extended by pulling in one of our other libraries.\n\n\n\tvar localforage_js = new LocalForage();\n\n\tmodule.exports = localforage_js;\n\n\t},{\"3\":3}]},{},[4])(4)\n\t}); \n} (localforage$1));\n\nvar localforageExports = localforage$1.exports;\nvar localforage = /*@__PURE__*/getDefaultExportFromCjs(localforageExports);\n\nfunction uuid(a){return a?(a^Math.random()*16>>a/4).toString(16):([1e7]+-1e3+-4e3+-8e3+-1e11).replace(/[018]/g,uuid)}\r\n\r\n/**\r\n * regex used to validate AppObject external ids\r\n * (UUID form is 8 digits followed by three groups of 4 digits followed by a group of 12)\r\n */\r\nconst UUID_REGEX = /^[a-fA-F0-9]{8}-(?:[a-fA-F0-9]{4}-){3}[a-fA-F0-9]{12}$/;\r\n\r\nconst SAVE_STATE_LOCAL = 'SAVED_LOCALLY';\r\nconst SAVE_STATE_SERVER = 'SAVED_TO_SERVER';\r\n\r\nclass Model extends EventHarness {\r\n    /**\r\n     * @type {string}\r\n     */\r\n    _id;\r\n\r\n    /**\r\n     * set if the object has been posted to the server\r\n     *\r\n     * @type {boolean}\r\n     */\r\n    _savedRemotely = false;\r\n\r\n    static EVENT_SAVED_REMOTELY = 'savedremotely';\r\n\r\n    /**\r\n     *\r\n     * @param {Boolean} savedFlag\r\n     */\r\n    set savedRemotely(savedFlag) {\r\n        if (this._savedRemotely !== savedFlag) {\r\n            this._savedRemotely = !!savedFlag;\r\n\r\n            if (this._savedRemotely) {\r\n                this.fireEvent(Model.EVENT_SAVED_REMOTELY, {id : this.id});\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * set if the object has been added to a temporary store (e.g. indexedDb)\r\n     *\r\n     * @type {boolean}\r\n     */\r\n    _savedLocally = false;\r\n\r\n    /**\r\n     *\r\n     * @type {boolean}\r\n     */\r\n    deleted = false;\r\n\r\n    /**\r\n     * unix timestamp (seconds since epoch)\r\n     * Provided that the created stamp is < the modified stamp then the externally assigned creation stamp will be used\r\n     *\r\n     * @type {number}\r\n     */\r\n    createdStamp;\r\n\r\n    /**\r\n     * unix timestamp (seconds since epoch)\r\n     * modified stamp is generally server assigned - rather than using a potentially discrepant client clock\r\n     * this may increase synchrony and trust between distributed clients\r\n     *\r\n     * @type {number}\r\n     */\r\n    modifiedStamp;\r\n\r\n    /**\r\n     * DDb AppProject id\r\n     *\r\n     * @type {number}\r\n     */\r\n    projectId;\r\n\r\n    /**\r\n     * paired with isNew this marks objects that have never been edited\r\n     *\r\n     * @type {boolean}\r\n     */\r\n    isPristine = false;\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        this.createdStamp = Math.floor(Date.now() / 1000);\r\n    }\r\n\r\n    /**\r\n     * returns true if either remote or local copy is missing\r\n     *\r\n     * @returns {boolean}\r\n     */\r\n    unsaved() {\r\n        return !(this._savedLocally && this._savedRemotely);\r\n    }\r\n\r\n    /**\r\n     * string\r\n     */\r\n    get id() {\r\n        if (!this._id) {\r\n            this._id = uuid();\r\n        } else if (this._id === 'undefined') {\r\n            console.error(\"id is literal 'undefined', am forcing new id\");\r\n            this._id = uuid();\r\n        }\r\n\r\n        return this._id;\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param {string} newId\r\n     */\r\n    set id(newId) {\r\n        // only allow an id to be set if not present already\r\n\r\n        if (this._id && newId !== this._id) {\r\n            throw new Error(`Occurrence id has already been set, when trying to set new id '${newId}'.`);\r\n        }\r\n        this._id = newId;\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @type {Array.<function>}\r\n     * @private\r\n     */\r\n    static _tasks = [];\r\n\r\n    /**\r\n     * Add a post request to the queue\r\n     * Requests run in sequence.\r\n     * Returns a promise that resolves once the queued request completes\r\n     *\r\n     * The queue reduces the chance of requests being sent to the server out-of-order (which can lead to race conditions)\r\n     *\r\n     * @param formData\r\n     * @returns {Promise}\r\n     */\r\n    queuePost(formData) {\r\n        return new Promise((resolve, reject) => {\r\n            /**\r\n             * @returns {Promise}\r\n             */\r\n            const task = () => {\r\n                console.log({'posting form data': formData});\r\n                return this.post(formData).then(resolve, reject);\r\n            };\r\n\r\n            Model._tasks.push(task);\r\n\r\n            if (Model._tasks.length > 1) {\r\n                console.log(`Added post request to the queue.`);\r\n            } else {\r\n                console.log(`No pending tasks, starting post request immediately.`);\r\n                task().finally(Model._next);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @returns {Promise}\r\n     * @private\r\n     */\r\n    static _next() {\r\n        Model._tasks.shift(); // save is done\r\n\r\n        if (Model._tasks.length) {\r\n            // run the next task\r\n            console.log('Running the next task.');\r\n            return Model._tasks[0]().finally(Model._next);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * if not securely saved then makes a post to /save<object>\r\n     *\r\n     * this may be intercepted by a service worker, which could write the image to indexdb\r\n     * a successful save will result in a json response containing the uri from which the image may be retrieved\r\n     * and also the state of persistence (whether or not the image was intercepted by a service worker while offline)\r\n     *\r\n     * if saving fails then the expectation is that there is no service worker, in which case should attempt to write\r\n     * the image directly to indexdb\r\n     *\r\n     * must test indexdb for this eventuality after the save has returned\r\n     *\r\n     * @param {FormData} formData\r\n     * @returns {Promise}\r\n     */\r\n    post(formData) {\r\n        return fetch(this.SAVE_ENDPOINT, {\r\n            method: 'POST',\r\n            body: formData\r\n        }).then(response => {\r\n            if (response.ok) {\r\n                // need to find out whether this was a local store in indexedDb by the service worker\r\n                // or a server-side save\r\n\r\n                // to do that need to decode the json response\r\n                // which can only be done once, so need to clone first\r\n                const clonedResponse = response.clone();\r\n                return clonedResponse.json().then((responseData) => {\r\n                    /** @param {{saveState : string, created : number, modified : number}} responseData */\r\n\r\n                    console.log({'returned to client after save' : responseData});\r\n\r\n                    switch (responseData.saveState) {\r\n                        case SAVE_STATE_SERVER:\r\n                            this._savedLocally = true;\r\n                            //this._savedRemotely = true;\r\n                            this.savedRemotely = true;\r\n                            break;\r\n\r\n                        case SAVE_STATE_LOCAL:\r\n                            this._savedLocally = true;\r\n                            //this._savedRemotely = false;\r\n                            this.savedRemotely = false;\r\n                            break;\r\n\r\n                        default:\r\n                            console.log(`Unrecognised save state '${responseData.saveState}'`);\r\n                    }\r\n\r\n                    this.createdStamp = parseInt(responseData.created, 10);\r\n                    this.modifiedStamp = parseInt(responseData.modified, 10);\r\n\r\n                    // return the json version of the original response as a promise\r\n                    return response.json(); // assign appropriate JSON type to the response\r\n                });\r\n            } else {\r\n                // try instead to write the data to local storage\r\n\r\n                console.log('Save failed, presumably service worker is missing and there is no network connection. Should write to IndexedDb here.');\r\n                return Promise.reject('IndexedDb storage not yet implemented');\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param {string} id\r\n     * @param {(Survey|Occurrence|OccurrenceImage)} modelObject\r\n     * @returns {Promise}\r\n     */\r\n    static retrieveFromLocal(id, modelObject) {\r\n        return localforage.getItem(`${modelObject.TYPE}.${id}`)\r\n            .then((descriptor) => {\r\n                if (descriptor) {\r\n                    modelObject.id = id;\r\n                    modelObject._parseDescriptor(descriptor);\r\n\r\n                    return modelObject;\r\n                } else {\r\n                    return Promise.reject(`Failed to retrieve ${modelObject.TYPE}.${id} locally`);\r\n                }\r\n            });\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param {{id : string, saveState: string, attributes: Object.<string, *>, deleted: boolean|string, created: (number|string), modified: (number|string), projectId: (number|string)}} descriptor\r\n     */\r\n    _parseDescriptor(descriptor) {\r\n        this._parseAttributes(descriptor.attributes);\r\n        this._parseSavedState(descriptor.saveState);\r\n        this.deleted = (descriptor.deleted === true) || (descriptor.deleted === 'true'); // cast stringified boolean to true boolean\r\n        this.createdStamp = parseInt(descriptor.created, 10);\r\n        //this.modifiedStamp = descriptor.modified ? parseInt(descriptor.modified, 10) : this.createdStamp; // avoids NaN\r\n        this.modifiedStamp = descriptor.modified ? parseInt(descriptor.modified, 10) : 0; // avoids NaN\r\n        this.projectId = parseInt(descriptor.projectId, 10);\r\n\r\n        if (descriptor.userId) {\r\n            this.userId = descriptor.userId;\r\n        }\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param {Object.<string, {}>|string|Array} attributes\r\n     */\r\n    _parseAttributes(attributes) {\r\n        if (typeof attributes === 'string') {\r\n            attributes = JSON.parse(attributes);\r\n        }\r\n\r\n        if (Array.isArray(attributes)) {\r\n            // problematic bug, where empty attributes come back as an array rather than as an object\r\n\r\n            console.log('Attributes were spuriously represented as an array rather than as an empty object');\r\n            this.attributes = {};\r\n        } else {\r\n            this.attributes = attributes;\r\n        }\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param {string} saveState\r\n     */\r\n    _parseSavedState(saveState) {\r\n        switch (saveState) {\r\n            case SAVE_STATE_LOCAL:\r\n                //this._savedRemotely = false;\r\n                this.savedRemotely = false;\r\n                this._savedLocally = true;\r\n                break;\r\n\r\n            case SAVE_STATE_SERVER:\r\n                //this._savedRemotely = true;\r\n                this.savedRemotely = true;\r\n                this._savedLocally = true;\r\n                break;\r\n\r\n            default:\r\n                throw new Error(`Unrecognised saved state '${saveState}`);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * update modified stamp to current time\r\n     */\r\n    touch() {\r\n        this.modifiedStamp = Math.floor(Date.now() / 1000);\r\n\r\n        if (this.isPristine) {\r\n            this.isPristine = false;\r\n            this.createdStamp = this.modifiedStamp;\r\n        }\r\n\r\n        this._savedLocally = false;\r\n        this.savedRemotely = false;\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param {{}} formSectionProperties\r\n     * @return {{requiredFieldsPresent: boolean, validity: Object.<string, boolean>}}\r\n     */\r\n    evaluateCompletionStatus(formSectionProperties) {\r\n        const validity = {};\r\n        let requiredFieldsPresent = true;\r\n\r\n        for (let key in formSectionProperties) {\r\n            if (formSectionProperties.hasOwnProperty(key)) {\r\n                let property = formSectionProperties[key];\r\n\r\n                validity[key] = property.validator ?\r\n                    property.validator(key, property, this.attributes)\r\n                    :\r\n                    property.field.isValid(key, property, this.attributes);\r\n\r\n                if (null !== validity[key]) {\r\n                    // validity can be 'null' in which case field was optional and not assessed\r\n                    requiredFieldsPresent = requiredFieldsPresent && validity[key];\r\n                }\r\n            }\r\n        }\r\n\r\n        return {\r\n            requiredFieldsPresent,\r\n            validity\r\n        };\r\n    }\r\n}\n\n/**\r\n *\r\n * @param text\r\n * @returns {string}\r\n */\r\nfunction escapeHTML(text) {\r\n    try {\r\n        // IE (even v 11) sometimes fails here with 'Unknown runtime error', see http://blog.rakeshpai.me/2007/02/ies-unknown-runtime-error-when-using.html\r\n        const textArea = document.createElement('textarea');\r\n        textArea.innerHTML = text;\r\n        return textArea.innerHTML.replace(/\"/g, '&quot;');\r\n    } catch (e) {\r\n        const pre = document.createElement('pre');\r\n        pre.appendChild(document.createTextNode(text));\r\n        return pre.innerHTML.replace(/\"/g, '&quot;');\r\n    }\r\n}\n\n// a Survey captures the currentSurvey meta-data\r\n\r\nclass Survey extends Model {\r\n\r\n    /**\r\n     * fired from Survey when the object's contents have been modified\r\n     *\r\n     * parameter is {surveyId : string}\r\n     *\r\n     * @type {string}\r\n     */\r\n    static EVENT_MODIFIED = 'modified';\r\n\r\n    /**\r\n     * fired on Survey when one of its occurrences has been modified, added, deleted or reloaded\r\n     *\r\n     * no parameters\r\n     *\r\n     * @type {string}\r\n     */\r\n    static EVENT_OCCURRENCES_CHANGED = 'occurrenceschanged';\r\n\r\n    SAVE_ENDPOINT = '/savesurvey.php';\r\n\r\n    TYPE = 'survey';\r\n\r\n    /**\r\n     *\r\n     * @type {Object.<string, *>}\r\n     */\r\n    attributes = {\r\n\r\n    };\r\n\r\n    /**\r\n     * if set then provide default values (e.g. GPS look-up of current geo-reference)\r\n     *\r\n     * @type {boolean}\r\n     */\r\n    isNew = false;\r\n\r\n    /**\r\n     * kludge to flag once the App singleton has set up a listener for changes on the survey\r\n     * @type {boolean}\r\n     */\r\n    hasAppModifiedListener = false;\r\n\r\n    /**\r\n     *\r\n     * @type {string}\r\n     */\r\n    userId = '';\r\n\r\n    /**\r\n     *\r\n     * @returns {({rawString: string, precision: number|null, source: string|null, gridRef: string, latLng: ({lat: number, lng: number}|null)}|null)}\r\n     */\r\n    get geoReference() {\r\n        return this.attributes.georef || {\r\n            gridRef: '',\r\n            rawString: '', // what was provided by the user to generate this grid-ref (might be a postcode or placename)\r\n            source: 'unknown', //TextGeorefField.GEOREF_SOURCE_UNKNOWN,\r\n            latLng: null,\r\n            precision: null\r\n        };\r\n    };\r\n\r\n    /**\r\n     * Get the tetrad or monad level square from the survey geo-reference\r\n     *\r\n     * @returns {({rawString: string, precision: number|null, source: string|null, gridRef: string, latLng: ({lat: number, lng: number}|null)}|null)}\r\n     */\r\n    get squareReference() {\r\n        if (this.attributes.georef && this.attributes.georef.gridRef && this.attributes.georef.precision <= 2000) {\r\n            let newRef;\r\n\r\n            if (this.attributes.georef.precision === 2000 || this.attributes.georef.precision === 1000) {\r\n                newRef = this.attributes.georef.gridRef;\r\n            } else {\r\n                const context = this.getGeoContext();\r\n                newRef = context.monad || context.tetrad;\r\n            }\r\n\r\n            return {\r\n                gridRef: newRef,\r\n                rawString: newRef,\r\n                source: 'unknown',\r\n                latLng: null,\r\n                precision: null\r\n            }\r\n        } else {\r\n            return {\r\n                gridRef: '',\r\n                rawString: '', // what was provided by the user to generate this grid-ref (might be a postcode or placename)\r\n                source: 'unknown', //TextGeorefField.GEOREF_SOURCE_UNKNOWN,\r\n                latLng: null,\r\n                precision: null\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @returns {string}\r\n     */\r\n    get date() {\r\n        return this.attributes.date || '';\r\n    }\r\n\r\n    /**\r\n     * @returns {boolean}\r\n     */\r\n    isToday() {\r\n        //const date = this.date;\r\n        //const now = (new Date).toJSON().slice(0,10);\r\n\r\n        //console.log(`Date matching '${date}' with '${now}'`);\r\n        return this.date === (new Date).toJSON().slice(0,10);\r\n    }\r\n\r\n    get place() {\r\n        return this.attributes.place || '';\r\n    }\r\n\r\n    /**\r\n     * called after the form has changed, before the values have been read back in to the occurrence\r\n     *\r\n     * @param {{form: SurveyForm}} params\r\n     */\r\n    formChangedHandler(params) {\r\n        console.log('Survey change handler invoked.');\r\n\r\n        // read new values\r\n        // then fire its own change event (Occurrence.EVENT_MODIFIED)\r\n        params.form.updateModelFromContent();\r\n\r\n        console.log('Survey calling conditional validation.');\r\n\r\n        // refresh the form's validation state\r\n        params.form.conditionallyValidateForm();\r\n\r\n        this.touch();\r\n        this.fireEvent(Survey.EVENT_MODIFIED, {surveyId : this.id});\r\n    }\r\n\r\n    /**\r\n     * Used for special-case setting of a custom attribute\r\n     * (i.e. not usually one linked to a form)\r\n     * e.g. used for updating the NYPH null-list flag\r\n     *\r\n     * @param attributeName\r\n     * @param value\r\n     */\r\n    setAttribute(attributeName, value) {\r\n        if (this.attributes[attributeName] !== value) {\r\n            this.attributes[attributeName] = value;\r\n\r\n            this.touch();\r\n            this.fireEvent(Survey.EVENT_MODIFIED, {surveyId : this.id});\r\n        }\r\n    }\r\n\r\n    /**\r\n     * returns interpreted grid-ref / vc summary, used to look-up meta-data for the taxon list\r\n     *\r\n     * @return {{\r\n     *     hectad : string,\r\n     *     tetrad : string,\r\n     *     monad : string,\r\n     *     country : string,\r\n     *     vc : int[]\r\n     * }}\r\n     */\r\n    getGeoContext() {\r\n        const geoRef = this.geoReference;\r\n\r\n        const result = {};\r\n\r\n        if (this.attributes.vc?.selection) {\r\n            result.vc = [...this.attributes.vc.selection]; // clone rather than reference the VC selection\r\n        } else {\r\n            result.vc = [];\r\n        }\r\n\r\n        if (geoRef?.gridRef) {\r\n            const gridRef = GridRef.from_string(geoRef.gridRef);\r\n\r\n            if (gridRef) {\r\n                if (gridRef.length <= 1000) {\r\n                    result.monad = gridRef.gridCoords.to_gridref(1000);\r\n                }\r\n\r\n                if (gridRef.length <= 2000) {\r\n                    result.tetrad = gridRef.gridCoords.to_gridref(2000);\r\n                }\r\n\r\n                result.country = gridRef.country;\r\n            }\r\n\r\n            result.hectad = gridRef.gridCoords.to_gridref(10000);\r\n        }\r\n\r\n        if (this.attributes.vc) ;\r\n\r\n        return {...{hectad : '', tetrad : '', monad : '', country : '', vc : []}, ...result};\r\n    }\r\n\r\n    /**\r\n     * if not securely saved then makes a post to /savesurvey.php\r\n     *\r\n     * this may be intercepted by a service worker, which could write the image to indexdb\r\n     * a successful save will result in a json response containing the uri from which the object may be retrieved\r\n     * and also the state of persistence (whether or not the object was intercepted by a service worker while offline)\r\n     *\r\n     * if saving fails then the expectation is that there is no service worker, in which case should attempt to write\r\n     * the object directly to indexdb\r\n     *\r\n     * must test indexdb for this eventuality after the save has returned\r\n     *\r\n     * @returns {Promise}\r\n     */\r\n    save() {\r\n        if (!this._savedRemotely) {\r\n            const formData = new FormData;\r\n\r\n            formData.append('type', this.TYPE);\r\n            formData.append('surveyId', this.id);\r\n            formData.append('id', this.id);\r\n            formData.append('projectId', this.projectId.toString());\r\n            formData.append('attributes', JSON.stringify(this.attributes));\r\n            formData.append('deleted', this.deleted.toString());\r\n            formData.append('created', this.createdStamp?.toString() || '');\r\n\r\n            if (this.userId) {\r\n                formData.append('userId', this.userId);\r\n            }\r\n\r\n            console.log('queueing survey post');\r\n            return this.queuePost(formData);\r\n        } else {\r\n            return Promise.reject(`${this.id} has already been saved.`);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @param {{summarySquarePrecision : number, summarizeTetrad : boolean}} options\r\n     * @returns {string} an html-safe string based on the locality and creation date\r\n     */\r\n    generateSurveyName(options = {\r\n        summarySquarePrecision : 1000,\r\n        summarizeTetrad : false,\r\n    }) {\r\n\r\n\r\n        if (this.attributes.casual) {\r\n            // special-case treatment of surveys with 'casual' attribute (which won't have a locality or date as part of the survey)\r\n\r\n            return this.attributes.surveyName ?\r\n                escapeHTML(this.attributes.surveyName)\r\n                :\r\n                `Data-set created on ${(new Date(this.createdStamp * 1000)).toString()}`\r\n        } else {\r\n            let place;\r\n\r\n            if (this.attributes.place) {\r\n                let summaryGridRef;\r\n\r\n                if (options.summarySquarePrecision && this.attributes.georef && this.attributes.georef.gridRef) {\r\n                    // '<' replacement used simplistically to sanitize against script injection\r\n                    const gridRef = GridRef.from_string(this.attributes.georef.gridRef.replace(/[<&]/g, ''));\r\n\r\n                    summaryGridRef = ` ${gridRef?.gridCoords?.to_gridref(gridRef.length <= options.summarySquarePrecision ? options.summarySquarePrecision : gridRef.length) || this.attributes.georef.gridRef}`;\r\n                } else {\r\n                    summaryGridRef = '';\r\n                }\r\n\r\n                place = `${this.attributes.place}${summaryGridRef}`;\r\n            } else if (this.attributes.georef && this.attributes.georef.gridRef) {\r\n                place = this.attributes.georef.gridRef;\r\n            } else {\r\n                place = '(unlocalized)';\r\n            }\r\n\r\n            const userDate = this.date;\r\n            let dateString;\r\n\r\n            if (userDate) {\r\n                dateString = userDate;\r\n            } else {\r\n                const createdDate = new Date(this.createdStamp * 1000);\r\n\r\n                try {\r\n                    // 'default' locale fails on Edge\r\n                    dateString = createdDate.toLocaleString('default', {\r\n                        year: 'numeric',\r\n                        month: 'long',\r\n                        day: 'numeric'\r\n                    });\r\n                } catch (e) {\r\n                    dateString = createdDate.toLocaleString('en-GB', {year: 'numeric', month: 'long', day: 'numeric'});\r\n                }\r\n            }\r\n\r\n            return `${escapeHTML(place)} ${dateString}`;\r\n        }\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @type {Set<string>}\r\n     *\r\n     */\r\n    extantOccurrenceKeys = new Set();\r\n\r\n    /**\r\n     * @todo need to exclude deleted records\r\n     * @returns {number}\r\n     *\r\n     */\r\n    countRecords() {\r\n        return this.extantOccurrenceKeys.size;\r\n    }\r\n\r\n    /**\r\n     * @returns {Survey}\r\n     */\r\n    duplicate(newAttributes = {}, properties = {}) {\r\n        const newSurvey = new Survey();\r\n\r\n        newSurvey.attributes = Object.assign(structuredClone(this.attributes), newAttributes);\r\n        newSurvey.userId = properties.hasOwnProperty('userId') ? properties.userId : this.userId;\r\n        newSurvey.isPristine = true;\r\n        newSurvey.isNew = false; // don't want GPS override of geo-ref\r\n        newSurvey._savedLocally = false;\r\n        newSurvey._savedRemotely = false;\r\n        newSurvey.deleted = false;\r\n        newSurvey.projectId = this.projectId;\r\n\r\n        return newSurvey;\r\n    }\r\n}\n\n/**\r\n *\r\n */\r\nclass InternalAppError extends Error {\r\n\r\n}\n\nclass TaxonError extends Error {\r\n\r\n}\n\nclass Taxon {\r\n    /**\r\n     * @typedef RawTaxon\r\n     * @type {array}\r\n     * @property {string} 0 - nameString\r\n     * @property {(string|number)} 1 - canonical\r\n     * @property {string} 2 hybridCanonical, raw entry is 0/undefined if canonical == hybridCanonical\r\n     * @property {(string|number)} 3 acceptedEntityId or 0/undefined if name is accepted\r\n     * @property {string} 4 qualifier\r\n     * @property {string} 5 authority\r\n     * @property {string} 6 vernacular\r\n     * @property {string} 7 vernacularRoot\r\n     * @property {number} 8 used\r\n     * @property {number} 9 sortOrder\r\n     * @property {Array.<string>} 10 parentIds\r\n     * @property {number} [11] notForEntry (1 === not for entry)\r\n     * @property {string} [12] GB national status\r\n     * @property {string} [13] IE national status\r\n     * @property {string} [14] CI national status\r\n     * @property {string} [15] GB rare/scarce conservation status\r\n     * @property {string} [16] IE rare/scarce conservation status\r\n     * @property {{}} 17 Presence in grid-squares (top-level object is keyed by grid-ref)\r\n     * @property {{}} 18 Presence on rpr\r\n     */\r\n\r\n    static GR_PRESENCE_KEY = 17;\r\n    static RPR_KEY = 18;\r\n\r\n    /**\r\n     *\r\n     * @type {Object.<string, RawTaxon>}\r\n     */\r\n    static rawTaxa;\r\n\r\n    /**\r\n     * @type {string}\r\n     */\r\n    id;\r\n\r\n    /**\r\n     *\r\n     * @type {string}\r\n     */\r\n    nameString = '';\r\n\r\n    /**\r\n     *\r\n     * @type {string}\r\n     */\r\n    canonical = '';\r\n\r\n    /**\r\n     *\r\n     * @type {string}\r\n     */\r\n    hybridCanonical = '';\r\n\r\n    /**\r\n     *\r\n     * @type {string}\r\n     */\r\n    acceptedEntityId = '';\r\n\r\n    /**\r\n     *\r\n     * @type {string}\r\n     */\r\n    qualifier = '';\r\n\r\n    /**\r\n     *\r\n     * @type {string}\r\n     */\r\n    authority = '';\r\n\r\n    /**\r\n     *\r\n     * @type {string}\r\n     */\r\n    vernacular = '';\r\n\r\n    /**\r\n     *\r\n     * @type {string}\r\n     */\r\n    vernacularRoot = '';\r\n\r\n    /**\r\n     * if set then the vernacular name should not be allowed for data entry\r\n     *\r\n     * @type {boolean}\r\n     */\r\n    badVernacular = false;\r\n\r\n    /**\r\n     * @type {boolean}\r\n     */\r\n    used;\r\n\r\n    /**\r\n     * @type {number}\r\n     */\r\n    sortOrder;\r\n\r\n    /**\r\n     *\r\n     * @type {Array.<string>}\r\n     */\r\n    parentIds = [];\r\n\r\n    /**\r\n     *\r\n     * @type {{CI: null|string, GB: null|string, IE: null|string}}\r\n     */\r\n    nationalStatus = {\r\n        GB : null,\r\n        IE : null,\r\n        CI : null\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @type {{GB: null|string, IE: null|string}}\r\n     */\r\n    rareScarceStatus = {\r\n        GB : null,\r\n        IE : null\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @type {{number, (string|true)}}\r\n     */\r\n    rprStatus = {}\r\n\r\n    /**\r\n     *\r\n     * @type {{current : number, previous : number, [year] : number}|null}\r\n     */\r\n    occurrenceCoverage = null;\r\n\r\n    /**\r\n     *\r\n     * @type {boolean}\r\n     */\r\n    static showVernacular = true;\r\n\r\n    static setTaxa(taxa) {\r\n        Taxon.rawTaxa = taxa;\r\n    }\r\n\r\n    static initialiseTaxa(taxa, sourceUrl) {\r\n        Taxon.rawTaxa = taxa;\r\n\r\n        if ((taxa.stamp + (3600 * 24 * 7)) < (Date.now() / 1000)) {\r\n            console.log(`Taxon list may be stale (stamp is ${taxa.stamp}), prompting re-cache.`);\r\n            navigator.serviceWorker.ready.then((registration) => {\r\n                registration.active.postMessage(\r\n                    {\r\n                        action: 'recache',\r\n                        url: sourceUrl\r\n                    }\r\n                );\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param {string} id\r\n     * @returns {Taxon}\r\n     * @throws {TaxonError}\r\n     */\r\n    static fromId (id) {\r\n        if (!Taxon.rawTaxa) {\r\n            throw new TaxonError(`Taxon.fromId() called before taxon list has been initialized.`);\r\n        }\r\n\r\n        if (!Taxon.rawTaxa.hasOwnProperty(id)) {\r\n            throw new TaxonError(`Taxon id '${id}' not found.`);\r\n        }\r\n\r\n        const raw = Taxon.rawTaxa[id];\r\n\r\n        const taxon = new Taxon;\r\n\r\n        taxon.id = id;\r\n        taxon.nameString = raw[0];\r\n        taxon.canonical = raw[1] || raw[0]; // raw entry is blank if namesString == canonical\r\n        taxon.hybridCanonical = raw[2] || taxon.canonical; // raw entry is blank if canonical == hybridCanonical\r\n        taxon.acceptedEntityId = raw[3] || id;\r\n        taxon.qualifier = raw[4] || '';\r\n        taxon.authority = raw[5] || '';\r\n        taxon.vernacular = raw[6] || '';\r\n        taxon.vernacularRoot = raw[7] || '';\r\n        taxon.used = !!raw[8];\r\n        taxon.sortOrder = raw[9];\r\n        taxon.parentIds = raw[10];\r\n        taxon.badVernacular = !!raw[11];\r\n\r\n        taxon.nationalStatus = {\r\n            GB: raw[12] || null,\r\n            IE: raw[13] || null,\r\n            CI: raw[14] || null\r\n        };\r\n\r\n        taxon.rareScarceStatus = {\r\n            GB: raw[15] || null,\r\n            IE: raw[16] || null\r\n        };\r\n\r\n        taxon.rprStatus = raw[Taxon.RPR_KEY] || null;\r\n\r\n        taxon.occurrenceCoverage = raw[Taxon.GR_PRESENCE_KEY] || null;\r\n\r\n        return taxon;\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param {boolean} vernacularMatched\r\n     * @returns {string}\r\n     */\r\n    formattedHTML(vernacularMatched) {\r\n        let acceptedTaxon;\r\n        if (this.id !== this.acceptedEntityId) {\r\n            acceptedTaxon = Taxon.fromId(this.acceptedEntityId);\r\n        }\r\n\r\n        if (Taxon.showVernacular) {\r\n            if (vernacularMatched) {\r\n                return (acceptedTaxon) ?\r\n                    `<q class=\"taxon-vernacular\">${escapeHTML(this.vernacular)}</q><wbr> <span class=\"italictaxon\">${this.nameString}${this.qualifier ? ` <span class=\"taxon-qualifier\">${this.qualifier}</span>` : ''}</span> <span class=\"taxauthority\">${escapeHTML(this.authority)}</span>` +\r\n                    ` = <span class=\"italictaxon\">${acceptedTaxon.nameString}${acceptedTaxon.qualifier ? ` <span class=\"taxon-qualifier\">${acceptedTaxon.qualifier}</span>` : ''}</span> <span class=\"taxauthority\">${escapeHTML(acceptedTaxon.authority)}</span>`\r\n                    :\r\n                    `<q class=\"taxon-vernacular\">${escapeHTML(this.vernacular)}</q><wbr> <span class=\"italictaxon\">${this.nameString}${this.qualifier ? ` <span class=\"taxon-qualifier\">${this.qualifier}</span>` : ''}</span> <span class=\"taxauthority\">${escapeHTML(this.authority)}</span>`\r\n                    ;\r\n            } else {\r\n                return (acceptedTaxon) ?\r\n                    `<span class=\"italictaxon\">${this.nameString}${this.qualifier ? ` <span class=\"taxon-qualifier\">${this.qualifier}</span>` : ''}</span> <span class=\"taxauthority\">${this.authority}</span>${this.vernacular ? ` <wbr><q class=\"taxon-vernacular\">${escapeHTML(this.vernacular)}</q>` : ''\r\n                    } = <span class=\"italictaxon\">${acceptedTaxon.nameString}${acceptedTaxon.qualifier ? ` <span class=\"taxon-qualifier\">${acceptedTaxon.qualifier}</span>` : ''}</span> <span class=\"taxauthority\">${escapeHTML(acceptedTaxon.authority)}</span>`\r\n                    :\r\n                    `<span class=\"italictaxon\">${this.nameString}${this.qualifier ? ` <span class=\"taxon-qualifier\">${this.qualifier}</span>` : ''}</span> <span class=\"taxauthority\">${escapeHTML(this.authority)}</span>${this.vernacular ? ` <wbr><q class=\"taxon-vernacular\">${escapeHTML(this.vernacular)}</q>` : ''}`\r\n                    ;\r\n            }\r\n        } else {\r\n            return (acceptedTaxon) ?\r\n                `<span class=\"italictaxon\">${this.nameString}${this.qualifier ? ` <span class=\"taxon-qualifier\">${this.qualifier}</span>` : ''}</span> <span class=\"taxauthority\">${this.authority}</span>` +\r\n                ` = <span class=\"italictaxon\">${acceptedTaxon.nameString}${acceptedTaxon.qualifier ? ` <span class=\"taxon-qualifier\">${acceptedTaxon.qualifier}</span>` : ''}</span> <span class=\"taxauthority\">${escapeHTML(acceptedTaxon.authority)}</span>`\r\n                :\r\n                `<span class=\"italictaxon\">${this.nameString}${this.qualifier ? ` <span class=\"taxon-qualifier\">${this.qualifier}</span>` : ''}</span> <span class=\"taxauthority\">${escapeHTML(this.authority)}</span>`\r\n                ;\r\n        }\r\n    }\r\n}\n\nclass Occurrence extends Model {\r\n\r\n    /**\r\n     *\r\n     * @type {Object.<string, *>}\r\n     */\r\n    attributes = {\r\n        // taxon: {\r\n        //     taxonId: '',\r\n        //     taxonName: '',\r\n        //     vernacularMatch: false\r\n        // }\r\n    };\r\n\r\n    /**\r\n     *\r\n     * @type {string}\r\n     */\r\n    userId = '';\r\n\r\n    // /**\r\n    //  * set if the image has been posted to the server\r\n    //  * (a local copy might still exist, which may have been reduced to thumbnail resolution)\r\n    //  *\r\n    //  * @type {boolean}\r\n    //  */\r\n    // _savedRemotely = false;\r\n\r\n    // /**\r\n    //  * set if the image has been added to a temporary store (e.g. indexedDb)\r\n    //  *\r\n    //  * @type {boolean}\r\n    //  */\r\n    // _savedLocally = false;\r\n\r\n    SAVE_ENDPOINT = '/saveoccurrence.php';\r\n\r\n    TYPE = 'occurrence';\r\n\r\n    /**\r\n     * fired from Occurrence when the object's contents have been modified\r\n     *\r\n     * @type {string}\r\n     */\r\n    static EVENT_MODIFIED = 'modified';\r\n\r\n    /**\r\n     * set if this is a new entry (before user has moved on to the next entry)\r\n     * influences whether form validation errors are displayed\r\n     *\r\n     * @type {boolean}\r\n     */\r\n    isNew = false;\r\n\r\n    /**\r\n     *\r\n     * @returns {(Taxon|null)} returns null for unmatched taxa specified by name\r\n     */\r\n    get taxon() {\r\n        return this.attributes.taxon && this.attributes.taxon.taxonId ? Taxon.fromId(this.attributes.taxon.taxonId) : null;\r\n    };\r\n\r\n    // /**\r\n    //  *\r\n    //  * @param {OccurrenceForm} form\r\n    //  * @returns {OccurrenceForm}\r\n    //  */\r\n    // setForm(form) {\r\n    //     form.addListener(Form.CHANGE_EVENT, this.formChangedHandler.bind(this));\r\n    //\r\n    //     if (!this.isNew) {\r\n    //         form.liveValidation = true;\r\n    //     }\r\n    //     return form;\r\n    // }\r\n\r\n    /**\r\n     * called after the form has changed, before the values have been read back in to the occurrence\r\n     *\r\n     * @param {{form: Form}} params\r\n     */\r\n    formChangedHandler(params) {\r\n        console.log('Occurrence change handler invoked.');\r\n\r\n        // read new values\r\n        // then fire its own change event (Occurrence.EVENT_MODIFIED)\r\n        params.form.updateModelFromContent();\r\n\r\n        // refresh the form's validation state\r\n        params.form.conditionallyValidateForm();\r\n\r\n        this.touch();\r\n        this.fireEvent(Occurrence.EVENT_MODIFIED, {occurrenceId : this.id});\r\n    }\r\n\r\n    delete() {\r\n        if (!this.deleted) {\r\n            this.touch();\r\n            this.deleted = true;\r\n\r\n            this.fireEvent(Occurrence.EVENT_MODIFIED, {occurrenceId : this.id});\r\n        }\r\n    }\r\n\r\n    /**\r\n     * if not securely saved then makes a post to /saveoccurrence.php\r\n     *\r\n     * this may be intercepted by a service worker, which could write the image to indexdb\r\n     * a successful save will result in a json response containing the uri from which the image may be retrieved\r\n     * and also the state of persistence (whether or not the image was intercepted by a service worker while offline)\r\n     *\r\n     * if saving fails then the expectation is that there is no service worker, in which case should attempt to write\r\n     * the image directly to indexdb\r\n     *\r\n     * must test indexdb for this eventuality after the save has returned\r\n     *\r\n     * @param {string} surveyId\r\n     * @returns {Promise}\r\n     */\r\n    save(surveyId) {\r\n        if (!this._savedRemotely) {\r\n            const formData = new FormData;\r\n\r\n            if (!surveyId && this.surveyId) {\r\n                surveyId = this.surveyId;\r\n            }\r\n\r\n            formData.append('type', this.TYPE);\r\n            formData.append('surveyId', surveyId);\r\n            formData.append('occurrenceId', this.id);\r\n            formData.append('id', this.id);\r\n            formData.append('projectId', this.projectId.toString());\r\n            formData.append('attributes', JSON.stringify(this.attributes));\r\n            formData.append('deleted', this.deleted.toString());\r\n            formData.append('created', this.createdStamp?.toString() || '');\r\n            formData.append('modified', this.modifiedStamp?.toString() || '');\r\n\r\n            if (this.userId) {\r\n                formData.append('userId', this.userId);\r\n            }\r\n\r\n            console.log('queueing occurrence post');\r\n            return this.queuePost(formData);\r\n        } else {\r\n            return Promise.reject(`${this.id} has already been saved.`);\r\n        }\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param {{id : string, saveState: string, attributes: Object.<string, *>, deleted: boolean|string, created: number, modified: number, projectId: number, surveyId: string}} descriptor\r\n     */\r\n    _parseDescriptor(descriptor) {\r\n        super._parseDescriptor(descriptor);\r\n        this.surveyId = descriptor.surveyId;\r\n    }\r\n}\n\nclass OccurrenceImage extends Model {\r\n\r\n    /**\r\n     * raw file object retrieved from a file upload image element\r\n     *\r\n     * @type {File}\r\n     */\r\n    file;\r\n\r\n    /**\r\n     *\r\n     * @type {Map.<string, OccurrenceImage>}\r\n     */\r\n    static imageCache = new Map;\r\n\r\n    TYPE = 'image';\r\n\r\n    occurrenceId = '';\r\n\r\n    surveyId = '';\r\n\r\n    projectId = '';\r\n\r\n    /**\r\n     * fetches a url of the image\r\n     * this might be a remote url (or one intercepted by a service worker)\r\n     * or a data url of the raw image, (not yet uploaded)\r\n     *\r\n     * @returns {string}\r\n     */\r\n    getUrl () {\r\n\r\n    }\r\n\r\n    SAVE_ENDPOINT = '/saveimage.php';\r\n\r\n    /**\r\n     *\r\n     * @param {File} file\r\n     */\r\n    static fromFile(file) {\r\n        const image = new OccurrenceImage;\r\n        image.file = file;\r\n\r\n        return image;\r\n    }\r\n\r\n    /**\r\n     * if not securely saved then makes a post to /saveimage.php\r\n     *\r\n     * this may be intercepted by a service worker, which could write the image to indexdb\r\n     * a successful save will result in a json response containing the uri from which the image may be retrieved\r\n     * and also the state of persistence (whether or not the image was intercepted by a service worker while offline)\r\n     *\r\n     * if saving fails then the expectation is that there is no service worker, in which case should attempt to write\r\n     * the image directly to indexdb\r\n     *\r\n     * must test indexdb for this eventuality after the save has returned\r\n     *\r\n     * @param {string} surveyId\r\n     * @param {string} occurrenceId\r\n     * @param {number} projectId\r\n     * @returns {Promise}\r\n     */\r\n    save(surveyId, occurrenceId, projectId, context = 'occurrence') {\r\n        if (surveyId) {\r\n            this.surveyId = surveyId;\r\n        }\r\n\r\n        if (projectId) {\r\n            this.projectId = projectId;\r\n        }\r\n\r\n        if (occurrenceId) {\r\n            this.occurrenceId = occurrenceId;\r\n        }\r\n\r\n        if (!this._savedRemotely) {\r\n            const formData = new FormData;\r\n            formData.append('type', this.TYPE);\r\n            formData.append('surveyId', surveyId ? surveyId : (this.surveyId ? this.surveyId : '')); // avoid 'undefined'\r\n            formData.append('projectId', projectId ? projectId.toString() : '');\r\n            formData.append('imageId', this.id);\r\n            formData.append('id', this.id);\r\n            formData.append('image', this.file);\r\n            formData.append('deleted', this.deleted.toString());\r\n            formData.append('created', this.createdStamp?.toString() || '');\r\n            formData.append('modified', this.modifiedStamp?.toString() || '');\r\n\r\n            if (context === 'survey') {\r\n                formData.append('context', context);\r\n            } else {\r\n                formData.append('occurrenceId', occurrenceId ? occurrenceId : this.occurrenceId); // avoid 'undefined'\r\n            }\r\n\r\n            console.log(`queueing image post, image id ${this.id}`);\r\n            return this.queuePost(formData);\r\n        } else {\r\n            return Promise.reject(`${this.id} has already been saved.`);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * fired from Occurrence when the object's contents have been modified\r\n     *\r\n     * @type {string}\r\n     */\r\n    static EVENT_MODIFIED = 'modified';\r\n\r\n    /**\r\n     *\r\n     * @param id\r\n     * @returns {OccurrenceImage}\r\n     */\r\n    static placeholder(id) {\r\n        let placeholderObject = new OccurrenceImage;\r\n        placeholderObject._id = id;\r\n\r\n        OccurrenceImage.imageCache.set(id, placeholderObject);\r\n\r\n        return placeholderObject;\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param {{surveyId: string, occurrenceId: string, [image]: File}} descriptor\r\n     * @private\r\n     */\r\n    _parseDescriptor(descriptor) {\r\n        super._parseDescriptor(descriptor);\r\n        this.surveyId = descriptor.surveyId; // note lower case\r\n        this.occurrenceId = descriptor.occurrenceId; // note lower case\r\n        this.file = descriptor.image;\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param {string} id\r\n     * @param {(number|null)} width\r\n     * @param {(number|null)} height\r\n     * @param {{[className] : string}} [attributes]\r\n     * @return {string}\r\n     */\r\n    static imageLink(id, width, height, attributes) {\r\n        width = width || 0;\r\n        height = height || 0;\r\n\r\n        let attributesString = '';\r\n\r\n        if (attributes.className) {\r\n            attributesString += ` class=\"${attributes.className}\"`;\r\n        }\r\n\r\n        const renderingConstraint = (width > height) ?\r\n            `width=\"${width}\"`\r\n            :\r\n            `height=\"${height}\"`;\r\n\r\n        return `<picture><source srcset=\"/image.php?imageid=${id}&amp;height=128&amp;format=webp\" type=\"image/webp\"><img${attributesString} src=\"/image.php?imageid=${id}&amp;width=${width}&amp;height=${height}&amp;format=jpeg\" ${renderingConstraint} alt=\"photo\"></picture>`;\r\n    }\r\n}\n\n// App.js\r\n\r\nclass App extends EventHarness {\r\n    /**\r\n     * @type {PatchedNavigo}\r\n     */\r\n    #router;\r\n\r\n    /**\r\n     * @type {HTMLElement}\r\n     */\r\n    #containerEl;\r\n\r\n    /**\r\n     *\r\n     * @type {Array.<AppController>}\r\n     */\r\n    controllers = [];\r\n\r\n    /**\r\n     * tracks the handle of the current page controller\r\n     * updating this is the responsibility of the controller\r\n     *\r\n     * @type {number|boolean}\r\n     */\r\n    currentControllerHandle = false;\r\n\r\n    /**\r\n     *\r\n     * @type {Array.<{url : string}>}\r\n     */\r\n    routeHistory = [];\r\n\r\n    /**\r\n     * keyed by occurrence id (a UUID string)\r\n     *\r\n     * @type {Map.<string,Occurrence>}\r\n     */\r\n    occurrences;\r\n\r\n    /**\r\n     * keyed by survey id (a UUID string)\r\n     *\r\n     * @type {Map.<string,Survey>}\r\n     */\r\n    surveys;\r\n\r\n    /**\r\n     * @type {?Survey}\r\n     */\r\n    _currentSurvey = null;\r\n\r\n    /**\r\n     * @abstract\r\n     * @type {number}\r\n     */\r\n    projectId;\r\n\r\n    /**\r\n     * Event fired when user requests a new blank survey\r\n     * @type {string}\r\n     */\r\n    static EVENT_ADD_SURVEY_USER_REQUEST = 'useraddsurveyrequest';\r\n\r\n    /**\r\n     * Event fired when user requests a reset (local clearance) of all surveys\r\n     * @type {string}\r\n     */\r\n    static EVENT_RESET_SURVEYS = 'userresetsurveys';\r\n\r\n    /**\r\n     * Fired after App.currentSurvey has been set to a new blank survey\r\n     * the survey will be accessible in App.currentSurvey\r\n     *\r\n     * @type {string}\r\n     */\r\n    static EVENT_NEW_SURVEY = 'newsurvey';\r\n\r\n    static LOAD_SURVEYS_ENDPOINT = '/loadsurveys.php';\r\n\r\n    static EVENT_OCCURRENCE_ADDED = 'occurrenceadded';\r\n\r\n    /**\r\n     * Fired when the selected current survey id is changed\r\n     * parameter is {newSurvey : Survey|null}\r\n     *\r\n     * (this is not fired for modification of the survey content)\r\n     *\r\n     * @type {string}\r\n     */\r\n    static EVENT_CURRENT_SURVEY_CHANGED = 'currentsurveychanged';\r\n\r\n    /**\r\n     * Fired if the surveys list might need updating (as a survey has been added, removed or changed)\r\n     *\r\n     * @type {string}\r\n     */\r\n    static EVENT_SURVEYS_CHANGED = 'surveyschanged';\r\n\r\n    /**\r\n     * Fired after fully-successful sync-all\r\n     * (or if sync-all resolved with nothing to send)\r\n     *\r\n     * @type {string}\r\n     */\r\n    static EVENT_ALL_SYNCED_TO_SERVER = 'allsyncedtoserver';\r\n\r\n    /**\r\n     * fired if sync-all called, but one or more objects failed to be saved to the server\r\n     *\r\n     * @type {string}\r\n     */\r\n    static EVENT_SYNC_ALL_FAILED = 'syncallfailed';\r\n\r\n    static EVENT_USER_LOGIN = 'login';\r\n\r\n    static EVENT_USER_LOGOUT = 'logout';\r\n\r\n    /**\r\n     * IndexedDb key used for storing id of current (last accessed) survey (or null)\r\n     *\r\n     * @type {string}\r\n     */\r\n    static CURRENT_SURVEY_KEY_NAME = 'currentsurvey';\r\n    static SESSION_KEY_NAME = 'session';\r\n\r\n    /**\r\n     *\r\n     * @type {boolean}\r\n     */\r\n    static devMode = false;\r\n\r\n    constructor() {\r\n        super();\r\n        //this.reset();\r\n\r\n        this.surveys = new Map();\r\n        this.clearCurrentSurvey();\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param {?Survey} survey\r\n     */\r\n    set currentSurvey(survey) {\r\n        if (this._currentSurvey !== survey) {\r\n            this._currentSurvey = survey || null;\r\n\r\n            let surveyId = survey?.id;\r\n            localforage.setItem(App.CURRENT_SURVEY_KEY_NAME, surveyId);\r\n\r\n            this.fireEvent(App.EVENT_CURRENT_SURVEY_CHANGED, {newSurvey : survey});\r\n        }\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param {string} key\r\n     * @param value\r\n     * @returns {Promise<*>}\r\n     */\r\n    forageSetItem(key, value) {\r\n        return localforage.setItem(key, value);\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param {string} key\r\n     * @returns {Promise<unknown | null>}\r\n     */\r\n    forageGetItem(key) {\r\n        return localforage.getItem(key);\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param {string} key\r\n     * @returns {Promise<unknown | null>}\r\n     */\r\n    forageRemoveItem(key) {\r\n        return localforage.removeItem(key);\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @returns {?Survey}\r\n     */\r\n    get currentSurvey() {\r\n        return this._currentSurvey;\r\n    }\r\n\r\n    /**\r\n     * note that the last survey might not belong to the current user\r\n     *\r\n     * @returns {Promise<string | null>}\r\n     */\r\n    getLastSurveyId() {\r\n        return localforage.getItem(App.CURRENT_SURVEY_KEY_NAME)\r\n            .catch((error) => {\r\n                console.log({'Error retrieving last survey id' : error});\r\n                return Promise.resolve(null);\r\n            });\r\n    }\r\n\r\n    clearLastSurveyId() {\r\n        return localforage.removeItem(App.CURRENT_SURVEY_KEY_NAME)\r\n            .catch((error) => {\r\n                console.log({'Error removing last survey id' : error});\r\n                return Promise.resolve(null);\r\n            });\r\n    }\r\n\r\n    /**\r\n     * @type {Layout}\r\n     */\r\n    layout;\r\n\r\n    /**\r\n     *\r\n     * @param {string} name\r\n     */\r\n    setLocalForageName(name) {\r\n        localforage.config({\r\n            name: name\r\n        });\r\n    }\r\n\r\n    reset() {\r\n        this.surveys = new Map();\r\n        this.clearCurrentSurvey();\r\n        this.clearLastSurveyId();\r\n    }\r\n\r\n    /**\r\n     * unset the current survey and its associated list of occurrences\r\n     * called when switching surveys and during startup\r\n     */\r\n    clearCurrentSurvey() {\r\n        this.occurrences = new Map();\r\n        this.currentSurvey = null;\r\n    }\r\n\r\n    /**\r\n     * see https://github.com/krasimir/navigo\r\n     * @param {PatchedNavigo} router\r\n     */\r\n    set router(router) {\r\n        this.#router = router;\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @returns {PatchedNavigo}\r\n     */\r\n    get router() {\r\n        return this.#router;\r\n    }\r\n\r\n    set containerId(containerId) {\r\n        const el = document.getElementById(containerId);\r\n        if (!el) {\r\n            throw new Error(`App container '${containerId}' not found.`);\r\n        } else {\r\n            this.#containerEl = el;\r\n        }\r\n    }\r\n\r\n    get container() {\r\n        return this.#containerEl;\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param {AppController} controller\r\n     */\r\n    registerController(controller) {\r\n        controller.handle = this.controllers.length;\r\n        this.controllers[this.controllers.length] = controller;\r\n\r\n        controller.app = this;\r\n        controller.registerRoute(this.#router);\r\n    }\r\n\r\n    initialise() {\r\n        //Page.initialise_layout(this.#containerEl);\r\n        this.layout.initialise();\r\n\r\n        this.#router.notFound((query) => {\r\n            // called when there is path specified but\r\n            // there is no route matching\r\n\r\n            console.log(`no route found for '${query}'`);\r\n            //this.#router.navigate('/list');\r\n\r\n            // const view = new NotFoundView();\r\n            // view.display();\r\n            this.notFoundView();\r\n        });\r\n\r\n        //default homepage\r\n        this.#router.on(() => {\r\n            // special-case redirect (replacing in history) from '/' to '/list' without updating browser history\r\n\r\n            console.log(\"redirecting from '/' to '/list'\");\r\n\r\n            this.#router.pause();\r\n            //if (this.clearCurrentSurvey && this.currentSurvey.isPristine) { // this appears to be a bug 'this.clearCurrentSurvey'\r\n            // rather than 'this.clearCurrentSurvey()' is nonsensical\r\n            // and if clearCurrentSurvey() was actually called then the isPristine test would fail (called on null)\r\n            if (this.currentSurvey && this.currentSurvey.isPristine) {\r\n                this.#router.navigate('/list/survey/welcome').resume();\r\n            } else {\r\n                this.#router.navigate('/list').resume();\r\n            }\r\n            this.#router.resolve();\r\n        });\r\n\r\n        for (let controller of this.controllers) {\r\n            controller.initialise();\r\n        }\r\n    }\r\n\r\n    display() {\r\n        console.log('App display');\r\n        this.#router.resolve();\r\n\r\n        // it's opportune at this point to try to ping the server again to save anything left outstanding\r\n        this.syncAll();\r\n    }\r\n\r\n    saveRoute() {\r\n        const lastRoute = this.#router.lastRouteResolved();\r\n        if (this.routeHistory.length) {\r\n            if (this.routeHistory[this.routeHistory.length - 1] !== lastRoute) {\r\n                this.routeHistory[this.routeHistory.length] = lastRoute;\r\n            }\r\n        } else {\r\n            this.routeHistory[0] = lastRoute;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * mark the current survey and its constituent records as subject to validation checks (not pristine)\r\n     */\r\n    markAllNotPristine() {\r\n        for (let occurrenceTuple of this.occurrences) {\r\n            occurrenceTuple[1].isPristine = false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param {Layout} layout\r\n     */\r\n    setLayout(layout) {\r\n        this.layout = layout;\r\n        layout.setApp(this);\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param {Survey} survey\r\n     */\r\n    addSurvey(survey) {\r\n        if (survey.projectId !== this.projectId) {\r\n            throw new Error(`Survey project id '${survey.projectId} does not match with current project ('${this.projectId}')`);\r\n        }\r\n\r\n        //if (!this.surveys.has(survey.id)) {\r\n        if (!survey.hasAppModifiedListener) {\r\n            survey.hasAppModifiedListener = true;\r\n\r\n            console.log(\"setting survey's modified/save handler\");\r\n            survey.addListener(\r\n                Survey.EVENT_MODIFIED,\r\n                () => {\r\n                    this.fireEvent(App.EVENT_SURVEYS_CHANGED);\r\n                    return survey.save();\r\n                }\r\n            );\r\n        }\r\n\r\n        this.surveys.set(survey.id, survey);\r\n        this.fireEvent(App.EVENT_SURVEYS_CHANGED);\r\n    }\r\n\r\n    /**\r\n     * tests whether occurrences have been defined, excluding any that have been deleted\r\n     *\r\n     * @returns {boolean}\r\n     */\r\n    haveExtantOccurrences() {\r\n        for (let occurrence of this.occurrences) {\r\n            if (!occurrence.deleted) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param {Occurrence} occurrence\r\n     */\r\n    addOccurrence(occurrence) {\r\n        if (!occurrence.surveyId) {\r\n            throw new InternalAppError('Survey id must set prior to registering occurrence.');\r\n        }\r\n\r\n        if (this.occurrences.size === 0) {\r\n            // this is the first occurrence added, set the survey creation stamp to match\r\n            // this avoids anomalies where a 'stale' survey created when the form was first opened but not used sits around\r\n            // for a protracted period\r\n\r\n            const survey = this.surveys.get(occurrence.surveyId);\r\n            survey.createdStamp = occurrence.createdStamp;\r\n        }\r\n        console.log(`in addOccurrence setting id '${occurrence.id}'`);\r\n        this.occurrences.set(occurrence.id, occurrence);\r\n\r\n        occurrence.addListener(Occurrence.EVENT_MODIFIED,\r\n            // possibly this should be async, with await on the survey and occurrence save\r\n            () => {\r\n                const survey = this.surveys.get(occurrence.surveyId);\r\n                if (!survey) {\r\n                    throw new Error(`Failed to look up survey id ${occurrence.surveyId}`);\r\n                } else {\r\n                    survey.isPristine = false;\r\n\r\n                    // need to ensure that currentSurvey is saved before occurrence\r\n                    // rather than using a promise chain here, instead rely on enforced queuing of post requests in Model\r\n                    // otherwise there are problems with queue-jumping (e.g. when an image needs to be saved after both previous requests)\r\n                    if (survey.unsaved()) {\r\n                        // noinspection JSIgnoredPromiseFromCall\r\n                        survey.save();\r\n                    }\r\n                    occurrence.save(survey.id);\r\n\r\n                    survey.fireEvent(Survey.EVENT_OCCURRENCES_CHANGED, {occurrenceId : occurrence.id});\r\n                }\r\n            });\r\n    }\r\n\r\n    /**\r\n     * attempts to refresh the state of local storage for the specified survey ids\r\n     * if fetch fails then return a failed promise\r\n     *\r\n     * updates local copy of surveys and occurrences\r\n     *\r\n     * no service worker interception of this call - passed through and not cached\r\n     *\r\n     * @param {Array.<string>} surveyIds\r\n     * @return {Promise}\r\n     */\r\n    refreshFromServer(surveyIds) {\r\n        console.log({'Refresh from server, ids' : surveyIds});\r\n        const formData = new FormData;\r\n\r\n        let n = 0;\r\n        for (let key of surveyIds) {\r\n            if (key && key !== 'undefined') {\r\n                formData.append(`surveyId[${n++}]`, key);\r\n            }\r\n        }\r\n\r\n        if (this?.session.userId) {\r\n            formData.append('userId', this.session.userId);\r\n        }\r\n\r\n        return fetch(App.LOAD_SURVEYS_ENDPOINT, {\r\n            method: 'POST',\r\n            body: formData\r\n        }).then(response => {\r\n            if (response.ok) {\r\n                return response.json();\r\n            } else {\r\n                return Promise.reject(`Invalid response from server when refreshing survey ids`);\r\n            }\r\n        }).then((jsonResponse) => {\r\n            /** @param {{survey : Array.<object>, occurrence: Array.<object>, image: Array.<object>}} jsonResponse */\r\n\r\n            console.log({'refresh from server json response' : jsonResponse});\r\n\r\n            // if external objects newer than local version then place in local storage\r\n            const promises = [];\r\n\r\n            for (let type in jsonResponse) {\r\n                if (jsonResponse.hasOwnProperty(type)) {\r\n                    for (let object of jsonResponse[type]) {\r\n                        promises.push(this._conditionallyReplaceObject(object));\r\n                    }\r\n                }\r\n            }\r\n\r\n            return Promise.all(promises);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * compare modified stamp of indexeddb and external objects and write external version locally if more recent\r\n     *\r\n     * @param {{id : string, type : string, modified : number, created : number, saveState : string, deleted : boolean}} externalVersion\r\n     * @returns {Promise}\r\n     * @private\r\n     */\r\n    _conditionallyReplaceObject(externalVersion) {\r\n        const objectType = externalVersion.type;\r\n        const id = externalVersion.id;\r\n        const key = `${objectType}.${id}`;\r\n\r\n        return localforage.getItem(key)\r\n            .then((localVersion) => {\r\n                if (localVersion) {\r\n                    // compare stamps\r\n\r\n                    // if (externalVersion.deleted) {\r\n                    //     // if the external copy is deleted then remove the local copy\r\n                    //     return localforage.removeItem(key);\r\n                    // }\r\n\r\n                    if (!externalVersion.deleted && localVersion.modified >= externalVersion.modified) {\r\n                        console.log(`Local copy of ${key} is the same or newer than the server copy. (${localVersion.modified} >= ${externalVersion.modified}) `);\r\n                        return Promise.resolve();\r\n                    }\r\n                }\r\n\r\n                // no local copy or stale copy\r\n                // so store response locally\r\n                console.log(`Adding or replacing local copy of ${key}`);\r\n                return localforage.setItem(key, externalVersion);\r\n            });\r\n    }\r\n\r\n    /**\r\n     * retrieve the full set of keys from local storage (IndexedDb)\r\n     *\r\n     * @param {{survey: Array.<string>, occurrence : Array.<string>, image: Array.<string>}} storedObjectKeys\r\n     * @returns {Promise}\r\n     */\r\n    seekKeys(storedObjectKeys) {\r\n        console.log('starting seekKeys');\r\n\r\n        return localforage.keys().then((keys) => {\r\n            console.log({\"in seekKeys: local forage keys\" : keys});\r\n\r\n            for (let key of keys) {\r\n                if (key !== App.CURRENT_SURVEY_KEY_NAME && key !== App.SESSION_KEY_NAME) {\r\n                    let type, id;\r\n\r\n                    [type, id] = key.split('.', 2);\r\n\r\n                    if (storedObjectKeys.hasOwnProperty(type)) {\r\n                        if (!storedObjectKeys[type].includes(id)) {\r\n                            storedObjectKeys[type].push(id);\r\n                        }\r\n                    } else {\r\n                        console.log(`Unrecognised stored key type '${type}.`);\r\n                    }\r\n                }\r\n            }\r\n\r\n            return storedObjectKeys;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * @returns {Promise}\r\n     */\r\n    syncAll() {\r\n        const storedObjectKeys = {\r\n            survey : [],\r\n            occurrence : [],\r\n            image : []\r\n        };\r\n\r\n        return this.seekKeys(storedObjectKeys)\r\n            .then((storedObjectKeys) => {\r\n                return this._syncLocalUnsaved(storedObjectKeys)\r\n                    .then((result) => {\r\n                        this.fireEvent(App.EVENT_ALL_SYNCED_TO_SERVER);\r\n\r\n                        return result;\r\n                    });\r\n            }, (failedResult) => {\r\n                console.log(`Failed to sync all: ${failedResult}`);\r\n                this.fireEvent(App.EVENT_SYNC_ALL_FAILED);\r\n                return false;\r\n            });\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param {boolean} [queryFilters.structuredSurvey]\r\n     * @param {boolean} [queryFilters.isToday]\r\n     * @param {string} [queryFilters.monad]\r\n     * @param {string} [queryFilters.tetrad]\r\n     * @param {string} [queryFilters.userId]\r\n     * @param {string} [queryFilters.date]\r\n     * @param {string} [queryFilters.excludeSurveyId]\r\n     * @returns {Array<Survey>}\r\n     */\r\n    queryLocalSurveys(queryFilters) {\r\n        const matches = [];\r\n\r\n        for (const surveyTuple of this.surveys) {\r\n            const survey = surveyTuple[1];\r\n\r\n            if (queryFilters.structuredSurvey && survey.attributes.casual) {\r\n                continue;\r\n            }\r\n\r\n            if (queryFilters.isToday && !survey.isToday()) {\r\n                continue;\r\n            }\r\n\r\n            if (queryFilters.monad && survey.getGeoContext()?.monad !== queryFilters.monad) {\r\n                continue;\r\n            }\r\n\r\n            if (queryFilters.tetrad && survey.getGeoContext()?.tetrad !== queryFilters.tetrad) {\r\n                continue;\r\n            }\r\n\r\n            if (queryFilters.hasOwnProperty('userId') && queryFilters.userId !== survey.userId) {\r\n                continue;\r\n            }\r\n\r\n            if (queryFilters.excludeSurveyId === survey.id) {\r\n                continue;\r\n            }\r\n\r\n            if (queryFilters.date && queryFilters.date !== survey.date) {\r\n                continue;\r\n            }\r\n\r\n\r\n\r\n            matches[matches.length] = survey;\r\n        }\r\n\r\n        return matches;\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param storedObjectKeys\r\n     * @returns {Promise}\r\n     * @private\r\n     */\r\n    _syncLocalUnsaved(storedObjectKeys) {\r\n        // synchronises surveys first, then occurrences, then images from indexedDb\r\n\r\n        const promises = [];\r\n        for(let surveyKey of storedObjectKeys.survey) {\r\n            promises.push(Survey.retrieveFromLocal(surveyKey, new Survey)\r\n                .then((survey) => {\r\n                    if (survey.unsaved()) {\r\n                        return survey.save();\r\n                    }\r\n                })\r\n            );\r\n        }\r\n\r\n        for(let occurrenceKey of storedObjectKeys.occurrence) {\r\n            promises.push(Occurrence.retrieveFromLocal(occurrenceKey, new Occurrence)\r\n                .then((occurrence) => {\r\n                    if (occurrence.unsaved()) {\r\n                        return occurrence.save();\r\n                    }\r\n                })\r\n            );\r\n        }\r\n\r\n        for(let imageKey of storedObjectKeys.image) {\r\n            promises.push(OccurrenceImage.retrieveFromLocal(imageKey, new OccurrenceImage)\r\n                .then((image) => {\r\n                    if (image.unsaved()) {\r\n                        return image.save();\r\n                    }\r\n                })\r\n            );\r\n        }\r\n\r\n        return Promise.all(promises).catch((result) => {\r\n            console.log(`Save failure: ${result}`);\r\n            return Promise.reject(result); // pass on the failed save (catch was only for logging, not to allow subsequent success)\r\n        });\r\n    }\r\n\r\n    /**\r\n     * restore previous state, pulling back from local and external store\r\n     * @todo this needs a save phase, so that local changes are saved back to the server\r\n     *\r\n     * @param {string} [targetSurveyId] if specified then select this id as the current survey\r\n     * @param {boolean} [neverAddBlank] if set then don't add a new blank survey if none available, default false\r\n     * @return {Promise}\r\n     */\r\n    restoreOccurrences(targetSurveyId = '', neverAddBlank = false) {\r\n        console.log(`Invoked restoreOccurrences, target survey id: ${targetSurveyId}`);\r\n\r\n        if (targetSurveyId === 'undefined') {\r\n            console.error(`Attempt to restore occurrences for literal 'undefined' survey id.`);\r\n            targetSurveyId = '';\r\n        }\r\n\r\n        return (targetSurveyId) ?\r\n            this._restoreOccurrenceImp(targetSurveyId, neverAddBlank)\r\n            :\r\n            this.getLastSurveyId().then(\r\n                (lastSurveyId) => {\r\n                    console.log(`Retrieved last used survey id '${lastSurveyId}'`);\r\n\r\n                    return this._restoreOccurrenceImp(lastSurveyId, neverAddBlank).catch(() => {\r\n                        console.log(`Failed to retrieve lastSurveyId ${lastSurveyId}. Resetting current survey and retrying.`);\r\n\r\n                        this.currentSurvey = null;\r\n                        return this._restoreOccurrenceImp('', neverAddBlank);\r\n                    });\r\n                },\r\n                () => this._restoreOccurrenceImp('', neverAddBlank)\r\n            );\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param {string} [targetSurveyId] default ''\r\n     * @param {boolean} [neverAddBlank] if set then don't add a new blank survey if none available, default false\r\n     * @returns {Promise<void>|Promise<unknown>}\r\n     * @protected\r\n     */\r\n    _restoreOccurrenceImp(targetSurveyId = '', neverAddBlank = false) {\r\n        // need to check for a special case where restoring a survey that has never been saved even locally\r\n        // i.e. new and unmodified\r\n        // only present in current App.surveys\r\n        // this occurs if user creates a new survey, makes no changes, switches away from it then switches back\r\n        if (targetSurveyId && this.surveys.has(targetSurveyId)) {\r\n            const localSurvey = this.surveys.get(targetSurveyId);\r\n\r\n            if (localSurvey.isPristine) {\r\n                this.clearCurrentSurvey(); // clear occurrences from the previous survey\r\n\r\n                this.currentSurvey = localSurvey;\r\n                this.fireEvent(App.EVENT_SURVEYS_CHANGED); // current survey should be set now, so menu needs refresh\r\n                return Promise.resolve();\r\n            }\r\n        }\r\n\r\n        const storedObjectKeys = {\r\n            survey: [],\r\n            occurrence: [],\r\n            image: []\r\n        };\r\n\r\n        if (targetSurveyId) {\r\n            storedObjectKeys.survey[0] = targetSurveyId;\r\n        }\r\n\r\n        return this.seekKeys(storedObjectKeys).then((storedObjectKeys) => {\r\n            if (storedObjectKeys.survey.length || this?.session.userId) {\r\n                return this.refreshFromServer(storedObjectKeys.survey).finally(() => {\r\n                    // re-seek keys from indexed db, to take account of any new occurrences received from the server\r\n                    return this.seekKeys(storedObjectKeys);\r\n                });\r\n            } else {\r\n                return null;\r\n            }\r\n        }).finally(() => {\r\n            // called regardless of whether a server refresh was successful\r\n            // storedObjectKeys and indexed db should be as up-to-date as possible\r\n\r\n            console.log({storedObjectKeys});\r\n\r\n            if (storedObjectKeys && storedObjectKeys.survey && storedObjectKeys.survey.length) {\r\n\r\n                const surveyFetchingPromises = [];\r\n                let n = 0;\r\n\r\n                for (let surveyKey of storedObjectKeys.survey) {\r\n                    // arbitrarily set first survey key as current if a target id hasn't been specified\r\n\r\n                    surveyFetchingPromises.push(\r\n                        this._restoreSurveyFromLocal(surveyKey, storedObjectKeys, (targetSurveyId === surveyKey) || (!targetSurveyId && n++ === 0))\r\n                    );\r\n                }\r\n\r\n                return Promise.all(surveyFetchingPromises)\r\n                    .finally(() => {\r\n                        //this.currentSurvey = this.surveys.get(storedObjectKeys.survey[0]);\r\n\r\n                        if (!this.currentSurvey && !neverAddBlank) {\r\n                            // survey doesn't actually exist\r\n                            // this could have happened in an invalid survey id was provided as a targetSurveyId\r\n                            console.log(`Failed to retrieve survey id '${targetSurveyId}'`);\r\n                            return Promise.reject(new Error(`Failed to retrieve survey id '${targetSurveyId}'`));\r\n                        }\r\n\r\n                        if (this.currentSurvey?.deleted) {\r\n                            // unusual case where survey is deleted\r\n                            // substitute a new one\r\n\r\n                            // this should probably never happen, as items deleted on the server ought to have been\r\n                            // removed locally\r\n                            this.currentSurvey = null;\r\n                            neverAddBlank || this.setNewSurvey();\r\n                        }\r\n\r\n                        this.fireEvent(App.EVENT_SURVEYS_CHANGED); // current survey should be set now, so menu needs refresh\r\n                        this.currentSurvey?.fireEvent(Survey.EVENT_OCCURRENCES_CHANGED);\r\n\r\n                        return Promise.resolve();\r\n                    });\r\n            } else {\r\n                console.log('no pre-existing surveys, so creating a new one');\r\n                // no pre-existing surveys, so create a new one\r\n                if (!neverAddBlank) {\r\n                    this.setNewSurvey(); // this also fires EVENT_SURVEYS_CHANGED\r\n                } else {\r\n                    this.fireEvent(App.EVENT_SURVEYS_CHANGED); // survey menu needs refresh\r\n                }\r\n\r\n                return Promise.resolve();\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param {{}|null} [attributes]\r\n     */\r\n    setNewSurvey(attributes) {\r\n        this.currentSurvey = new Survey();\r\n\r\n        if (attributes) {\r\n            this.currentSurvey.attributes = {...this.currentSurvey.attributes, ...attributes};\r\n        }\r\n\r\n        this.currentSurvey.projectId = this.projectId;\r\n        this.currentSurvey.isPristine = true;\r\n        this.currentSurvey.isNew = true;\r\n\r\n        if (this?.session.userId) {\r\n            this.currentSurvey.userId = this.session.userId;\r\n        }\r\n\r\n        this.fireEvent(App.EVENT_NEW_SURVEY);\r\n\r\n        this.addSurvey(this.currentSurvey);\r\n    }\r\n\r\n    addAndSetSurvey(survey) {\r\n        this.currentSurvey = survey;\r\n        this.fireEvent(App.EVENT_NEW_SURVEY);\r\n\r\n        this.addSurvey(this.currentSurvey);\r\n    }\r\n\r\n    /**\r\n     * Note that if attributes are set here, then the occurrence is regarded as changed and unsaved, rather than pristine\r\n     * i.e. attributes setting here is *not* intended as a way to set defaults\r\n     *\r\n     * @param {{}} [attributes]\r\n     * @return {Occurrence}\r\n     */\r\n    addNewOccurrence(attributes) {\r\n        const occurrence = new Occurrence();\r\n        occurrence.surveyId = this.currentSurvey.id;\r\n        occurrence.projectId = this.projectId;\r\n\r\n        if (this.currentSurvey.userId) {\r\n            occurrence.userId = this.currentSurvey.userId;\r\n        }\r\n\r\n        occurrence.isNew = true;\r\n        occurrence.isPristine = true;\r\n\r\n        if (attributes && Object.keys(attributes).length) {\r\n            occurrence.attributes = {...occurrence.attributes, ...attributes};\r\n            occurrence.touch(); // now no longer pristine\r\n        }\r\n\r\n        this.addOccurrence(occurrence);\r\n\r\n        this.currentSurvey.extantOccurrenceKeys.add(occurrence.id);\r\n\r\n        this.fireEvent(App.EVENT_OCCURRENCE_ADDED, {occurrenceId: occurrence.id, surveyId: occurrence.surveyId});\r\n\r\n        this.currentSurvey.fireEvent(Survey.EVENT_OCCURRENCES_CHANGED, {occurrenceId : occurrence.id});\r\n\r\n        // occurrence modified event fired to ensure that the occurrence is saved\r\n        occurrence.fireEvent(Occurrence.EVENT_MODIFIED);\r\n\r\n        return occurrence;\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param {string} surveyId\r\n     * @param {{survey: Array, occurrence: Array, image: Array}} storedObjectKeys\r\n     * @param {boolean} setAsCurrent\r\n     * @returns {Promise}\r\n     * @private\r\n     */\r\n    _restoreSurveyFromLocal(surveyId, storedObjectKeys, setAsCurrent) {\r\n        // retrieve surveys first, then occurrences, then images from indexedDb\r\n\r\n        let userIdFilter = this.session?.userId;\r\n\r\n        let promise = Survey.retrieveFromLocal(surveyId, new Survey).then((survey) => {\r\n            console.log(`retrieving local survey ${surveyId}`);\r\n\r\n            if ((!userIdFilter && !survey.userId) || survey.userId === userIdFilter) {\r\n                if (setAsCurrent) {\r\n                    // the apps occurrences should only relate to the current survey\r\n                    // (the reset are remote or in IndexedDb)\r\n                    this.clearCurrentSurvey();\r\n\r\n                    this.addSurvey(survey);\r\n                    const occurrenceFetchingPromises = [];\r\n\r\n                    for (let occurrenceKey of storedObjectKeys.occurrence) {\r\n                        occurrenceFetchingPromises.push(Occurrence.retrieveFromLocal(occurrenceKey, new Occurrence)\r\n                            .then((occurrence) => {\r\n                                if (occurrence.surveyId === surveyId) {\r\n                                    console.log(`adding occurrence ${occurrenceKey}`);\r\n                                    this.addOccurrence(occurrence);\r\n                                } else {\r\n                                    // not part of current survey but should still add to key list for counting purposes\r\n\r\n                                    this.surveys.get(occurrence.surveyId)?.extantOccurrenceKeys?.add(occurrence.id);\r\n                                }\r\n\r\n                            }));\r\n                    }\r\n\r\n                    return Promise.all(occurrenceFetchingPromises);\r\n                } else {\r\n                    // not the current survey, so just add it but don't load occurrences\r\n                    this.addSurvey(survey);\r\n                }\r\n            } else {\r\n                console.log(`Skipping survey id ${survey.id} that belongs to user ${survey.userId}`);\r\n            }\r\n        });\r\n\r\n        if (setAsCurrent) {\r\n            promise.finally(() => {\r\n                //console.log('Reached image fetching part');\r\n                const imageFetchingPromises = [];\r\n\r\n                for (let occurrenceImageKey of storedObjectKeys.image) {\r\n                    imageFetchingPromises.push(OccurrenceImage.retrieveFromLocal(occurrenceImageKey, new OccurrenceImage)\r\n                        .then((occurrenceImage) => {\r\n                            console.log(`restoring image id '${occurrenceImageKey}'`);\r\n\r\n                            if (occurrenceImage.surveyId === surveyId) {\r\n                                OccurrenceImage.imageCache.set(occurrenceImageKey, occurrenceImage);\r\n                            }\r\n                        }, (reason) => {\r\n                            console.log(`Failed to retrieve an image: ${reason}`);\r\n                        }));\r\n                }\r\n\r\n                this.currentSurvey = this.surveys.get(storedObjectKeys.survey[0]) || null;\r\n\r\n                // if the target survey belonged to a different user then could be undefined here\r\n\r\n                return this.currentSurvey ? Promise.all(imageFetchingPromises) : Promise.resolve();\r\n            });\r\n        }\r\n\r\n        return promise;\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @returns {Promise<void>}\r\n     */\r\n    clearLocalForage() {\r\n        return localforage.clear();\r\n    }\r\n\r\n    /**\r\n     * @abstract\r\n     */\r\n    notFoundView() {\r\n        // const view = new NotFoundView();\r\n        // view.display();\r\n    }\r\n}\n\n// SurveyPickerController\r\n\r\nclass SurveyPickerController extends AppController {\r\n    route = '/survey/:action/:id';\r\n\r\n    static EVENT_BACK = 'back';\r\n\r\n    title = 'Survey picker';\r\n\r\n    /**\r\n     *\r\n     * @type {SurveyPickerView}\r\n     */\r\n    view;\r\n\r\n    /**\r\n     *\r\n     * @returns {Survey}\r\n     */\r\n    get survey() {\r\n        return this.app.currentSurvey;\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param {SurveyPickerView} view\r\n     */\r\n    constructor (view) {\r\n        super();\r\n\r\n        this.view = view;\r\n        view.controller = this;\r\n\r\n        this.handle = AppController.nextHandle;\r\n    }\r\n\r\n    /**\r\n     * registers the default route from this.route\r\n     * or alternatively is overridden in a child class\r\n     *\r\n     * @param {PatchedNavigo} router\r\n     */\r\n    registerRoute(router) {\r\n        router.on(\r\n            '/survey',\r\n            this.mainRouteHandler.bind(this, 'survey', '', ''),\r\n            {\r\n                // before : this.beforeRouteHandler ? this.beforeRouteHandler.bind(this) : null,\r\n                // after : this.afterRouteHandler ? this.afterRouteHandler.bind(this) : null,\r\n                // leave : this.leaveRouteHandler ? this.leaveRouteHandler.bind(this) : null,\r\n                // already : this.alreadyRouteHandler ? this.alreadyRouteHandler.bind(this) : null\r\n            }\r\n        );\r\n\r\n        router.on(\r\n            '/survey/new',\r\n            this.newSurveyHandler.bind(this, 'survey', 'new', ''),\r\n            {\r\n                before : this.beforeNewHandler.bind(this)\r\n            }\r\n        );\r\n\r\n        router.on(\r\n            '/survey/reset',\r\n            this.mainRouteHandler.bind(this, 'survey', 'reset', ''),\r\n            {\r\n                before : this.beforeResetHandler.bind(this)\r\n            }\r\n        );\r\n\r\n        router.on(\r\n            '/survey/save',\r\n            this.mainRouteHandler.bind(this, 'survey', 'save', ''),\r\n            {\r\n                before : this.beforeSaveAllHandler.bind(this)\r\n            }\r\n        );\r\n\r\n        router.on(\r\n            '/survey/add/:surveyId',\r\n            this.addSurveyHandler.bind(this, 'survey', 'add', '')\r\n        );\r\n\r\n        this.app.addListener(App.EVENT_ADD_SURVEY_USER_REQUEST, this.addNewSurveyHandler.bind(this));\r\n        this.app.addListener(App.EVENT_RESET_SURVEYS, this.resetSurveysHandler.bind(this));\r\n    }\r\n\r\n    beforeNewHandler(done) {\r\n        this.view.newSurveyDialog();\r\n\r\n        this.app.router.pause();\r\n\r\n        console.log({'route history' : this.app.routeHistory});\r\n\r\n        if (window.history.state) {\r\n            window.history.back(); // this could fail if previous url was not under the single-page-app umbrella (should test)\r\n        }\r\n        this.app.router.resume();\r\n\r\n        done(false); // block navigation\r\n    }\r\n\r\n    beforeResetHandler(done) {\r\n        this.view.showResetDialog();\r\n\r\n        this.app.router.pause();\r\n        if (window.history.state) {\r\n            window.history.back(); // this could fail if previous url was not under the single-page-app umbrella (should test)\r\n        }\r\n        this.app.router.resume();\r\n\r\n        done(false); // block navigation\r\n    }\r\n\r\n    beforeSaveAllHandler(done) {\r\n        // invoke sync of any/all unsaved data\r\n        // show pop-ups on success and failure\r\n        this.app.syncAll().then((result) => {\r\n            console.log({'In save all handler, success result' : result});\r\n\r\n            if (Array.isArray(result)) {\r\n                this.view.showSaveAllSuccess();\r\n            } else {\r\n                this.view.showSaveAllFailure();\r\n            }\r\n        }, (result) => {\r\n            console.log({'In save all handler, failure result' : result});\r\n            this.view.showSaveAllFailure();\r\n        }).finally(() => {\r\n            // stop the spinner\r\n\r\n        });\r\n\r\n        this.app.router.pause();\r\n        if (window.history.state) {\r\n            window.history.back(); // this could fail if previous url was not under the single-page-app umbrella (should test)\r\n        }\r\n        this.app.router.resume();\r\n\r\n        done(false); // block navigation\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param {string} context typically 'survey'\r\n     * @param {('new'|'')} subcontext\r\n     * @param {(''|'help')} rhs currently not used\r\n     * @param {Object.<string, string>} queryParameters surveyId\r\n     */\r\n    newSurveyHandler(context, subcontext, rhs, queryParameters) {\r\n        // should not get here, as beforeNewHandler ought to have been invoked first\r\n    }\r\n\r\n    /**\r\n     * called after user has confirmed add new survey dialog box\r\n     *\r\n     */\r\n    addNewSurveyHandler() {\r\n        console.log(\"reached addNewSurveyHandler\");\r\n        this.app.currentControllerHandle = this.handle; // when navigate back need to list need to ensure full view refresh\r\n\r\n        // the apps occurrences should only relate to the current survey\r\n        // (the reset are remote or in IndexedDb)\r\n        this.app.clearCurrentSurvey();\r\n\r\n        this.app.setNewSurvey();\r\n\r\n        // it's opportune at this point to try to ping the server again to save anything left outstanding\r\n        this.app.syncAll();\r\n\r\n        this.app.router.pause();\r\n        this.app.router.navigate('/list/survey/about').resume(); // jump straight into the survey rather than to welcome stage\r\n        this.app.router.resolve();\r\n    }\r\n\r\n    /**\r\n     * called after user has confirmed reset surveys dialog box\r\n     */\r\n    resetSurveysHandler() {\r\n        this.app.clearLocalForage().then(() => {\r\n            this.app.reset();\r\n            this.addNewSurveyHandler();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * url fragment to redirect to, following addition of an existing survey, e.g. a pick from the selection list\r\n     *\r\n     * should be '/list' or '/list/record'\r\n     *\r\n     * @type {string}\r\n     */\r\n    restoredSurveyNavigationTarget = '/list';\r\n\r\n    /**\r\n     *\r\n     * @param {string} context typically 'survey'\r\n     * @param {('add'|'')} subcontext\r\n     * @param {(''|'help')} rhs currently not used\r\n     * @param {Object.<string, string>} queryParameters surveyId\r\n     */\r\n    addSurveyHandler(context, subcontext, rhs, queryParameters) {\r\n        console.log(\"reached addSurveyHandler\");\r\n        console.log({context: context, params: subcontext, query: queryParameters});\r\n\r\n        this.app.currentControllerHandle = this.handle; // when navigate back need to list need to ensure full view refresh\r\n\r\n        let surveyId = queryParameters.surveyId;\r\n\r\n        if (!surveyId || !surveyId.match(UUID_REGEX)) {\r\n            throw new NotFoundError(`Failed to match survey id '${surveyId}', the id format appears to be incorrect`);\r\n        }\r\n\r\n        surveyId = surveyId.toLowerCase();\r\n\r\n        this.app.restoreOccurrences(surveyId)\r\n            .then(() => {\r\n                this.app.markAllNotPristine();\r\n\r\n                this.app.router.pause();\r\n                //this.app.router.navigate('/list').resume();\r\n                this.app.router.navigate(this.restoredSurveyNavigationTarget).resume();\r\n                this.app.router.resolve();\r\n            }, (error) => {\r\n                console.log({'failed survey restoration' : error});\r\n\r\n                // should display a modal error message\r\n                // either the survey was not found or there was no network connection\r\n\r\n                // should switch to displaying a list of available surveys and an option to start a new survey\r\n            });\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param {string} context typically 'survey'\r\n     * @param {('add'|'')} subcontext\r\n     * @param {(''|'help')} rhs currently not used\r\n     * @param {Object.<string, string>} queryParameters surveyId\r\n     */\r\n    mainRouteHandler(context, subcontext, rhs, queryParameters) {\r\n        console.log(\"reached special route handler for SurveyPickerController.js\");\r\n        console.log({context: context, params: subcontext, query: queryParameters});\r\n    }\r\n}\n\nclass PartyError extends Error {\r\n\r\n}\n\nclass Party {\r\n    /**\r\n     * @typedef RawParty\r\n     * @type {array}\r\n     * @property {string} 0 - surname\r\n     * @property {string} 0 - firstName\r\n     * @property {string} 0 - orgName\r\n     * @property {string} 0 - type code\r\n     * @property {string} 0 - prefix\r\n     * @property {string} 0 - suffix\r\n     * @property {string} 0 - disambiguation\r\n     */\r\n\r\n    /**\r\n     *\r\n     * @type {Object.<string, RawParty>}\r\n     */\r\n    static rawParties;\r\n\r\n    static TYPE_PERSON = 'p';\r\n    static TYPE_ORGANISATION = 'u';\r\n    static TYPE_UNKNOWN = '?';\r\n\r\n    /**\r\n     * @type {string}\r\n     */\r\n    id;\r\n\r\n    /**\r\n     *\r\n     * @type {string}\r\n     */\r\n    name = '';\r\n\r\n    /**\r\n     *\r\n     * @type {string}\r\n     */\r\n    firstName = '';\r\n\r\n    /**\r\n     *\r\n     * @type {string}\r\n     */\r\n    surnameName = '';\r\n\r\n    /**\r\n     *\r\n     * @type {string}\r\n     */\r\n    orgName = '';\r\n\r\n    /**\r\n     *\r\n     * @type {string}\r\n     */\r\n    type = '';\r\n\r\n    /**\r\n     *\r\n     * @type {string}\r\n     */\r\n    prefix = '';\r\n\r\n    /**\r\n     *\r\n     * @type {string}\r\n     */\r\n    suffix = '';\r\n\r\n    /**\r\n     *\r\n     * @type {string}\r\n     */\r\n    disambiguation = '';\r\n\r\n    static setParties(parties) {\r\n        Party.rawParties = parties;\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param {string} id\r\n     * @returns {Party}\r\n     * @throws {PartyError}\r\n     */\r\n    static fromId (id) {\r\n        if (!Party.rawParties) {\r\n            throw new PartyError(`Party.fromId() called before list has been initialized.`);\r\n        }\r\n\r\n        if (!Party.rawParties.hasOwnProperty(id)) {\r\n            throw new PartyError(`Party id '${id}' not found.`);\r\n        }\r\n\r\n        const raw = Party.rawParties[id];\r\n\r\n        const party = new Party;\r\n\r\n        party.id = id;\r\n        party.surname = raw[0] || '';\r\n        party.firstName = raw[1] || '';\r\n        party.orgName = raw[2] || '';\r\n        party.type = raw[3];\r\n        party.prefix = raw[4] || '';\r\n        party.suffix = raw[5] || '';\r\n        party.disambiguation = raw[6] || '';\r\n        // @todo need to set party.name\r\n\r\n        return party;\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @returns {string}\r\n     */\r\n    formattedHTML() {\r\n\r\n        return this.type === Party.TYPE_PERSON ?\r\n            escapeHTML(`${this.firstName} ${this.surnameName}`)\r\n            :\r\n            escapeHTML(this.orgName);\r\n\r\n        // if (Taxon.showVernacular) {\r\n        //     if (vernacularMatched) {\r\n        //         return (acceptedTaxon) ?\r\n        //             `<q class=\"taxon-vernacular\">${escapeHTML(this.vernacular)}</q><wbr> <span class=\"italictaxon\">${this.nameString}${this.qualifier ? ` <span class=\"taxon-qualifier\">${this.qualifier}</span>` : ''}</span> <span class=\"taxauthority\">${escapeHTML(this.authority)}</span>` +\r\n        //             ` = <span class=\"italictaxon\">${acceptedTaxon.nameString}${acceptedTaxon.qualifier ? ` <span class=\"taxon-qualifier\">${acceptedTaxon.qualifier}</span>` : ''}</span> <span class=\"taxauthority\">${escapeHTML(acceptedTaxon.authority)}</span>`\r\n        //             :\r\n        //             `<q class=\"taxon-vernacular\">${escapeHTML(this.vernacular)}</q><wbr> <span class=\"italictaxon\">${this.nameString}${this.qualifier ? ` <span class=\"taxon-qualifier\">${this.qualifier}</span>` : ''}</span> <span class=\"taxauthority\">${escapeHTML(this.authority)}</span>`\r\n        //             ;\r\n        //     } else {\r\n        //         return (acceptedTaxon) ?\r\n        //             `<span class=\"italictaxon\">${this.nameString}${this.qualifier ? ` <span class=\"taxon-qualifier\">${this.qualifier}</span>` : ''}</span> <span class=\"taxauthority\">${this.authority}</span>${this.vernacular ? ` <wbr><q class=\"taxon-vernacular\">${escapeHTML(this.vernacular)}</q>` : ''\r\n        //             } = <span class=\"italictaxon\">${acceptedTaxon.nameString}${acceptedTaxon.qualifier ? ` <span class=\"taxon-qualifier\">${acceptedTaxon.qualifier}</span>` : ''}</span> <span class=\"taxauthority\">${escapeHTML(acceptedTaxon.authority)}</span>`\r\n        //             :\r\n        //             `<span class=\"italictaxon\">${this.nameString}${this.qualifier ? ` <span class=\"taxon-qualifier\">${this.qualifier}</span>` : ''}</span> <span class=\"taxauthority\">${escapeHTML(this.authority)}</span>${this.vernacular ? ` <wbr><q class=\"taxon-vernacular\">${escapeHTML(this.vernacular)}</q>` : ''}`\r\n        //             ;\r\n        //     }\r\n        // } else {\r\n        //     return (acceptedTaxon) ?\r\n        //         `<span class=\"italictaxon\">${this.nameString}${this.qualifier ? ` <span class=\"taxon-qualifier\">${this.qualifier}</span>` : ''}</span> <span class=\"taxauthority\">${this.authority}</span>` +\r\n        //         ` = <span class=\"italictaxon\">${acceptedTaxon.nameString}${acceptedTaxon.qualifier ? ` <span class=\"taxon-qualifier\">${acceptedTaxon.qualifier}</span>` : ''}</span> <span class=\"taxauthority\">${escapeHTML(acceptedTaxon.authority)}</span>`\r\n        //         :\r\n        //         `<span class=\"italictaxon\">${this.nameString}${this.qualifier ? ` <span class=\"taxon-qualifier\">${this.qualifier}</span>` : ''}</span> <span class=\"taxauthority\">${escapeHTML(this.authority)}</span>`\r\n        //         ;\r\n        // }\r\n    }\r\n}\n\nclass ResponseFactory {\r\n    static responses = {};\r\n\r\n    /**\r\n     *\r\n     * @param {FormData} formData\r\n     * @returns {LocalResponse}\r\n     */\r\n    static fromPostedData(formData) {\r\n        /**\r\n         * the object that will be saved to IndexedDb\r\n         *\r\n         * this needs to be in scope for several stages of the promise chain\r\n         * @type {{[saved]: string, [type]: string, [imageId]: string, [surveyId]: string, [occurrenceId]: string, [image]: file, [projectId]: number, saveState: string }}\r\n         */\r\n        const toSaveLocally = {\r\n            saveState: SAVE_STATE_LOCAL // mark as not saved externally\r\n        };\r\n\r\n        for(let pair of formData.entries()) {\r\n            toSaveLocally[pair[0]] = pair[1];\r\n        }\r\n\r\n        if (!toSaveLocally.type) {\r\n            throw new Error('Missing type in form data.');\r\n        }\r\n\r\n        if (ResponseFactory.responses.hasOwnProperty(toSaveLocally.type)) {\r\n            return new ResponseFactory.responses[toSaveLocally.type](toSaveLocally, {});\r\n        } else {\r\n            throw new Error(`Unrecognised post type '${toSaveLocally.type}'`);\r\n        }\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param {{}} returnedToClient\r\n     */\r\n    static fromPostResponse(returnedToClient) {\r\n        if (!returnedToClient) {\r\n            throw new Error('Invalid empty post response.');\r\n        }\r\n\r\n        if (!returnedToClient.type) {\r\n            throw new Error('Missing type in returned response.');\r\n        }\r\n\r\n        if (ResponseFactory.responses.hasOwnProperty(returnedToClient.type)) {\r\n            console.log(`in fromPostResponse returning a ${returnedToClient.type}`);\r\n            return new ResponseFactory.responses[returnedToClient.type]({}, returnedToClient);\r\n        } else {\r\n            throw new Error(`Unrecognised post type '${returnedToClient.type}'`);\r\n        }\r\n    }\r\n}\n\nfunction packageClientResponse (returnedToClient) {\r\n    const headers = new Headers;\r\n    headers.set('Content-Type', 'application/json');\r\n\r\n    return new Response(\r\n        JSON.stringify(returnedToClient),\r\n        {\r\n            status: returnedToClient.error ? 500 : 200,\r\n            headers\r\n        });\r\n}\n\nclass LocalResponse {\r\n    toSaveLocally;\r\n    returnedToClient;\r\n\r\n    /**\r\n     * @type {Response}\r\n     */\r\n    prebuiltResponse;\r\n\r\n    failureErrorMessage = 'Failed to save a local copy on your device.';\r\n    failureErrorHelp = 'Your internet connection may have failed (or there could be a problem with the server). ' +\r\n        'It wasn\\'t possible to save a temporary copy on your device. Perhaps there is insufficient space? ' +\r\n        'Please try to re-establish a network connection and try again.';\r\n\r\n    constructor(toSaveLocally, returnedToClient) {\r\n        this.toSaveLocally = toSaveLocally;\r\n        this.returnedToClient = returnedToClient;\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param {Response} prebuiltResponse\r\n     * @returns this\r\n     */\r\n    setPrebuiltResponse(prebuiltResponse) {\r\n        this.prebuiltResponse = prebuiltResponse;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @returns {Promise<Response>}\r\n     */\r\n    storeLocally() {\r\n        return localforage.setItem(this.localKey(), this.toSaveLocally).then(() => {\r\n                console.log(`Stored object ${this.localKey()} locally`);\r\n                return this.prebuiltResponse ? this.prebuiltResponse : packageClientResponse(this.returnedToClient);\r\n            },\r\n            (reason) => {\r\n                console.log(`Failed to store object ${this.localKey()} locally`);\r\n                console.log({reason});\r\n                this.returnedToClient.error = this.failureErrorMessage;\r\n                this.returnedToClient.errorHelp = this.failureErrorHelp;\r\n\r\n                return packageClientResponse(this.returnedToClient);\r\n            }\r\n        )\r\n    }\r\n\r\n    /**\r\n     * @return {string}\r\n     */\r\n    localKey () {\r\n        throw new Error(`LocalKey must be implemented in a subclass for ${this.toSaveLocally.type}`);\r\n    }\r\n\r\n    /**\r\n     * called to build the response to the post that is returned to the client\r\n     * in the absence of the remote server\r\n     *\r\n     * @returns {this}\r\n     * @abstract\r\n     */\r\n    populateClientResponse() {\r\n    }\r\n}\n\nclass ImageResponse extends LocalResponse {\r\n    failureErrorMessage = 'Failed to store image.';\r\n    failureErrorHelp = 'Your internet connection may have failed (or there could be a problem with the server). ' +\r\n        'It wasn\\'t possible to save a temporary copy on your device. Perhaps there is insufficient space? ' +\r\n        'Please try to re-establish a network connection and try again.';\r\n\r\n    /**\r\n     * called to build the response to the post that is returned to the client\r\n     * in the absence of the remote server\r\n     *\r\n     * @returns {this}\r\n     */\r\n    populateClientResponse() {\r\n        this.returnedToClient.id = this.toSaveLocally.imageId ? this.toSaveLocally.imageId : this.toSaveLocally.id;\r\n        this.returnedToClient.imageId = this.toSaveLocally.imageId ? this.toSaveLocally.imageId : this.toSaveLocally.id;\r\n        this.returnedToClient.type = 'image';\r\n        this.returnedToClient.surveyId = this.toSaveLocally.surveyId;\r\n        this.returnedToClient.occurrenceId = this.toSaveLocally.occurrenceId;\r\n        this.returnedToClient.created = parseInt(this.toSaveLocally.created, 10); // stamps from server always take precedence\r\n        this.returnedToClient.modified = parseInt(this.toSaveLocally.modified, 10);\r\n        this.returnedToClient.saveState = SAVE_STATE_LOCAL;\r\n        this.returnedToClient.deleted = this.toSaveLocally.deleted;\r\n        this.returnedToClient.projectId = parseInt(this.toSaveLocally.projectId, 10);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * called to mirror a response from the server locally\r\n     *\r\n     * @returns {this}\r\n     */\r\n    populateLocalSave() {\r\n        this.toSaveLocally.surveyId = this.returnedToClient.surveyId;\r\n        this.toSaveLocally.type = 'image';\r\n        this.toSaveLocally.occurrenceId = this.returnedToClient.occurrenceId;\r\n        this.toSaveLocally.imageId = this.returnedToClient.id ? this.returnedToClient.id : this.returnedToClient.imageId; // hedging\r\n        this.toSaveLocally.id = this.returnedToClient.id ? this.returnedToClient.id : this.returnedToClient.imageId; // hedging\r\n        this.toSaveLocally.created = parseInt(this.returnedToClient.created, 10); // stamps from server always take precedence\r\n        this.toSaveLocally.modified = parseInt(this.returnedToClient.modified, 10);\r\n        this.toSaveLocally.saveState = SAVE_STATE_SERVER;\r\n        this.toSaveLocally.deleted = (this.returnedToClient.deleted === true || this.returnedToClient.deleted === 'true');\r\n        this.toSaveLocally.projectId = parseInt(this.returnedToClient.projectId, 10);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @returns {string}\r\n     */\r\n    localKey() {\r\n        return `image.${this.toSaveLocally.imageId}`;\r\n    }\r\n\r\n    static register() {\r\n        ResponseFactory.responses.image = ImageResponse;\r\n    }\r\n}\n\nclass SurveyResponse extends LocalResponse {\r\n    failureErrorMessage = 'Failed to store survey.';\r\n    failureErrorHelp = 'Your internet connection may have failed (or there could be a problem with the server). ' +\r\n        'It wasn\\'t possible to save a temporary copy on your device. Perhaps there is insufficient space? ' +\r\n        'Please try to re-establish a network connection and try again.';\r\n\r\n    /**\r\n     * called to build the response to the post that is returned to the client\r\n     * in the absence of the remote server\r\n     *\r\n     * @returns {this}\r\n     */\r\n    populateClientResponse() {\r\n        this.toSaveLocally.surveyId = this.returnedToClient.id ? this.returnedToClient.id : this.returnedToClient.surveyId; // hedging\r\n        this.toSaveLocally.id = this.returnedToClient.id ? this.returnedToClient.id : this.returnedToClient.surveyId; // hedging\r\n        this.returnedToClient.type = 'survey';\r\n        this.returnedToClient.attributes = this.toSaveLocally.attributes;\r\n        this.returnedToClient.created = this.toSaveLocally.created; // stamps from server always take precedence\r\n        this.returnedToClient.modified = this.toSaveLocally.modified;\r\n        this.returnedToClient.saveState = SAVE_STATE_LOCAL;\r\n        this.returnedToClient.deleted = this.toSaveLocally.deleted;\r\n        this.returnedToClient.projectId = this.toSaveLocally.projectId;\r\n        this.returnedToClient.userId = this.toSaveLocally.userId || '';\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * called to mirror a response from the server locally\r\n     *\r\n     * @returns {this}\r\n     */\r\n    populateLocalSave() {\r\n        this.toSaveLocally.surveyId = this.returnedToClient.id ? this.returnedToClient.id : this.returnedToClient.surveyId;\r\n        this.toSaveLocally.id = this.returnedToClient.id ? this.returnedToClient.id : this.returnedToClient.surveyId;\r\n        this.toSaveLocally.type = 'survey';\r\n        this.toSaveLocally.attributes = this.returnedToClient.attributes;\r\n        this.toSaveLocally.created = parseInt(this.returnedToClient.created, 10); // stamps from server always take precedence\r\n        this.toSaveLocally.modified = parseInt(this.returnedToClient.modified, 10);\r\n        this.toSaveLocally.saveState = SAVE_STATE_SERVER;\r\n        this.toSaveLocally.deleted = this.returnedToClient.deleted;\r\n        this.toSaveLocally.projectId = parseInt(this.returnedToClient.projectId, 10);\r\n        this.toSaveLocally.userId = this.returnedToClient.userId || '';\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @returns {string}\r\n     */\r\n    localKey() {\r\n        return `survey.${this.toSaveLocally.surveyId}`;\r\n    }\r\n\r\n    static register() {\r\n        ResponseFactory.responses.survey = SurveyResponse;\r\n    }\r\n}\n\nclass OccurrenceResponse extends LocalResponse {\r\n    failureErrorMessage = 'Failed to store occurrence.';\r\n    failureErrorHelp = 'Your internet connection may have failed (or there could be a problem with the server). ' +\r\n        'It wasn\\'t possible to save a temporary copy on your device. Perhaps there is insufficient space? ' +\r\n        'Please try to re-establish a network connection and try again.';\r\n\r\n    /**\r\n     * called to build the response to the post that is returned to the client\r\n     * in the absence of the remote server\r\n     *\r\n     * @returns {this}\r\n     */\r\n    populateClientResponse() {\r\n        this.returnedToClient.id = this.toSaveLocally.occurrenceId ? this.toSaveLocally.occurrenceId : this.toSaveLocally.id;\r\n        this.returnedToClient.occurrenceId = this.toSaveLocally.occurrenceId ? this.toSaveLocally.occurrenceId : this.toSaveLocally.id;\r\n        this.returnedToClient.type = 'occurrence';\r\n        this.returnedToClient.surveyId = this.toSaveLocally.surveyId;\r\n        this.returnedToClient.attributes = this.toSaveLocally.attributes;\r\n        this.returnedToClient.created = parseInt(this.toSaveLocally.created, 10); // stamps from server always take precedence\r\n        this.returnedToClient.modified = parseInt(this.toSaveLocally.modified, 10);\r\n        this.returnedToClient.saveState = SAVE_STATE_LOCAL;\r\n        this.returnedToClient.deleted = this.toSaveLocally.deleted;\r\n        this.returnedToClient.projectId = parseInt(this.toSaveLocally.projectId, 10);\r\n        this.returnedToClient.userId = this.toSaveLocally.userId || '';\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * called to mirror a response from the server locally\r\n     *\r\n     * @returns {this}\r\n     */\r\n    populateLocalSave() {\r\n        this.toSaveLocally.occurrenceId = this.returnedToClient.id ? this.returnedToClient.id : this.returnedToClient.occurrenceId; // hedging\r\n        this.toSaveLocally.id = this.returnedToClient.id ? this.returnedToClient.id : this.returnedToClient.occurrenceId; // hedging\r\n        this.toSaveLocally.type = 'occurrence';\r\n        this.toSaveLocally.surveyId = this.returnedToClient.surveyId;\r\n        this.toSaveLocally.attributes = this.returnedToClient.attributes;\r\n        this.toSaveLocally.created = parseInt(this.returnedToClient.created, 10); // stamps from server always take precedence\r\n        this.toSaveLocally.modified = parseInt(this.returnedToClient.modified, 10);\r\n        this.toSaveLocally.saveState = SAVE_STATE_SERVER;\r\n        this.toSaveLocally.deleted = (this.returnedToClient.deleted === true || this.returnedToClient.deleted === 'true');\r\n        this.toSaveLocally.projectId = parseInt(this.returnedToClient.projectId, 10);\r\n        this.toSaveLocally.userId = this.returnedToClient.userId || '';\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @returns {string}\r\n     */\r\n    localKey() {\r\n        return `occurrence.${this.toSaveLocally.occurrenceId}`;\r\n    }\r\n\r\n    static register() {\r\n        ResponseFactory.responses.occurrence = OccurrenceResponse;\r\n    }\r\n}\n\n// service worker for BSBI app\r\n\r\nclass BSBIServiceWorker {\r\n\r\n    /**\r\n     * @var {Array.<string>}\r\n     */\r\n    URL_CACHE_SET;\r\n\r\n    /**\r\n     *\r\n     * @param {{\r\n     *  forageName : string,\r\n     *  postPassThroughWhitelist : RegExp,\r\n     *  postImageUrlMatch : RegExp,\r\n     *  getImageUrlMatch : RegExp,\r\n     *  interceptUrlMatches : RegExp,\r\n     *  ignoreUrlMatches : RegExp,\r\n     *  staticUrlMatches : RegExp|null,\r\n     *  passThroughNoCache : RegExp,\r\n     *  indexUrl : string,\r\n     *  urlCacheSet : Array.<string>,\r\n     *  version : string\r\n     * }} configuration\r\n     */\r\n    initialise(configuration) {\r\n        if (!Promise.prototype.finally) {\r\n            Promise.prototype.finally = function (callback) { // must use 'function' here rather than arrow, due to this binding requirement\r\n                return this.then(callback)\r\n                    .catch(callback);\r\n            };\r\n        }\r\n\r\n        ImageResponse.register();\r\n        SurveyResponse.register();\r\n        OccurrenceResponse.register();\r\n\r\n        this.CACHE_VERSION = `version-1.0.3.1688563136-${configuration.version}`;\r\n\r\n        const POST_PASS_THROUGH_WHITELIST = configuration.postPassThroughWhitelist;\r\n        const POST_IMAGE_URL_MATCH = configuration.postImageUrlMatch;\r\n        const GET_IMAGE_URL_MATCH = configuration.getImageUrlMatch;\r\n        const SERVICE_WORKER_INTERCEPT_URL_MATCHES = configuration.interceptUrlMatches;\r\n        const SERVICE_WORKER_IGNORE_URL_MATCHES = configuration.ignoreUrlMatches;\r\n        const SERVICE_WORKER_PASS_THROUGH_NO_CACHE = configuration.passThroughNoCache;\r\n\r\n        /**\r\n         * Urls that should be cached, with no need for automatic refresh\r\n         *\r\n         * @type {RegExp|null}\r\n         */\r\n        const SERVICE_WORKER_STATIC_URL_MATCHES= configuration.staticUrlMatches;\r\n        const INDEX_URL = configuration.indexUrl;\r\n\r\n        this.URL_CACHE_SET = configuration.urlCacheSet;\r\n\r\n        localforage.config({\r\n            name: configuration.forageName\r\n        });\r\n\r\n        self.addEventListener(\"message\", (event) => {\r\n                console.log({\"Message received\": event.data});\r\n\r\n                switch (event.data.action) {\r\n                    case 'recache':\r\n                        event.waitUntil(this.handleRecacheMessage(event.data.url));\r\n                        break;\r\n                }\r\n            }\r\n        );\r\n\r\n        // On install, cache some resources.\r\n        self.addEventListener('install', (evt) => {\r\n            console.log('BSBI app service worker is being installed.');\r\n\r\n            // noinspection JSIgnoredPromiseFromCall\r\n            self.skipWaiting();\r\n\r\n            // Ask the service worker to keep installing until the returning promise\r\n            // resolves.\r\n            evt.waitUntil(\r\n                this.precache()\r\n                    // see https://serviceworke.rs/immediate-claim_service-worker_doc.html\r\n                    // .finally(() => {\r\n                    //     console.log(\"Service worker skip waiting after precache.\");\r\n                    //\r\n                    //     return self.skipWaiting();\r\n                    // })\r\n            );\r\n        });\r\n\r\n        self.addEventListener('activate', (event) => {\r\n            console.log({'service worker activate event' : event});\r\n\r\n            event.waitUntil(\r\n                self.clients.matchAll({\r\n                    includeUncontrolled: true\r\n                }).then((clientList) => {\r\n                    const urls = clientList.map((client) => {\r\n                        return client.url;\r\n                    });\r\n                    console.log('[ServiceWorker] Matching clients:', urls.join(', '));\r\n                }).then(() => caches.keys())\r\n                    .then((cacheNames) => {\r\n                        return Promise.all(\r\n                            cacheNames.map((cacheName) => {\r\n                                // test for 'version' prefix to avoid deleting mapbox tiles\r\n                                if (cacheName.startsWith('version') && cacheName !== this.CACHE_VERSION) {\r\n                                    console.log('[ServiceWorker] Deleting old cache:', cacheName);\r\n                                    return caches.delete(cacheName);\r\n                                }\r\n                            })\r\n                        );\r\n                    }).then(() => {\r\n                        console.log('[ServiceWorker] Claiming clients for version', this.CACHE_VERSION);\r\n                        return self.clients.claim();\r\n                    })\r\n                );\r\n            });\r\n\r\n\r\n        // // see https://davidwalsh.name/background-sync\r\n        // // https://developers.google.com/web/updates/2015/12/background-sync\r\n        // self.addEventListener('sync', function(event) {\r\n        //\r\n        // });\r\n\r\n        // On fetch, use cache but update the entry with the latest contents\r\n        // from the server.\r\n        self.addEventListener('fetch', /** @param {FetchEvent} evt */ (evt) => {\r\n            //console.log(`The service worker is serving: '${evt.request.url}'`);\r\n\r\n            evt.preventDefault();\r\n\r\n            if (evt.request.method === 'POST') {\r\n                //console.log(`Got a post request`);\r\n\r\n                //if (evt.request.url.match(POST_PASS_THROUGH_WHITELIST)) {\r\n                if (POST_PASS_THROUGH_WHITELIST.test(evt.request.url)) {\r\n                    console.log(`Passing through whitelisted post request for: ${evt.request.url}`);\r\n                    evt.respondWith(fetch(evt.request));\r\n                } else if (SERVICE_WORKER_PASS_THROUGH_NO_CACHE.test(evt.request.url)) {\r\n                    console.log(`Passing through nocache list post request for: ${evt.request.url}`);\r\n                    evt.respondWith(fetch(evt.request));\r\n                } else {\r\n                    //if (evt.request.url.match(POST_IMAGE_URL_MATCH)) {\r\n                    if (POST_IMAGE_URL_MATCH.test(evt.request.url)) {\r\n                        console.log(`Got an image post request: '${evt.request.url}'`);\r\n                        this.handle_image_post(evt);\r\n                    } else {\r\n                        console.log(`Got post request: '${evt.request.url}'`);\r\n                        this.handle_post(evt);\r\n                    }\r\n                }\r\n            } else {\r\n                // test whether this is a direct link in to a page that should be substituted by\r\n                // the single page app\r\n\r\n                // console.log(`about to test url '${evt.request.url}'`);\r\n\r\n                if (SERVICE_WORKER_INTERCEPT_URL_MATCHES.test(evt.request.url) &&\r\n                    !SERVICE_WORKER_IGNORE_URL_MATCHES.test(evt.request.url)\r\n                ) {\r\n                    // serving single page app instead\r\n                    console.log(`redirecting to the root of the SPA for '${evt.request.url}'`);\r\n                    let spaRequest = new Request(INDEX_URL);\r\n                    evt.respondWith(this.fromCache(spaRequest));\r\n\r\n                    // don't need to check for fresh, stale is fine here\r\n                    //evt.waitUntil(this.update(spaRequest));\r\n                } else if (evt.request.url.match(GET_IMAGE_URL_MATCH)) {\r\n                    console.log(`request is for an image '${evt.request.url}'`);\r\n                    this.handleImageFetch(evt);\r\n                } else if (SERVICE_WORKER_PASS_THROUGH_NO_CACHE.test(evt.request.url)) {\r\n                    // typically for external content that can't/shouldn't be cached, e.g. MapBox tiles (which mapbox stores directly in the cache itself)\r\n                    evt.respondWith(fetch(evt.request));\r\n                } else if (SERVICE_WORKER_STATIC_URL_MATCHES?.test(evt.request.url)) {\r\n                    // typically for content that won't change\r\n                    evt.respondWith(this.fromCache(evt.request));\r\n                } else {\r\n                    console.log(`request is for non-image '${evt.request.url}'`);\r\n                    // You can use `respondWith()` to answer immediately, without waiting for the\r\n                    // network response to reach the service worker...\r\n                    evt.respondWith(this.fromCache(evt.request));\r\n                    // ...and `waitUntil()` to prevent the worker from being killed until the\r\n                    // cache is updated.\r\n                    evt.waitUntil(this.update(evt.request));\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n\r\n    /**\r\n     * used to handle small posts (not images)\r\n     * attempts remote save first then caches locally\r\n     *\r\n     * @param {FetchEvent} evt\r\n     */\r\n    handle_post(evt) {\r\n        let clonedRequest;\r\n        try {\r\n            clonedRequest = evt.request.clone();\r\n        } catch (e) {\r\n            console.log('Failed to clone request.');\r\n            console.log({'Cloning error': e});\r\n        }\r\n\r\n        evt.respondWith(fetch(evt.request)\r\n            .then((response) => {\r\n                // would get here if the server responds at all, but need to check that the response is ok (not a server error)\r\n                if (response.ok) {\r\n                    return Promise.resolve(response)\r\n                        .then((response) => {\r\n                            // save the response locally\r\n                            // before returning it to the client\r\n\r\n                            console.log('About to clone the json response.');\r\n\r\n                            return response.clone().json();\r\n                        })\r\n                        .then((jsonResponseData) => {\r\n                            console.log('Following successful remote post, about to save locally.');\r\n\r\n                            return ResponseFactory\r\n                                .fromPostResponse(jsonResponseData)\r\n                                .setPrebuiltResponse(response)\r\n                                .populateLocalSave()\r\n                                .storeLocally();\r\n                        })\r\n                        .catch((error) => {\r\n                            // for some reason local storage failed, after a successful server save\r\n                            console.log({'local storage failed' : error});\r\n\r\n                            return Promise.resolve(response); // pass through the server response\r\n                        });\r\n                } else {\r\n                    console.log(`Failed to save, moving on to attempt IndexedDb`);\r\n                    return Promise.reject('Failed to save to server.');\r\n                }\r\n            })\r\n            .catch( (reason) => {\r\n                    console.log({'post fetch failed (probably no network)': reason});\r\n\r\n                    // would get here if the network is down\r\n                    // or if got invalid response from the server\r\n\r\n                    console.log(`post fetch failed (probably no network), (reason: ${reason})`);\r\n                    //console.log({'post failure reason' : reason});\r\n\r\n                    // /**\r\n                    //  * simulated result of post, returned as JSON body\r\n                    //  * @type {{surveyId: string, occurrenceId: string, imageId: string, saveState: string, [error]: string, [errorHelp]: string}}\r\n                    //  */\r\n                    // let returnedToClient = {};\r\n\r\n                    return clonedRequest.formData()\r\n                        .then((formData) => {\r\n                                console.log('got to form data handler');\r\n                                //console.log({formData});\r\n\r\n                                return ResponseFactory\r\n                                    .fromPostedData(formData)\r\n                                    .populateClientResponse()\r\n                                    .storeLocally();\r\n                            }, (reason) => {\r\n                                console.log({'failed to read form data locally' : reason});\r\n\r\n                                /**\r\n                                 * simulated result of post, returned as JSON body\r\n                                 * @type {{[surveyId]: string, [occurrenceId]: string, [imageId]: string, [saveState]: string, [error]: string, [errorHelp]: string}}\r\n                                 */\r\n                                let returnedToClient = {\r\n                                    error: 'Failed to process posted response data. (internal error)',\r\n                                    errorHelp: 'Your internet connection may have failed (or there could be a problem with the server). ' +\r\n                                        'It wasn\\'t possible to save a temporary copy on your device. (an unexpected error occurred) ' +\r\n                                        'Please try to re-establish a network connection and try again.'\r\n                                };\r\n\r\n                                return packageClientResponse(returnedToClient);\r\n                            }\r\n                        );\r\n                }\r\n            ));\r\n    }\r\n\r\n    /**\r\n     * used to handle image posts, which need to respond quickly even if the network is slow\r\n     * attempts local cache first then saves out to network\r\n     *\r\n     * @param {FetchEvent} event\r\n     */\r\n    handle_image_post(event) {\r\n        let clonedRequest;\r\n\r\n        console.log('posting image');\r\n\r\n        try {\r\n            clonedRequest = event.request.clone();\r\n        } catch (e) {\r\n            console.log('Failed to clone request.');\r\n            console.log({'Cloning error': e});\r\n        }\r\n\r\n        // send back a quick response to the client from local storage (before the server request completes)\r\n        event.respondWith(\r\n            clonedRequest.formData()\r\n                .then((formData) => {\r\n                        console.log({'got to image form data handler' : formData});\r\n                        //console.log({formData});\r\n\r\n                        return ResponseFactory\r\n                            .fromPostedData(formData)\r\n                            .populateClientResponse()\r\n                            .storeLocally()\r\n                            .then((response) => {\r\n\r\n                                // separately send data to the server, but response goes to client before this completes\r\n                                // am unsure if the return from the wait until part ever reaches the client\r\n                                event.waitUntil(fetch(event.request)\r\n                                    .then((response) => {\r\n                                            console.log('posting image to server in waitUntil part of fetch cycle');\r\n\r\n                                            // would get here if the server responds at all, but need to check that the response is ok (not a server error)\r\n                                            if (response.ok) {\r\n                                                console.log('posted image to server in waitUntil part of fetch cycle: got OK response');\r\n\r\n                                                return Promise.resolve(response)\r\n                                                    .then((response) => {\r\n                                                        // save the response locally\r\n                                                        // before returning it to the client\r\n\r\n                                                        return response.clone().json();\r\n                                                    })\r\n                                                    .then((jsonResponseData) => {\r\n                                                        return ResponseFactory\r\n                                                            .fromPostResponse(jsonResponseData)\r\n                                                            .setPrebuiltResponse(response)\r\n                                                            .populateLocalSave()\r\n                                                            .storeLocally();\r\n                                                    })\r\n                                                    .catch((error) => {\r\n                                                        // for some reason local storage failed, after a successful server save\r\n                                                        console.log({error});\r\n\r\n                                                        return Promise.resolve(response); // pass through the server response\r\n                                                    });\r\n                                            } else {\r\n                                                console.log('posted image to server in waitUntil part of fetch cycle: got Error response');\r\n\r\n                                                /**\r\n                                                 * simulated result of post, returned as JSON body\r\n                                                 * @type {{[surveyId]: string, [occurrenceId]: string, [imageId]: string, [saveState]: string, [error]: string, [errorHelp]: string}}\r\n                                                 */\r\n                                                let returnedToClient = {\r\n                                                    error: 'Failed to save posted response data. (internal error)',\r\n                                                    errorHelp: 'Your internet connection may have failed (or there could be a problem with the server). ' +\r\n                                                        'It wasn\\'t possible to save a temporary copy on your device. (an unexpected error occurred) ' +\r\n                                                        'Please try to re-establish a network connection and try again.'\r\n                                                };\r\n\r\n                                                return packageClientResponse(returnedToClient);\r\n                                            }\r\n                                        }, () => {\r\n                                            console.log('Rejected image post fetch from server - implies network is down');\r\n                                        }\r\n                                    ));\r\n\r\n                                return response;\r\n                            });\r\n                    }, (reason) => {\r\n                        console.log('failed to read form data locally');\r\n                        console.log({reason});\r\n\r\n                        /**\r\n                         * simulated result of post, returned as JSON body\r\n                         * @type {{[surveyId]: string, [occurrenceId]: string, [imageId]: string, [saveState]: string, [error]: string, [errorHelp]: string}}\r\n                         */\r\n                        let returnedToClient = {\r\n                            error: 'Failed to process posted response data. (internal error)',\r\n                            errorHelp: 'Your internet connection may have failed (or there could be a problem with the server). ' +\r\n                                'It wasn\\'t possible to save a temporary copy on your device. (an unexpected error occurred) ' +\r\n                                'Please try to re-establish a network connection and try again.'\r\n                        };\r\n\r\n                        return packageClientResponse(returnedToClient);\r\n                    }\r\n                )\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Open a cache and use `addAll()` with an array of assets to add all of them\r\n     * to the cache. Return a promise resolving when all the assets are added.\r\n     *\r\n     * @returns {Promise<void>}\r\n     */\r\n    precache() {\r\n        return caches.open(this.CACHE_VERSION).then((cache) => {\r\n            return cache.addAll(this.URL_CACHE_SET);\r\n        }).catch((error) => {\r\n            console.log({'Precache failed result' : error});\r\n            return Promise.resolve();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Open the cache where the assets were stored and search for the requested\r\n     * resource. Notice that in case of no matching, the promise still resolves,\r\n     * but with `undefined` as value.\r\n     *\r\n     * @param {Request} request\r\n     * @param {boolean} tryRemoteFallback\r\n     * @param {number} remoteTimeoutMilliseconds (default 0 for no forced timeout)\r\n     * @returns {Promise<Response | Promise<Response>>}\r\n     */\r\n    fromCache(request, tryRemoteFallback= true, remoteTimeoutMilliseconds = 0) {\r\n        // @todo need to serve index.html in place of all Navigo-served pages\r\n        // (an issue if someone returns to a bookmarked page within the app)\r\n\r\n        console.log('attempting fromCache response');\r\n\r\n        return caches.open(this.CACHE_VERSION).then((cache) => {\r\n            console.log('cache is open');\r\n\r\n            return cache.match(request).then((cachedResponse) => {\r\n                console.log(cachedResponse ?\r\n                    `cache matched ${request.url}`\r\n                    :\r\n                    `no cache match for ${request.url}`);\r\n\r\n                return cachedResponse || (tryRemoteFallback && this.update(request, remoteTimeoutMilliseconds)); // return cache match or if not cached then go out to network (and then locally cache the response)\r\n\r\n                // // see https://developer.chrome.com/docs/workbox/caching-strategies-overview/\r\n                // return cachedResponse || fetch(new Request(request, {mode: 'cors', credentials: 'omit'})).then((fetchedResponse) => {\r\n                //     // Add the network response to the cache for future visits.\r\n                //     // Note: we need to make a copy of the response to save it in\r\n                //     // the cache and use the original as the request response.\r\n                //     cache.put(request, fetchedResponse.clone());\r\n                //\r\n                //     // Return the network response\r\n                //     return fetchedResponse;\r\n                // });\r\n            });\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * Special case response for images\r\n     * attempt to serve from local cache first,\r\n     * if that fails then go out to network\r\n     * finally see if there is an image in indexeddb\r\n     *\r\n     * @param {FetchEvent} evt\r\n     */\r\n    handleImageFetch(evt) {\r\n        // tryRemoteFallback set to false to ensure rapid response to client when bad network, at the cost of no access to remotely compressed image\r\n\r\n        evt.respondWith(this.fromCache(evt.request, true, 5000).then((response) => {\r\n                console.log('In handleImageFetch promise');\r\n\r\n                // response may be a 404\r\n                if (response && response.ok) {\r\n                    console.log('Responding with image from cache (or remotely if no cache).');\r\n                    return response;\r\n                } else {\r\n                    // not cached and no network access\r\n                    // try to respond from local storage\r\n\r\n                    const url = evt.request.url;\r\n                    console.log(`Attempting image match for '${url}'`);\r\n\r\n                    const matches = url.match(/imageid=([a-fA-F0-9]{8}-(?:[a-fA-F0-9]{4}-){3}[a-fA-F0-9]{12})/);\r\n\r\n                    if (matches) {\r\n                        const imageId = matches[1];\r\n                        console.log(`Returning image match for '${url}' from local database`);\r\n                        return this.imageFromLocalDatabase(imageId);\r\n                    } else {\r\n                        console.log(`Failed to match image id in url '${url}'`);\r\n                    }\r\n                }\r\n            })\r\n                .catch((error) => {\r\n                    const url = evt.request.url;\r\n                    console.log({'caught' : error});\r\n                    console.log(`In catch following failed network fetch, attempting image match for '${url}'`);\r\n\r\n                    const matches = url.match(/imageid=([a-fA-F0-9]{8}-(?:[a-fA-F0-9]{4}-){3}[a-fA-F0-9]{12})/);\r\n\r\n                    if (matches) {\r\n                        const imageId = matches[1];\r\n                        console.log(`(via catch) Returning image match for '${url}' from local database`);\r\n                        return this.imageFromLocalDatabase(imageId);\r\n                    } else {\r\n                        console.log(`(via catch) Failed to match image id in url '${url}'`);\r\n                        return Promise.reject(null);\r\n                    }\r\n                })\r\n        );\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param {string} imageId\r\n     * @returns {Promise}\r\n     */\r\n    imageFromLocalDatabase(imageId) {\r\n        const image = new OccurrenceImage();\r\n\r\n        console.log('attempting retrieval of image data from local database');\r\n\r\n        return Model.retrieveFromLocal(imageId, image).then((image) => {\r\n            console.log(`Retrieved image '${imageId}' from indexeddb.`);\r\n            if (image.file) {\r\n                const headers = new Headers();\r\n                headers.append('Content-Type', image.file.type);\r\n\r\n                return new Response(image.file, {\r\n                    \"status\": 200,\r\n                    \"statusText\": \"OK image response from IndexedDb\"\r\n                });\r\n            } else {\r\n                console.log(`No local file object associated with retrieved image '${imageId}' from indexeddb.`);\r\n                return Promise.reject(`No local file object associated with retrieved image '${imageId}' from indexeddb.`);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param url\r\n     */\r\n    handleRecacheMessage(url) {\r\n        return caches.open(this.CACHE_VERSION).then((cache) => {\r\n            return cache.add(url);\r\n        }).catch((error) => {\r\n            console.log({'Precache failed result' : error});\r\n            return Promise.resolve();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Update consists in opening the cache, performing a network request and\r\n     * storing the new response data.\r\n     *\r\n     * @param {Request} request\r\n     * @param {number} timeout request timeout in milliseconds (or 0 for no timeout)\r\n     * @returns {Promise<Response>}\r\n     */\r\n    update(request, timeout = 0) {\r\n        request = new Request(request, {mode: 'cors', credentials: 'omit'});\r\n\r\n        console.log(`Attempting fetch and cache update of ${request.url}`);\r\n\r\n        return caches.open(this.CACHE_VERSION).then((cache) => {\r\n            let signalController;\r\n            let timeoutId;\r\n            const fetchOptions = {cache: \"no-cache\"};\r\n\r\n            if (timeout) {\r\n                signalController = new AbortController();\r\n                timeoutId = setTimeout(() => {\r\n                    signalController.abort();\r\n                    console.log(`User-define update fetch timeout expired after ${timeout} ms`);\r\n                }, timeout);\r\n                fetchOptions.signal = signalController.signal;\r\n            }\r\n\r\n            return fetch(request, fetchOptions).then((response) => {\r\n                if (timeoutId) {\r\n                    clearTimeout(timeoutId);\r\n                    timeoutId = null;\r\n                }\r\n\r\n                if (response.ok) {\r\n                    console.log(`(re-)caching ${request.url}`);\r\n                    return cache.put(request, response).then(() => {\r\n                        return cache.match(request);\r\n                    });\r\n                } else {\r\n                    console.log(`Request during cache update failed for ${request.url}`);\r\n                    console.log({'failed cache response': response});\r\n                    return Promise.reject('Request during cache update failed, not caching.');\r\n                }\r\n            }).catch((error) => {\r\n                if (timeoutId) {\r\n                    clearTimeout(timeoutId);\r\n                    timeoutId = null;\r\n                }\r\n\r\n                console.log(`Cache attempt failed for ${request.url}: error was ${error}`);\r\n                return Promise.reject(`Cache attempt failed for ${request.url}: error was ${error}`);\r\n            });\r\n        });\r\n    }\r\n}\n\n/**\r\n *\r\n * @param {string} separator\r\n * @param {string} finalSeparator\r\n * @param {Array.<string>} list\r\n * @return string\r\n */\r\nfunction formattedImplode(separator, finalSeparator, list) {\r\n    if (list.length > 2) {\r\n        const last = list.pop();\r\n        return `${list.join(separator + ' ')} ${finalSeparator} ${last}`;\r\n    } else {\r\n        return list.join(` ${finalSeparator} `);\r\n    }\r\n}\n\nexport { App, AppController, BSBIServiceWorker, EventHarness, InternalAppError, Model, NotFoundError, Occurrence, OccurrenceImage, Party, StaticContentController, Survey, SurveyPickerController, Taxon, TaxonError, UUID_REGEX, escapeHTML, formattedImplode, uuid };\n//# sourceMappingURL=index.js.map\n","// service worker for Nyph app\r\n\r\n// based around the 'Cache and update' recipe along with many modifications\r\n// see https://serviceworke.rs\r\n\r\n'use strict';\r\n\r\nimport {BSBIServiceWorker} from \"bsbi-app-framework\";\r\nimport {FORAGE_NAME} from \"../framework/NyphApp\";\r\n\r\n// noinspection JSUnusedLocalSymbols,ES6ConvertVarToLetConst\r\n//var BsbiDb = BsbiDb || {scriptVersions: { TaxonNames : [] } };\r\n\r\n// mainly aiming to determine whether '/app/' or '/testapp/'\r\nlet pathPrefix = location.pathname.split('/')[1];\r\n\r\n// kill after 2023-03-01 to prevent the app perpetuating itself\r\n// if ((new Date).toJSON().slice(0,10) >= '2023-03-01') {\r\n//     throw new Error(\"Built-in expiry date has passed for NYPH.\");\r\n// }\r\n\r\nconst serviceWorker = new BSBIServiceWorker();\r\nserviceWorker.initialise({\r\n    forageName : FORAGE_NAME,\r\n\r\n    postPassThroughWhitelist : /^https:\\/\\/__DOMAIN_REGEX__\\/loadsurveys.php/,\r\n    postImageUrlMatch : /^https:\\/\\/__DOMAIN_REGEX__\\/saveimage.php/,\r\n    getImageUrlMatch : /^https:\\/\\/__DOMAIN_REGEX__\\/image\\.php/,\r\n    interceptUrlMatches : new RegExp(`^https://__DOMAIN_REGEX__/${pathPrefix}/|^https://__DOMAIN_REGEX__/${pathPrefix}$`),\r\n    ignoreUrlMatches : new RegExp(`^https://__DOMAIN_REGEX__/${pathPrefix}/app\\.m?js|^https://__DOMAIN_REGEX__/${pathPrefix}/serviceworker\\.m?js|^https://__DOMAIN_REGEX__/${pathPrefix}/manifest\\.webmanifest|^https://__DOMAIN_REGEX__/${pathPrefix}/index\\.html|^https://api\\.mapbox\\.com`),\r\n    staticUrlMatches : /^https:\\/\\/(?:staticdatabase\\.bsbi\\.org|fonts\\.googleapis\\.com|fonts\\.gstatic\\.com)/,\r\n    indexUrl : `https://__DOMAIN__/${pathPrefix}/index.html`,\r\n\r\n    // postPassThroughWhitelist : /^https:\\/\\/__DOMAIN_REGEX__\\/loadsurveys.php/,\r\n    // postImageUrlMatch : /^https:\\/\\/__DOMAIN_REGEX__\\/saveimage.php/,\r\n    // getImageUrlMatch : /^https:\\/\\/__DOMAIN_REGEX__\\/image\\.php/,\r\n    // interceptUrlMatches : /^https:\\/\\/__DOMAIN_REGEX__\\/app\\/|^https:\\/\\/__DOMAIN_REGEX__\\/app$/,\r\n    // ignoreUrlMatches : /^https:\\/\\/__DOMAIN_REGEX__\\/app\\/app\\.js|^https:\\/\\/__DOMAIN_REGEX__\\/app\\/serviceworker\\.js|^https:\\/\\/__DOMAIN_REGEX__\\/app\\/manifest\\.webmanifest|^https:\\/\\/__DOMAIN_REGEX__\\/app\\/index\\.html|^https:\\/\\/api\\.mapbox\\.com/,\r\n    // indexUrl : 'https://__DOMAIN__/app/index.html',\r\n\r\n    urlCacheSet : [\r\n        './index.html',\r\n        './app.mjs?version=__BSBI_APP_VERSION__',\r\n        './manifest.webmanifest',\r\n        '/appcss/app.__BSBI_APP_VERSION__.css', // note no leading '.' - this is an absolute path\r\n        //'/appcss/theme.css',\r\n        //'/img/gwh_logo1_tsp.png',\r\n        '/img/icons/favicon-32x32.png',\r\n        '/img/icons/favicon-16x16.png',\r\n        '/img/icons/android-icon-192x192.png',\r\n        '/img/nyph_final@2x.png',\r\n        //'/img/icons/gwh_logo1_tsp-512x512.png',\r\n        //'/img/BSBIlong.png',\r\n        'https://fonts.googleapis.com/icon?family=Material+Icons|Material+Icons+Round',\r\n        //'https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css',\r\n        //'/js/taxonnames.js.php',\r\n        'https://staticdatabase.bsbi.org/js/taxonnames.js.php',\r\n        //'https://code.jquery.com/jquery-3.3.1.slim.min.js',\r\n        //'https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.7/umd/popper.min.js',\r\n        //'https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/js/bootstrap.min.js',\r\n        'https://fonts.googleapis.com/css2?family=Gentium+Basic&display=swap',\r\n        // am not caching files under api.mapbox.com\r\n        // so instead serve this locally\r\n        //'https://api.mapbox.com/mapbox-gl-js/plugins/mapbox-gl-geocoder/v4.7.2/mapbox-gl-geocoder.min.js',\r\n        //'/js/mapbox-gl-geocoder-v4.7.2.min.js'\r\n    ],\r\n    passThroughNoCache : /^https:\\/\\/api\\.mapbox\\.com|^https:\\/\\/events\\.mapbox\\.com|^https:\\/\\/browser-update\\.org/,\r\n    version : '__BSBI_APP_VERSION__'\r\n});\r\n","import {App} from \"bsbi-app-framework\";\r\n//import {NotFoundView} from \"bsbi-app-framework-view\";\r\n\r\nexport const PROJECT_ID_NYPH = 2;\r\n\r\nexport const FORAGE_NAME = 'Nyph App2023';\r\n\r\nexport class NyphApp extends App {\r\n    /**\r\n     * @type {number}\r\n     */\r\n    projectId = PROJECT_ID_NYPH;\r\n\r\n    static forageName = FORAGE_NAME;\r\n\r\n    //static LOAD_SURVEYS_ENDPOINT = '/loadsurveys.php';\r\n\r\n    //static EVENT_OCCURRENCE_ADDED = 'occurrenceadded';\r\n    //static EVENT_SURVEYS_CHANGED = 'surveyschanged';\r\n\r\n    /**\r\n     *\r\n     * @type {boolean}\r\n     */\r\n    static devMode = false;\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        this.initialiseSurveyFieldsMirror();\r\n    }\r\n\r\n    _coreSurveyFields = [\r\n        'recorder',\r\n        'email'\r\n    ];\r\n\r\n    _coreSurveyFieldCache = [\r\n\r\n    ];\r\n\r\n    /**\r\n     * Sets handlers to allow certain survey fields to be duplicated from last current survey to new survey\r\n     * used for email address and primary recorder name\r\n     */\r\n    initialiseSurveyFieldsMirror() {\r\n        this.addListener(App.EVENT_NEW_SURVEY, () => {\r\n            console.log('Try to initialise core fields of new survey.');\r\n            if (this._coreSurveyFieldCache) {\r\n                console.log({'Using cached survey values' : this._coreSurveyFieldCache});\r\n                for (let key of this._coreSurveyFields) {\r\n                    this.currentSurvey.attributes[key] = this._coreSurveyFieldCache[key];\r\n                }\r\n            }\r\n        });\r\n\r\n        this.addListener(App.EVENT_SURVEYS_CHANGED, () => {\r\n            if (this.currentSurvey && !this.currentSurvey.isNew) {\r\n                for (let key of this._coreSurveyFields) {\r\n                    this._coreSurveyFieldCache[key] = this.currentSurvey.attributes[key];\r\n                }\r\n\r\n                console.log({'Saved core survey fields' : this._coreSurveyFieldCache});\r\n            }\r\n        });\r\n\r\n        this.addListener(App.EVENT_RESET_SURVEYS, () => {\r\n            this._coreSurveyFieldCache = [];\r\n            console.log('Have reset core survey field cache.');\r\n        });\r\n    }\r\n\r\n    /**\r\n     * A convoluted approach is used to avoid requirement to import NotFoundView\r\n     * (as that bloats the service worker, by pulling in the full view library and bootstrap)\r\n     *\r\n     * @type {NotFoundView}\r\n     */\r\n    notFoundViewObject;\r\n\r\n    notFoundView() {\r\n        this.notFoundViewObject.display();\r\n    }\r\n\r\n    // notFoundView() {\r\n    //     const view = new NotFoundView();\r\n    //     view.display();\r\n    // }\r\n}\r\n"],"names":["EventHarness","eventListeners","static","addListener","eventName","handler","constructionParam","this","handlerFunction","context","invocationParam","push","removeListener","handle","console","log","destructor","fireEvent","param","f","hasOwnProperty","arguments","STOP_PROPAGATION","commonjsGlobal","globalThis","window","global","self","getDefaultExportFromCjs","x","__esModule","Object","prototype","call","commonjsRequire","path","Error","localforage$1","exports","localforage","e","t","n","r","s","o","u","i","code","l","length","_dereq_","module","scheduleDrain","draining","Mutation","MutationObserver","WebKitMutationObserver","called","observer","nextTick","element","document","createTextNode","observe","characterData","data","setImmediate","MessageChannel","createElement","scriptEl","onreadystatechange","parentNode","removeChild","documentElement","appendChild","setTimeout","channel","port1","onmessage","port2","postMessage","queue","oldQueue","len","immediate","task","INTERNAL","handlers","REJECTED","FULFILLED","PENDING","Promise","resolver","TypeError","state","outcome","safelyResolveThenable","QueueItem","promise","onFulfilled","onRejected","callFulfilled","otherCallFulfilled","callRejected","otherCallRejected","unwrap","func","value","returnValue","reject","resolve","getThen","obj","then","apply","thenable","onError","onSuccess","tryToUnwrap","result","tryCatch","status","out","reason","all","iterable","toString","values","Array","resolved","allResolver","resolveFromAll","outValue","error","race","response","constructor","_typeof","Symbol","iterator","_classCallCheck","instance","Constructor","getIDB","indexedDB","webkitIndexedDB","mozIndexedDB","OIndexedDB","msIndexedDB","idb","isIndexedDBValid","open","isSafari","openDatabase","test","navigator","userAgent","platform","hasFetch","fetch","indexOf","IDBKeyRange","createBlob","parts","properties","Blob","name","builder","BlobBuilder","MSBlobBuilder","MozBlobBuilder","WebKitBlobBuilder","append","getBlob","type","Promise$1","executeCallback","callback","executeTwoCallbacks","errorCallback","normalizeKey","key","warn","String","getCallback","DETECT_BLOB_SUPPORT_STORE","supportsBlobs","dbContexts","READ_ONLY","READ_WRITE","_binStringToArrayBuffer","bin","buf","ArrayBuffer","arr","Uint8Array","charCodeAt","_checkBlobSupportWithoutCaching","txn","transaction","blob","objectStore","put","onabort","preventDefault","stopPropagation","oncomplete","matchedChrome","match","matchedEdge","parseInt","_checkBlobSupport","_deferReadiness","dbInfo","dbContext","deferredOperation","deferredOperations","dbReady","_advanceReadiness","pop","_rejectReadiness","err","_getConnection","upgradeNeeded","createDbContext","db","close","dbArgs","version","openreq","onupgradeneeded","createObjectStore","storeName","oldVersion","ex","newVersion","onerror","onsuccess","onversionchange","target","_getOriginalConnection","_getUpgradedConnection","_isUpgradeNeeded","defaultVersion","isNewStore","objectStoreNames","contains","isDowngrade","isUpgrade","incVersion","_encodeBlob","reader","FileReader","onloadend","base64","btoa","__local_forage_encoded_blob","readAsBinaryString","_decodeBlob","encodedBlob","atob","_isEncodedBlob","_fullyReady","_initReady","_dbInfo","_tryReconnect","forages","forage","createTransaction","mode","retries","undefined","tx","_initStorage","options","ready","initPromises","ignoreErrors","j","slice","_defaultConfig","k","getItem","req","get","iterate","openCursor","iterationNumber","cursor","setItem","blobSupport","store","removeItem","clear","count","advanced","openKeyCursor","advance","keys","dropInstance","currentConfig","config","dbPromise","dropObjectPromise","deleteObjectStore","_forage2","dropDBPromise","deleteDatabase","onblocked","asyncStorage","_driver","_support","isWebSQLValid","BASE_CHARS","BLOB_TYPE_PREFIX","BLOB_TYPE_PREFIX_REGEX","SERIALIZED_MARKER","SERIALIZED_MARKER_LENGTH","TYPE_ARRAYBUFFER","TYPE_BLOB","TYPE_INT8ARRAY","TYPE_UINT8ARRAY","TYPE_UINT8CLAMPEDARRAY","TYPE_INT16ARRAY","TYPE_INT32ARRAY","TYPE_UINT16ARRAY","TYPE_UINT32ARRAY","TYPE_FLOAT32ARRAY","TYPE_FLOAT64ARRAY","TYPE_SERIALIZED_MARKER_LENGTH","toString$1","stringToBuffer","serializedString","encoded1","encoded2","encoded3","encoded4","bufferLength","p","buffer","bytes","bufferToString","base64String","substring","serialize","valueType","marker","fileReader","onload","str","readAsArrayBuffer","JSON","stringify","deserialize","parse","blobType","matcher","Int8Array","Uint8ClampedArray","Int16Array","Uint16Array","Int32Array","Uint32Array","Float32Array","Float64Array","localforageSerializer","createDbTable","executeSql","_initStorage$1","dbInfoPromise","description","size","serializer","tryExecuteSql","sqlStatement","args","SYNTAX_ERR","results","rows","getItem$1","item","iterate$1","_setItem","retriesLeft","originalValue","sqlError","QUOTA_ERR","setItem$1","removeItem$1","clear$1","length$1","c","key$1","keys$1","getAllStoreNames","storeNames","dropInstance$1","operationInfo","dropTable","operations","webSQLStorage","isLocalStorageValid","localStorage","_getKeyPrefix","defaultConfig","keyPrefix","checkIfLocalStorageThrows","localStorageTestKey","_isLocalStorageUsable","_initStorage$2","clear$2","getItem$2","iterate$2","keyPrefixLength","key$2","keys$2","itemKey","length$2","removeItem$2","setItem$2","dropInstance$2","localStorageWrapper","sameValue","y","isNaN","includes","array","searchElement","isArray","arg","DefinedDrivers","DriverSupport","DefaultDrivers","INDEXEDDB","WEBSQL","LOCALSTORAGE","DefaultDriverOrder","OptionalDriverMethods","LibraryMethods","concat","DefaultConfig","driver","callWhenReady","localForageInstance","libraryMethod","_args","extend","_key","LocalForage","driverTypeKey","driverName","defineDriver","_config","_driverSet","_initDriver","_ready","_wrapLibraryMethodsWithReady","setDriver","replace","driverObject","complianceError","driverMethods","driverMethodName","configureMissingMethods","methodNotImplementedFactory","methodName","_i","_len","optionalDriverMethod","setDriverSupport","support","info","getDriver","getDriverPromise","getSerializer","serializerPromise","drivers","supportedDrivers","_getSupportedDrivers","setDriverToConfig","extendSelfWithDriver","_extend","initDriver","currentDriverIndex","driverPromiseLoop","oldDriverSetDone","supports","libraryMethodsAndProperties","createInstance","localforage_js","uuid","a","Math","random","Model","_id","_savedRemotely","savedRemotely","savedFlag","EVENT_SAVED_REMOTELY","id","_savedLocally","deleted","createdStamp","modifiedStamp","projectId","isPristine","super","floor","Date","now","unsaved","newId","queuePost","formData","post","_tasks","finally","_next","shift","SAVE_ENDPOINT","method","body","ok","clone","json","responseData","saveState","created","modified","modelObject","TYPE","descriptor","_parseDescriptor","_parseAttributes","attributes","_parseSavedState","userId","touch","evaluateCompletionStatus","formSectionProperties","validity","requiredFieldsPresent","property","validator","field","isValid","OccurrenceImage","file","Map","occurrenceId","surveyId","getUrl","image","save","FormData","placeholderObject","imageCache","set","width","height","attributesString","className","ResponseFactory","toSaveLocally","pair","entries","responses","returnedToClient","packageClientResponse","headers","Headers","Response","LocalResponse","prebuiltResponse","failureErrorMessage","failureErrorHelp","setPrebuiltResponse","storeLocally","localKey","errorHelp","populateClientResponse","ImageResponse","imageId","populateLocalSave","SurveyResponse","survey","OccurrenceResponse","occurrence","pathPrefix","location","pathname","split","URL_CACHE_SET","initialise","configuration","catch","register","CACHE_VERSION","POST_PASS_THROUGH_WHITELIST","postPassThroughWhitelist","POST_IMAGE_URL_MATCH","postImageUrlMatch","GET_IMAGE_URL_MATCH","getImageUrlMatch","SERVICE_WORKER_INTERCEPT_URL_MATCHES","interceptUrlMatches","SERVICE_WORKER_IGNORE_URL_MATCHES","ignoreUrlMatches","SERVICE_WORKER_PASS_THROUGH_NO_CACHE","passThroughNoCache","SERVICE_WORKER_STATIC_URL_MATCHES","staticUrlMatches","INDEX_URL","indexUrl","urlCacheSet","forageName","addEventListener","event","action","waitUntil","handleRecacheMessage","url","evt","skipWaiting","precache","clients","matchAll","includeUncontrolled","clientList","urls","map","client","join","caches","cacheNames","cacheName","startsWith","delete","claim","request","respondWith","handle_image_post","handle_post","spaRequest","Request","fromCache","handleImageFetch","update","clonedRequest","jsonResponseData","fromPostResponse","fromPostedData","cache","addAll","tryRemoteFallback","remoteTimeoutMilliseconds","cachedResponse","matches","imageFromLocalDatabase","caught","retrieveFromLocal","statusText","add","timeout","credentials","signalController","timeoutId","fetchOptions","AbortController","abort","signal","clearTimeout","RegExp"],"mappings":"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"}